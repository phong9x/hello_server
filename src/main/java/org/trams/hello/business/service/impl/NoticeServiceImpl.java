/*
 * Created on 3 Mar 2017 ( Time 10:02:33 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.business.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.annotation.Resource;
import javax.persistence.EntityManager;
import javax.persistence.Query;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import org.trams.hello.bean.Notice;
import org.trams.hello.bean.PageCustom;
import org.trams.hello.bean.jpa.NoticeEntity;
import org.trams.hello.business.service.NoticeService;
import org.trams.hello.business.service.mapping.NoticeServiceMapper;
import org.trams.hello.data.repository.jpa.NoticeJpaRepository;
/**
 * Implementation of NoticeService
 */
@Component
@Transactional
public class NoticeServiceImpl implements NoticeService {

	@Resource
	private NoticeJpaRepository noticeJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private NoticeServiceMapper noticeServiceMapper;
	
	@Autowired
	private EntityManager em;
	
	@Override
	public Notice findById(Integer id) {
		NoticeEntity noticeEntity = noticeJpaRepository.findOne(id);
		return noticeServiceMapper.mapNoticeEntityToNotice(noticeEntity);
	}

	@Override
	public Page<NoticeEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return noticeJpaRepository.findAll(request);
	}

	@Override
	public List<Notice> findAll() {
		Iterable<NoticeEntity> entities = noticeJpaRepository.findAll();
		List<Notice> beans = new ArrayList<Notice>();
		for(NoticeEntity noticeEntity : entities) {
			beans.add(noticeServiceMapper.mapNoticeEntityToNotice(noticeEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = noticeJpaRepository.count();
		return count;
	}

	@Override
	public Notice save(Notice notice) {
		return update(notice) ;
	}

	@Override
	public Notice create(Notice notice) {
/*
		NoticeEntity noticeEntity = noticeJpaRepository.findOne(notice.getId());
		if( noticeEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		noticeEntity = new NoticeEntity();
		noticeServiceMapper.mapNoticeToNoticeEntity(notice, noticeEntity);
		NoticeEntity noticeEntitySaved = noticeJpaRepository.save(noticeEntity);
		return noticeServiceMapper.mapNoticeEntityToNotice(noticeEntitySaved);
*/
		NoticeEntity noticeEntity = new NoticeEntity();
		noticeServiceMapper.mapNoticeToNoticeEntity(notice, noticeEntity);
		NoticeEntity noticeEntitySaved = noticeJpaRepository.save(noticeEntity);
		return noticeServiceMapper.mapNoticeEntityToNotice(noticeEntitySaved);
	}

	@Override
	public Notice update(Notice notice) {
		NoticeEntity noticeEntity = noticeJpaRepository.findOne(notice.getId());
		noticeServiceMapper.mapNoticeToNoticeEntity(notice, noticeEntity);
		NoticeEntity noticeEntitySaved = noticeJpaRepository.save(noticeEntity);
		return noticeServiceMapper.mapNoticeEntityToNotice(noticeEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		noticeJpaRepository.delete(id);
	}

	public NoticeJpaRepository getNoticeJpaRepository() {
		return noticeJpaRepository;
	}

	public void setNoticeJpaRepository(NoticeJpaRepository noticeJpaRepository) {
		this.noticeJpaRepository = noticeJpaRepository;
	}

	public NoticeServiceMapper getNoticeServiceMapper() {
		return noticeServiceMapper;
	}

	public void setNoticeServiceMapper(NoticeServiceMapper noticeServiceMapper) {
		this.noticeServiceMapper = noticeServiceMapper;
	}

	@Override
	public Page<NoticeEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return noticeJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	

	@Override
	public Page<NoticeEntity> findByTitle(String title, Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return noticeJpaRepository.findByTitle(title, pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public List<Notice> getNoticesByBusinessId(Integer businessId) {
		return null;
	}

	@Override
	public Page<NoticeEntity> listPagingByCounselorIdInWebC(Integer page, Integer size, String orderBy) {
		try {
			PageRequest pageable;
			if(orderBy.equals("create_date")) {
				pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			} else {
				pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "viewNumber")));
			}
			
			
			return noticeJpaRepository.listPagingByCounselorIdInWebC(pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public PageCustom<NoticeEntity> listPagingByUser(String startSearch, String endSearch, String orderBy, Integer type, String keyword, Integer page, Integer size) {
		try {
			String str_select 	= "";
			String str_from 	= "";
			String str_where 	= "";
			String select_count = " select count(*) ";
			String str_limit 	= " ORDER BY n.create_date DESC LIMIT " + (page-1)*size +"," + size ;
			
			str_select = " SELECT n.id, "
								+ "n.title, "
								+ "n.content, "
								+ "n.business_type, "
								+ "n.os_type, "
								+ "n.view_number, "
								+ "n.is_show, n.type, "
								+ "n.create_date, "
								+ "n.update_date, "
								+ "u.fullname,"
								+ "n.show_android, "
								+ "n.show_ios, "
								+ "n.show_web  ";
			str_from   = " FROM notice n INNER JOIN user u ON n.admin_id = u.id ";
			str_where  = " WHERE n.type = "+type+" ";
			if (startSearch != null) {
				str_where = str_where + " and n.create_date >=  '" + startSearch+"' ";
			}
			if (endSearch != null) {
				str_where = str_where + " and n.create_date <= '" + endSearch+"' ";
			}
			
			String key = "%" + keyword + "%";
			
			if (orderBy.equals("title")) {
				str_where = str_where + " and n.title LIKE '"+key+"' ";
			} else if (orderBy.equals("content")) {
				str_where = str_where + " and n.content LIKE '"+key+"' ";
			} else {
				str_where = str_where + " and u.fullname LIKE '"+key+"' ";
			}
			
			System.out.println("select:" + str_select + str_from + str_where + str_limit);
			Query q = em.createNativeQuery(str_select + str_from + str_where + str_limit);
			@SuppressWarnings("unchecked")
			List<Object[]> rss = q.getResultList();
			List<NoticeEntity> notices = new ArrayList<>();
			for (Object[] i : rss) {
				NoticeEntity entity = new NoticeEntity();
				entity.setId((Integer) i[0]);
				entity.setTitle((String) i[1]);
				entity.setContent((String) i[2]);
				entity.setBusinessType((Short) i[3]);
				entity.setOsType((String) i[4]);
				entity.setViewNumber((Integer) i[5]);
				entity.setIsShow((Short) i[6]);
				entity.setType((Short) i[7]);
				entity.setCreateDate((Date) i[8]);
				entity.setUpdateDate((Date) i[9]);
				entity.setAdminName((String) i[10]);
				entity.setShowAndroid((Boolean) i[11]);
				entity.setShowIos((Boolean) i[12]);
				entity.setShowWeb((Boolean) i[13]);
				notices.add(entity);
			}
			Query c = em.createNativeQuery(select_count + str_from + str_where);
			Long totalCount = ((Number) c.getSingleResult()).longValue();
			PageCustom<NoticeEntity> pageCustom = new PageCustom<>(notices, totalCount, page, size);
			return pageCustom;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public NoticeEntity findByIdEntity(Integer id) {
		return noticeJpaRepository.findByIdEntity(id);
	}

	@Override
	public Integer getEndElementInListId() {
		Integer id = noticeJpaRepository.getEndElementInListId();
		if (id == null) {
			id = 0;
		}
		return id;
	}

}
