/*
 * Created on 22 thg 2 2017 ( Time 10:38:10 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import org.trams.hello.bean.Questionnaire;
import org.trams.hello.bean.jpa.QuestionnaireEntity;
import org.trams.hello.business.service.QuestionnaireService;
import org.trams.hello.business.service.mapping.QuestionnaireServiceMapper;
import org.trams.hello.data.repository.jpa.QuestionnaireJpaRepository;
/**
 * Implementation of QuestionnaireService
 */
@Component
@Transactional
public class QuestionnaireServiceImpl implements QuestionnaireService {

	@Resource
	private QuestionnaireJpaRepository questionnaireJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private QuestionnaireServiceMapper questionnaireServiceMapper;
	
	@Override
	public Questionnaire findById(Integer id) {
		QuestionnaireEntity questionnaireEntity = questionnaireJpaRepository.findOne(id);
		return questionnaireServiceMapper.mapQuestionnaireEntityToQuestionnaire(questionnaireEntity);
	}

	@Override
	public Page<QuestionnaireEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return questionnaireJpaRepository.findAll(request);
	}

	@Override
	public List<Questionnaire> findAll() {
		Iterable<QuestionnaireEntity> entities = questionnaireJpaRepository.findAll();
		List<Questionnaire> beans = new ArrayList<Questionnaire>();
		for(QuestionnaireEntity questionnaireEntity : entities) {
			beans.add(questionnaireServiceMapper.mapQuestionnaireEntityToQuestionnaire(questionnaireEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = questionnaireJpaRepository.count();
		return count;
	}

	@Override
	public Questionnaire save(Questionnaire questionnaire) {
		return update(questionnaire) ;
	}

	@Override
	public Questionnaire create(Questionnaire questionnaire) {
/*
		QuestionnaireEntity questionnaireEntity = questionnaireJpaRepository.findOne(questionnaire.getId());
		if( questionnaireEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		questionnaireEntity = new QuestionnaireEntity();
		questionnaireServiceMapper.mapQuestionnaireToQuestionnaireEntity(questionnaire, questionnaireEntity);
		QuestionnaireEntity questionnaireEntitySaved = questionnaireJpaRepository.save(questionnaireEntity);
		return questionnaireServiceMapper.mapQuestionnaireEntityToQuestionnaire(questionnaireEntitySaved);
*/
		QuestionnaireEntity questionnaireEntity = new QuestionnaireEntity();
		questionnaireServiceMapper.mapQuestionnaireToQuestionnaireEntity(questionnaire, questionnaireEntity);
		QuestionnaireEntity questionnaireEntitySaved = questionnaireJpaRepository.save(questionnaireEntity);
		return questionnaireServiceMapper.mapQuestionnaireEntityToQuestionnaire(questionnaireEntitySaved);
	}

	@Override
	public Questionnaire update(Questionnaire questionnaire) {
		QuestionnaireEntity questionnaireEntity = questionnaireJpaRepository.findOne(questionnaire.getId());
		questionnaireServiceMapper.mapQuestionnaireToQuestionnaireEntity(questionnaire, questionnaireEntity);
		QuestionnaireEntity questionnaireEntitySaved = questionnaireJpaRepository.save(questionnaireEntity);
		return questionnaireServiceMapper.mapQuestionnaireEntityToQuestionnaire(questionnaireEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		questionnaireJpaRepository.delete(id);
	}

	public QuestionnaireJpaRepository getQuestionnaireJpaRepository() {
		return questionnaireJpaRepository;
	}

	public void setQuestionnaireJpaRepository(QuestionnaireJpaRepository questionnaireJpaRepository) {
		this.questionnaireJpaRepository = questionnaireJpaRepository;
	}

	public QuestionnaireServiceMapper getQuestionnaireServiceMapper() {
		return questionnaireServiceMapper;
	}

	public void setQuestionnaireServiceMapper(QuestionnaireServiceMapper questionnaireServiceMapper) {
		this.questionnaireServiceMapper = questionnaireServiceMapper;
	}

	@Override
	public Page<QuestionnaireEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return questionnaireJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	

	@Override
	public Page<QuestionnaireEntity> findByTitle(String title, Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return questionnaireJpaRepository.findByTitle(title, pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	
	@Override
	public Page<QuestionnaireEntity> listPagingByType(Short type, Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "isShow"),new Order(Direction.DESC, "createDate")));
			return questionnaireJpaRepository.listPagingByType(type, pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public void updateIsShowByType(Short type) {
		try {
			questionnaireJpaRepository.updateIsShowByType(type);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@Override
	public String getNameVersionBy_Type(Short type) {
		try {
			return questionnaireJpaRepository.getNameVersionBy_Type(type);
		} catch (Exception e) {
			e.printStackTrace();
			return "";
		}
	}

	@Override
	public List<QuestionnaireEntity> listByType(Short type) {
		try {
			PageRequest pageable = new PageRequest(0, Integer.MAX_VALUE, new Sort(new Order(Direction.DESC, "version")));
			return questionnaireJpaRepository.listByType(type, pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	
}
