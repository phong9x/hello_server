/*
 * Created on 23 Mar 2017 ( Time 09:14:12 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.business.service.mapping;

import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import org.trams.hello.bean.TestResult;
import org.trams.hello.bean.jpa.AnswerEntity;
import org.trams.hello.bean.jpa.QuestionEntity;
import org.trams.hello.bean.jpa.SelfDiagnosisAnswerEntity;
import org.trams.hello.bean.jpa.TestResultEntity;
import org.trams.hello.bean.jpa.UserQuestionaireEntity;

/**
 * Mapping between entity beans and display beans.
 */
@Component
public class TestResultServiceMapper extends AbstractServiceMapper {

	/**
	 * ModelMapper : bean to bean mapping library.
	 */
	private ModelMapper modelMapper;
	
	/**
	 * Constructor.
	 */
	public TestResultServiceMapper() {
		modelMapper = new ModelMapper();
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}

	/**
	 * Mapping from 'TestResultEntity' to 'TestResult'
	 * @param testResultEntity
	 */
	public TestResult mapTestResultEntityToTestResult(TestResultEntity testResultEntity) {
		if(testResultEntity == null) {
			return null;
		}

		//--- Generic mapping 
		TestResult testResult = map(testResultEntity, TestResult.class);

		//--- Link mapping ( link to SelfDiagnosisAnswer )
		if(testResultEntity.getSelfDiagnosisAnswer() != null) {
			testResult.setSelfDiagnosisAnswerId(testResultEntity.getSelfDiagnosisAnswer().getId());
		}
		//--- Link mapping ( link to Answer )
		if(testResultEntity.getAnswer() != null) {
			testResult.setAnswerId(testResultEntity.getAnswer().getId());
		}
		//--- Link mapping ( link to Question )
		if(testResultEntity.getQuestion() != null) {
			testResult.setQuestionId(testResultEntity.getQuestion().getId());
		}
		//--- Link mapping ( link to UserQuestionaire )
		if(testResultEntity.getUserQuestionaire() != null) {
			testResult.setUserQuestionaireId(testResultEntity.getUserQuestionaire().getId());
		}
		return testResult;
	}
	
	/**
	 * Mapping from 'TestResult' to 'TestResultEntity'
	 * @param testResult
	 * @param testResultEntity
	 */
	public void mapTestResultToTestResultEntity(TestResult testResult, TestResultEntity testResultEntity) {
		if(testResult == null) {
			return;
		}

		//--- Generic mapping 
		map(testResult, testResultEntity);

		//--- Link mapping ( link : testResult )
		if( hasLinkToSelfDiagnosisAnswer(testResult) ) {
			SelfDiagnosisAnswerEntity selfDiagnosisAnswer1 = new SelfDiagnosisAnswerEntity();
			selfDiagnosisAnswer1.setId( testResult.getSelfDiagnosisAnswerId() );
			testResultEntity.setSelfDiagnosisAnswer( selfDiagnosisAnswer1 );
		} else {
			testResultEntity.setSelfDiagnosisAnswer( null );
		}

		//--- Link mapping ( link : testResult )
		if( hasLinkToAnswer(testResult) ) {
			AnswerEntity answer2 = new AnswerEntity();
			answer2.setId( testResult.getAnswerId() );
			testResultEntity.setAnswer( answer2 );
		} else {
			testResultEntity.setAnswer( null );
		}

		//--- Link mapping ( link : testResult )
		if( hasLinkToQuestion(testResult) ) {
			QuestionEntity question3 = new QuestionEntity();
			question3.setId( testResult.getQuestionId() );
			testResultEntity.setQuestion( question3 );
		} else {
			testResultEntity.setQuestion( null );
		}

		//--- Link mapping ( link : testResult )
		if( hasLinkToUserQuestionaire(testResult) ) {
			UserQuestionaireEntity userQuestionaire4 = new UserQuestionaireEntity();
			userQuestionaire4.setId( testResult.getUserQuestionaireId() );
			testResultEntity.setUserQuestionaire( userQuestionaire4 );
		} else {
			testResultEntity.setUserQuestionaire( null );
		}

	}
	
	/**
	 * Verify that SelfDiagnosisAnswer id is valid.
	 * @param SelfDiagnosisAnswer SelfDiagnosisAnswer
	 * @return boolean
	 */
	private boolean hasLinkToSelfDiagnosisAnswer(TestResult testResult) {
		if(testResult.getSelfDiagnosisAnswerId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that Answer id is valid.
	 * @param Answer Answer
	 * @return boolean
	 */
	private boolean hasLinkToAnswer(TestResult testResult) {
		if(testResult.getAnswerId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that Question id is valid.
	 * @param Question Question
	 * @return boolean
	 */
	private boolean hasLinkToQuestion(TestResult testResult) {
		if(testResult.getQuestionId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that UserQuestionaire id is valid.
	 * @param UserQuestionaire UserQuestionaire
	 * @return boolean
	 */
	private boolean hasLinkToUserQuestionaire(TestResult testResult) {
		if(testResult.getUserQuestionaireId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected ModelMapper getModelMapper() {
		return modelMapper;
	}

	protected void setModelMapper(ModelMapper modelMapper) {
		this.modelMapper = modelMapper;
	}

}