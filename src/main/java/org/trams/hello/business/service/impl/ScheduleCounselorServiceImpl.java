/*
 * Created on 23 thg 11 2016 ( Time 13:38:13 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import org.trams.hello.bean.ScheduleCounselor;
import org.trams.hello.bean.jpa.ScheduleCounselorEntity;
import org.trams.hello.business.service.ScheduleCounselorService;
import org.trams.hello.business.service.mapping.ScheduleCounselorServiceMapper;
import org.trams.hello.data.repository.jpa.ScheduleCounselorJpaRepository;
/**
 * Implementation of ScheduleCounselorService
 */
@Component
@Transactional
public class ScheduleCounselorServiceImpl implements ScheduleCounselorService {

	@Resource
	private ScheduleCounselorJpaRepository scheduleCounselorJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private ScheduleCounselorServiceMapper scheduleCounselorServiceMapper;
	
	@Override
	public ScheduleCounselor findById(Integer id) {
		ScheduleCounselorEntity scheduleCounselorEntity = scheduleCounselorJpaRepository.findOne(id);
		return scheduleCounselorServiceMapper.mapScheduleCounselorEntityToScheduleCounselor(scheduleCounselorEntity);
	}

	@Override
	public Page<ScheduleCounselorEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return scheduleCounselorJpaRepository.findAll(request);
	}

	@Override
	public List<ScheduleCounselor> findAll() {
		Iterable<ScheduleCounselorEntity> entities = scheduleCounselorJpaRepository.findAll();
		List<ScheduleCounselor> beans = new ArrayList<ScheduleCounselor>();
		for(ScheduleCounselorEntity scheduleCounselorEntity : entities) {
			beans.add(scheduleCounselorServiceMapper.mapScheduleCounselorEntityToScheduleCounselor(scheduleCounselorEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = scheduleCounselorJpaRepository.count();
		return count;
	}

	@Override
	public ScheduleCounselor save(ScheduleCounselor scheduleCounselor) {
		return update(scheduleCounselor) ;
	}

	@Override
	public ScheduleCounselor create(ScheduleCounselor scheduleCounselor) {
/*
		ScheduleCounselorEntity scheduleCounselorEntity = scheduleCounselorJpaRepository.findOne(scheduleCounselor.getId());
		if( scheduleCounselorEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		scheduleCounselorEntity = new ScheduleCounselorEntity();
		scheduleCounselorServiceMapper.mapScheduleCounselorToScheduleCounselorEntity(scheduleCounselor, scheduleCounselorEntity);
		ScheduleCounselorEntity scheduleCounselorEntitySaved = scheduleCounselorJpaRepository.save(scheduleCounselorEntity);
		return scheduleCounselorServiceMapper.mapScheduleCounselorEntityToScheduleCounselor(scheduleCounselorEntitySaved);
*/
		ScheduleCounselorEntity scheduleCounselorEntity = new ScheduleCounselorEntity();
		scheduleCounselorServiceMapper.mapScheduleCounselorToScheduleCounselorEntity(scheduleCounselor, scheduleCounselorEntity);
		ScheduleCounselorEntity scheduleCounselorEntitySaved = scheduleCounselorJpaRepository.save(scheduleCounselorEntity);
		return scheduleCounselorServiceMapper.mapScheduleCounselorEntityToScheduleCounselor(scheduleCounselorEntitySaved);
	}

	@Override
	public ScheduleCounselor update(ScheduleCounselor scheduleCounselor) {
		ScheduleCounselorEntity scheduleCounselorEntity = scheduleCounselorJpaRepository.findOne(scheduleCounselor.getId());
		scheduleCounselorServiceMapper.mapScheduleCounselorToScheduleCounselorEntity(scheduleCounselor, scheduleCounselorEntity);
		ScheduleCounselorEntity scheduleCounselorEntitySaved = scheduleCounselorJpaRepository.save(scheduleCounselorEntity);
		return scheduleCounselorServiceMapper.mapScheduleCounselorEntityToScheduleCounselor(scheduleCounselorEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		scheduleCounselorJpaRepository.delete(id);
	}

	public ScheduleCounselorJpaRepository getScheduleCounselorJpaRepository() {
		return scheduleCounselorJpaRepository;
	}

	public void setScheduleCounselorJpaRepository(ScheduleCounselorJpaRepository scheduleCounselorJpaRepository) {
		this.scheduleCounselorJpaRepository = scheduleCounselorJpaRepository;
	}

	public ScheduleCounselorServiceMapper getScheduleCounselorServiceMapper() {
		return scheduleCounselorServiceMapper;
	}

	public void setScheduleCounselorServiceMapper(ScheduleCounselorServiceMapper scheduleCounselorServiceMapper) {
		this.scheduleCounselorServiceMapper = scheduleCounselorServiceMapper;
	}

	@Override
	public Page<ScheduleCounselorEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return scheduleCounselorJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}
	
	


}
