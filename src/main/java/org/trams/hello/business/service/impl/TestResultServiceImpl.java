/*
 * Created on 22 thg 2 2017 ( Time 10:38:11 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.business.service.impl;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.persistence.EntityManager;
import javax.persistence.Query;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import org.trams.hello.bean.AnswerTestStatistics;
import org.trams.hello.bean.MindCheckStatistics;
import org.trams.hello.bean.PageCustom;
import org.trams.hello.bean.PsychologicalStatistics;
import org.trams.hello.bean.TestResult;
import org.trams.hello.bean.jpa.TestResultEntity;
import org.trams.hello.business.service.TestResultService;
import org.trams.hello.business.service.mapping.TestResultServiceMapper;
import org.trams.hello.data.repository.jpa.TestResultJpaRepository;
import org.trams.hello.web.bean.search.SearchStatistics;
/**
 * Implementation of TestResultService
 */
@Component
@Transactional
public class TestResultServiceImpl implements TestResultService {

	@Resource
	private EntityManager em;
	
	@Resource
	private TestResultJpaRepository testResultJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private TestResultServiceMapper testResultServiceMapper;
	
	@Override
	public TestResult findById(Integer id) {
		TestResultEntity testResultEntity = testResultJpaRepository.findOne(id);
		return testResultServiceMapper.mapTestResultEntityToTestResult(testResultEntity);
	}

	@Override
	public Page<TestResultEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return testResultJpaRepository.findAll(request);
	}

	@Override
	public List<TestResult> findAll() {
		Iterable<TestResultEntity> entities = testResultJpaRepository.findAll();
		List<TestResult> beans = new ArrayList<TestResult>();
		for(TestResultEntity testResultEntity : entities) {
			beans.add(testResultServiceMapper.mapTestResultEntityToTestResult(testResultEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = testResultJpaRepository.count();
		return count;
	}

	@Override
	public TestResult save(TestResult testResult) {
		return update(testResult) ;
	}

	@Override
	public TestResult create(TestResult testResult) {
/*
		TestResultEntity testResultEntity = testResultJpaRepository.findOne(testResult.getId());
		if( testResultEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		testResultEntity = new TestResultEntity();
		testResultServiceMapper.mapTestResultToTestResultEntity(testResult, testResultEntity);
		TestResultEntity testResultEntitySaved = testResultJpaRepository.save(testResultEntity);
		return testResultServiceMapper.mapTestResultEntityToTestResult(testResultEntitySaved);
*/
		TestResultEntity testResultEntity = new TestResultEntity();
		testResultServiceMapper.mapTestResultToTestResultEntity(testResult, testResultEntity);
		TestResultEntity testResultEntitySaved = testResultJpaRepository.save(testResultEntity);
		return testResultServiceMapper.mapTestResultEntityToTestResult(testResultEntitySaved);
	}

	@Override
	public TestResult update(TestResult testResult) {
		TestResultEntity testResultEntity = testResultJpaRepository.findOne(testResult.getId());
		testResultServiceMapper.mapTestResultToTestResultEntity(testResult, testResultEntity);
		TestResultEntity testResultEntitySaved = testResultJpaRepository.save(testResultEntity);
		return testResultServiceMapper.mapTestResultEntityToTestResult(testResultEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		testResultJpaRepository.delete(id);
	}

	public TestResultJpaRepository getTestResultJpaRepository() {
		return testResultJpaRepository;
	}

	public void setTestResultJpaRepository(TestResultJpaRepository testResultJpaRepository) {
		this.testResultJpaRepository = testResultJpaRepository;
	}

	public TestResultServiceMapper getTestResultServiceMapper() {
		return testResultServiceMapper;
	}

	public void setTestResultServiceMapper(TestResultServiceMapper testResultServiceMapper) {
		this.testResultServiceMapper = testResultServiceMapper;
	}

	@Override
	public Page<TestResultEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return testResultJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public Page<TestResultEntity> filter(Map<String, Object> params) {
		int page = Integer.parseInt(params.get("page").toString());
		int size = Integer.parseInt(params.get("size").toString());

		PageRequest pageable = new PageRequest(page - 1, size, new Sort(new Order(Direction.fromString(String.valueOf(params.getOrDefault("direction", "DESC"))), "createDate")));

		Specification<TestResultEntity> specification = new Specification<TestResultEntity>() {
			@Override
			public Predicate toPredicate(Root<TestResultEntity> root, CriteriaQuery<?> criteriaQuery, CriteriaBuilder criteriaBuilder) {

				List<Predicate> predicates = new ArrayList<>();

				if (params.get("id") != null) {
					Integer id = Integer.parseInt(params.get("id").toString());
					predicates.add(
							criteriaBuilder.equal(root.get("id"), id)
					);
				}
				if (params.get("questionId") != null) {
					Integer questionId = Integer.parseInt(params.get("questionId").toString());
					predicates.add(
							criteriaBuilder.equal(root.join("userQuestionaire").get("id"), questionId)
					);
				}

				if (predicates.isEmpty()) {
					return criteriaBuilder.isNotNull(root.get("id"));
				} else {
					return criteriaBuilder.and(predicates.toArray(new Predicate[] {}));
				}
			}
		};

		return testResultJpaRepository.findAll(specification, pageable);
	}

	@Override
	public List<TestResultEntity> listResultBy_UserQuestionId(Integer userQuestionaireId) {
		try {
			return testResultJpaRepository.listResultBy_UserQuestionId(userQuestionaireId);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public void deleteBy_UserQuestionId(Integer userQuestionaireId) {
		try {
			testResultJpaRepository.deleteBy_UserQuestionId(userQuestionaireId);
		} catch (Exception e) {
			e.printStackTrace();
		}
		
	}

	@Override
	public List<TestResultEntity> findBy_UserAndType(Integer userId, Integer type, String orderBy) {
		try {
			PageRequest pageable = new PageRequest(0, 1, new Sort(new Order(Direction.DESC, "createDate")));
			return testResultJpaRepository.findBy_UserAndType(userId, type, pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public List<TestResultEntity> findBy_UserQuestionaireId(Integer user) {
		try {
			PageRequest pageable = new PageRequest(0, Integer.MAX_VALUE, new Sort(new Order(Direction.ASC, "question.orderNumber")));
			return testResultJpaRepository.findBy_UserQuestionaireId(user, pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public TestResultEntity getTestResultByUserQuestionaireIdAndQuestionId(Integer userQuestionaireId,
			Integer questionId) {
		try {
			return testResultJpaRepository.getTestResultByUserQuestionaireIdAndQuestionId(userQuestionaireId, questionId);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
		
	}

	@Override
	public PageCustom<MindCheckStatistics> filterMindCheckStatistics(SearchStatistics s) {
		try {
			String WHERE_SUB = "";
			if(s.getStartDate() != null){
				WHERE_SUB +=" AND DATE(t.create_date) >= '"+s.getStartDate()+"'";
			}
			if(s.getEndDate() != null){
				WHERE_SUB +=" AND DATE(t.create_date) <= '"+s.getEndDate()+"'";
			}
			String SELECT = "SELECT q.id, q.content as question , a.content as answer ,"
						  + "(SELECT COUNT(t.id) FROM test_result t WHERE t.answer_id = a.id "+WHERE_SUB+" ) as count, a.id as answerId  ";
			String FROM   = "FROM question q "
						  + "INNER JOIN answer a ON q.id = a.question_id "
						  + "LEFT JOIN questionnaire qa ON qa.id = q.questionaire_id ";
			String WHERE  	="WHERE qa.type = 2 ";
			String GROUP_BY = "GROUP BY answerId ORDER BY q.id ASC";
			
			if(s.getVersion() != null){
				WHERE +=" AND qa.version ='"+s.getVersion()+"'";
			}
			
			List<MindCheckStatistics> listPage = new ArrayList<>();
			
			System.out.println(SELECT + FROM + WHERE + GROUP_BY);
			@SuppressWarnings("unused")
			Query q = em.createNativeQuery(SELECT + FROM + WHERE + GROUP_BY);
			List<Object[]> listObject = q.getResultList();
			Integer id = 0;
			MindCheckStatistics t = new MindCheckStatistics();
			AnswerTestStatistics a = new AnswerTestStatistics();
			List<AnswerTestStatistics> listAnswer = new ArrayList<>();
			Integer totalAnswer = 0;
			for (int i = 0; i < listObject.size(); i++) {
				Object[] ob = listObject.get(i);
				if(id != (Integer)ob[0]){
					if(t.getId() != null){
						t.setList(listAnswer);
						listPage.add(t);
					}
					id = (Integer)ob[0];
					t = new MindCheckStatistics();
					t.setTotalAnswer(0);
					t.setId((Integer) ob[0]);
					t.setQuestion((String)ob[1]);
					listAnswer = new ArrayList<>();
					a = new AnswerTestStatistics();
					a.setAnswer((String) ob[2]);
					a.setAnswerNumber(Integer.valueOf(String.valueOf(ob[3])) );
					t.setTotalAnswer(t.getTotalAnswer()+a.getAnswerNumber());
					listAnswer.add(a);
				}else{
					a = new AnswerTestStatistics();
					a.setAnswer((String) ob[2]);
					a.setAnswerNumber(Integer.valueOf(String.valueOf(ob[3])) );
					t.setTotalAnswer(t.getTotalAnswer()+a.getAnswerNumber());
					listAnswer.add(a);
				}
				
				if(i == (listObject.size()-1)){
					t.setList(listAnswer);
					listPage.add(t);
				}
				
			}
			return new PageCustom<MindCheckStatistics>(listPage, Long.valueOf(listPage.size()), 1, Integer.MAX_VALUE);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public PageCustom<PsychologicalStatistics> filterPsychologicalStatistics(SearchStatistics s) {
		try {
			String WHERE_SUB ="";
			if(s.getStartDate() != null){
				WHERE_SUB +=" AND DATE_FORMAT(r.create_date,'%Y/%m/%d') >= '"+s.getStartDate()+"'";
			}
			if(s.getEndDate() != null){
				WHERE_SUB +=" AND DATE_FORMAT(r.create_date,'%Y/%m/%d') <= '"+s.getEndDate()+"'";
			}
			
			String SELECT = "SELECT p.test_name, p.company_name, "
					+ "(SELECT COUNT(*) "
					+ "FROM user_psychological u "
					+ "INNER JOIN request_user_psychological r ON u.request_psychological_id = r.id "
					+ "WHERE r.status = 1 AND u.psychological_test_id = p.id "+WHERE_SUB+") as payment,"
					
					+ "(SELECT COUNT(*) "
					+ "FROM user_psychological u "
					+ "INNER JOIN request_user_psychological r ON u.request_psychological_id = r.id "
					+ "WHERE u.psychological_test_id = p.id "+WHERE_SUB+") as request ";
			
			String FROM   = "FROM psychological_test_setting p  ";
						
			String ORDER_BY = "ORDER BY p.test_name ASC";
			
			
			
			List<PsychologicalStatistics> listPage = new ArrayList<>();
			Integer totalPayment = 0;
			Integer totalRequest = 0;
			
			System.out.println(SELECT + FROM  + ORDER_BY);
			@SuppressWarnings("unused")
			Query q = em.createNativeQuery(SELECT + FROM + ORDER_BY);
			List<Object[]> listObject = q.getResultList();
			for (Object[] ob : listObject) {
				PsychologicalStatistics p = new PsychologicalStatistics();
				p.setTestName((String) ob[0]);
				p.setCompany((String) ob[1]);
				p.setRequest(Integer.valueOf(String.valueOf(ob[2])));
				p.setPayment(Integer.valueOf(String.valueOf(ob[3])));
				totalPayment += p.getPayment();
				totalRequest += p.getRequest();
				listPage.add(p);
			}
			List<Object> listOther = new ArrayList<>();
			listOther.add(totalPayment);
			listOther.add(totalRequest);
			return new PageCustom<PsychologicalStatistics>(listPage, Long.valueOf(listPage.size()), 1, Integer.MAX_VALUE, listOther);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

}
