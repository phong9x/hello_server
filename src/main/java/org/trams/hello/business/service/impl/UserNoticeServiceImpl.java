/*
 * Created on 3 Mar 2017 ( Time 10:03:51 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.business.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.annotation.Resource;
import javax.persistence.EntityManager;
import javax.persistence.Query;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import org.trams.hello.bean.Notice;
import org.trams.hello.bean.UserNotice;
import org.trams.hello.bean.api.Announcement;
import org.trams.hello.bean.api.UserNotices;
import org.trams.hello.bean.jpa.UserEntity;
import org.trams.hello.bean.jpa.UserNoticeEntity;
import org.trams.hello.business.service.NoticeService;
import org.trams.hello.business.service.UserNoticeService;
import org.trams.hello.business.service.mapping.UserNoticeServiceMapper;
import org.trams.hello.data.repository.jpa.UserNoticeJpaRepository;
/**
 * Implementation of UserNoticeService
 */
@Component
@Transactional
public class UserNoticeServiceImpl implements UserNoticeService {
	@Resource
	private UserNoticeJpaRepository userNoticeJpaRepository;
	private static final Integer PAGE_SIZE   = 15;
	@Autowired
	private EntityManager em;
	@Resource
	private UserNoticeServiceMapper userNoticeServiceMapper;
	@Resource
	private NoticeService noticeService;
	@Override
	public UserNotice findById(Integer id) {
		UserNoticeEntity userNoticeEntity = userNoticeJpaRepository.findOne(id);
		return userNoticeServiceMapper.mapUserNoticeEntityToUserNotice(userNoticeEntity);
	}

	@Override
	public Page<UserNoticeEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return userNoticeJpaRepository.findAll(request);
	}

	@Override
	public List<UserNotice> findAll() {
		Iterable<UserNoticeEntity> entities = userNoticeJpaRepository.findAll();
		List<UserNotice> beans = new ArrayList<UserNotice>();
		for(UserNoticeEntity userNoticeEntity : entities) {
			beans.add(userNoticeServiceMapper.mapUserNoticeEntityToUserNotice(userNoticeEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = userNoticeJpaRepository.count();
		return count;
	}

	@Override
	public UserNotice save(UserNotice userNotice) {
		return update(userNotice) ;
	}

	@Override
	public UserNotice create(UserNotice userNotice) {
/*
		UserNoticeEntity userNoticeEntity = userNoticeJpaRepository.findOne(userNotice.getId());
		if( userNoticeEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		userNoticeEntity = new UserNoticeEntity();
		userNoticeServiceMapper.mapUserNoticeToUserNoticeEntity(userNotice, userNoticeEntity);
		UserNoticeEntity userNoticeEntitySaved = userNoticeJpaRepository.save(userNoticeEntity);
		return userNoticeServiceMapper.mapUserNoticeEntityToUserNotice(userNoticeEntitySaved);
*/
		UserNoticeEntity userNoticeEntity = new UserNoticeEntity();
		userNoticeServiceMapper.mapUserNoticeToUserNoticeEntity(userNotice, userNoticeEntity);
		UserNoticeEntity userNoticeEntitySaved = userNoticeJpaRepository.save(userNoticeEntity);
		return userNoticeServiceMapper.mapUserNoticeEntityToUserNotice(userNoticeEntitySaved);
	}

	@Override
	public UserNotice update(UserNotice userNotice) {
		UserNoticeEntity userNoticeEntity = userNoticeJpaRepository.findOne(userNotice.getId());
		userNoticeServiceMapper.mapUserNoticeToUserNoticeEntity(userNotice, userNoticeEntity);
		UserNoticeEntity userNoticeEntitySaved = userNoticeJpaRepository.save(userNoticeEntity);
		return userNoticeServiceMapper.mapUserNoticeEntityToUserNotice(userNoticeEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		userNoticeJpaRepository.delete(id);
	}

	public UserNoticeJpaRepository getUserNoticeJpaRepository() {
		return userNoticeJpaRepository;
	}

	public void setUserNoticeJpaRepository(UserNoticeJpaRepository userNoticeJpaRepository) {
		this.userNoticeJpaRepository = userNoticeJpaRepository;
	}

	public UserNoticeServiceMapper getUserNoticeServiceMapper() {
		return userNoticeServiceMapper;
	}

	public void setUserNoticeServiceMapper(UserNoticeServiceMapper userNoticeServiceMapper) {
		this.userNoticeServiceMapper = userNoticeServiceMapper;
	}

	@Override
	public Page<UserNoticeEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return userNoticeJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	

	@Override
	public Page<UserNoticeEntity> listPagingByUserId(Integer page, Integer size, Integer userId) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return userNoticeJpaRepository.listPagingByUserId(userId, pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	@Override
	public Page<UserNoticeEntity> listPagingByCounselorId(Integer page, Integer size, Integer counselorId, String orderBy) {
		try {
			PageRequest pageable;
			if(orderBy.equals("create_date")) {
				pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "notice.createDate")));
			} else {
				pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "notice.viewNumber")));
			}
			
			
			return userNoticeJpaRepository.listPagingByCounselorId(counselorId, pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	@Override
	public List<Announcement> listAnnouncement(Integer userId) {
		try {
			List<Announcement> list = new ArrayList<>();
			String str_clause = "SELECT n.content, n.create_date, u.id, n.title, u.status "
					+ " FROM user_notice u "
					+ " JOIN notice n on u.notice_id = n.id WHERE u.user_id = "+userId+" and n.type = 2 ";
			
			
			Query q = em.createNativeQuery(str_clause);
			@SuppressWarnings("unchecked")
			List<Object[]> results = q.getResultList();
			Date currentDate = null;
			Date createDate = null;
			Integer status;
			for (Object[] i : results) {
				Announcement announcement = new Announcement();
				announcement.setIsShowIcon(0);
				announcement.setContent((String) i[0]);
				announcement.setTitle((String) i[3]);
				announcement.setId((Integer) i[2]);
				announcement.setCreateDate((Date) i[1]);
				currentDate = new Date();
				createDate = (Date) i[1];
				status = (Integer) i[4];
				if((currentDate.getTime() - createDate.getTime() <= 604800000) && (status == 0)) {
					announcement.setIsShowIcon(1);
				}
				list.add(announcement);
				
			}
			return list;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	@Override
	public Announcement getAnnouncementByUserNoticeId(Integer uNoticeId) {
		try {
			String str_clause = "SELECT n.content, n.create_date, u.id, n.title, u.status "
					+ " FROM user_notice u "
					+ " JOIN notice n on u.notice_id = n.id WHERE u.id = "+uNoticeId+" ";
			
			Query q = em.createNativeQuery(str_clause);
			Object[] i = (Object[]) q.getSingleResult();
			Announcement announcement = new Announcement();
			announcement.setIsShowIcon(0);
			announcement.setContent((String) i[0]);
			announcement.setTitle((String) i[3]);
			announcement.setId((Integer) i[2]);
			announcement.setCreateDate((Date) i[1]);
			Date currentDate = new Date();
			Date createDate = (Date) i[1];
			Integer status = (Integer) i[4];
			if((currentDate.getTime() - createDate.getTime() <= 604800000) && (status == 0)) {
				announcement.setIsShowIcon(1);
			}
				
			return announcement;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public List<UserNotices> notices(Integer userId) {
		try {
			List<UserNotices> list = new ArrayList<>();
			String str_clause = "SELECT n.title, un.create_date, n.content, un.id, un.user_id, un.status "
					+ " FROM user_notice un JOIN notice n ON un.notice_id = n.id "
					+ " WHERE un.user_id = "+userId+" and n.type = 2 ORDER BY un.create_date DESC ";
			
			Query q = em.createNativeQuery(str_clause);
			@SuppressWarnings("unchecked")
			List<Object[]> results = q.getResultList();
			Date currentDate = null;
			Date createDate = null;
			Integer status;
			for (Object[] i : results) {
				createDate = (Date) i[1];
				UserNotices userNotices = new UserNotices();
				userNotices.setTitle((String) i[0]);
				userNotices.setCreateDate(createDate);
				userNotices.setContent((String) i[2]);
				userNotices.setId((Integer) i[3]);
				userNotices.setIsShowIcon(0);
				userNotices.setUserId((Integer) i[4]);
				
				currentDate = new Date();
				status = (Integer) i[5];
				if((currentDate.getTime() - createDate.getTime() <= 604800000) && (status == 0)) {
					userNotices.setIsShowIcon(1);
				}
				list.add(userNotices);
			}
				
			return list;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
//	@Override
//	public List<UserNotices> noticesByStatus(Integer userId) {
//		try {
//			List<UserNotices> list = new ArrayList<>();
//			String str_clause = "SELECT n.title, un.create_date, n.content, un.id, un.user_id, un.status "
//					+ " FROM user_notice un JOIN notice n ON un.notice_id = n.id "
//					+ " WHERE un.user_id = "+userId+" and un.status = 0  ORDER BY un.create_date DESC limit 1 ";
//			
//			Query q = em.createNativeQuery(str_clause);
//			@SuppressWarnings("unchecked")
//			List<Object[]> results = q.getResultList();
//			Date currentDate = null;
//			Date createDate = null;
//			Integer status;
//			for (Object[] i : results) {
//				createDate = (Date) i[1];
//				UserNotices userNotices = new UserNotices();
//				userNotices.setTitle((String) i[0]);
//				userNotices.setCreateDate(createDate);
//				userNotices.setContent((String) i[2]);
//				userNotices.setId((Integer) i[3]);
//				userNotices.setIsShowIcon(0);
//				userNotices.setUserId((Integer) i[4]);
//				
//				currentDate = new Date();
//				status = (Integer) i[5];
//				if((currentDate.getTime() - createDate.getTime() <= 604800000) && (status == 0)) {
//					userNotices.setIsShowIcon(1);
//				}
//				list.add(userNotices);
//			}
//				
//			return list;
//		} catch (Exception e) {
//			e.printStackTrace();
//			return null;
//		}
//	}

	@Override
	public UserNotices getUserNoticeDetail(Integer userId, Integer uNoticeId, UserNoticeService userNoticeService) {
		try {
			String str_clause = " select n.title, n.create_date, n.content, n.id, "
					+ " (SELECT un.id FROM user_notice un WHERE un.user_id = "+uNoticeId+" and un.notice_id = n.id) as unId "
					+ " FROM notice n WHERE n.id = "+uNoticeId+" ";

			Query q = em.createNativeQuery(str_clause);
			Object[] i = (Object[]) q.getSingleResult();
			
			UserNotices userNotice = new UserNotices();
			userNotice.setTitle((String) i[0]);
			userNotice.setCreateDate((Date) i[1]);
			userNotice.setContent((String) i[2]);
			userNotice.setId((Integer) i[3]);
			userNotice.setIsShowIcon(0);
			userNotice.setUserId(userId);
			UserNotice u = userNoticeService.findByNoticeIdAndUserId(uNoticeId, userId);
			if (u == null) {
				UserNotice uNotice = new UserNotice();
				uNotice.setNoticeId(uNoticeId);
				uNotice.setUserId(userId);
				uNotice.setStatus(1);
				uNotice.setCreateDate(new Date());
				uNotice.setUpdateDate(new Date());
				uNotice = userNoticeService.create(uNotice);
			}
			
			Notice n = noticeService.findById(uNoticeId);
			n.setViewNumber(n.getViewNumber() + 1);
			n.setUpdateDate(new Date());
			n = noticeService.update(n);

			return userNotice;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	@Override
	public UserNotices getUserNoticeDetailNotUser(Integer uNoticeId, UserNoticeService userNoticeService) {
		try {
			String str_clause = " select n.title, n.create_date, n.content, n.id FROM notice n WHERE n.id = "+uNoticeId+" ";

			Query q = em.createNativeQuery(str_clause);
			Object[] i = (Object[]) q.getSingleResult();
			
			UserNotices userNotice = new UserNotices();
			userNotice.setTitle((String) i[0]);
			userNotice.setCreateDate((Date) i[1]);
			userNotice.setContent((String) i[2]);
			userNotice.setId((Integer) i[3]);
			userNotice.setIsShowIcon(0);
			
			Notice n = noticeService.findById(uNoticeId);
			n.setViewNumber(n.getViewNumber() + 1);
			n.setUpdateDate(new Date());
			n = noticeService.update(n);

			return userNotice;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public List<UserNotices> noticesInApp(UserEntity user, Short type, String osType) {
		try {
			List<UserNotices> list = new ArrayList<>();
			String str_clause = "";
			String str_Select = " SELECT n.title, n.create_date, n.content, n.id, "
									+ " (SELECT un.id "
										+ "FROM user_notice un "
										+ "WHERE un.user_id = "+user.getId()+" and un.notice_id = n.id) as unId "
								+ "FROM notice n "
								+ "WHERE n.is_show = 1 "
								+ "AND n.type = "+type+" ";
			/*normal user*/
			if (user.getUserRole().getId() == 1) {
				str_clause = " and n.business_type = 0 ";
			} else if (user.getUserRole().getId() == 5) {
			/*not normal user*/
				if (user.getBusinessSub().getBusiness().getBusinessType() == 1) {
					str_clause = " and n.business_type IN (0,1) ";
				} else {
					str_clause = " and n.business_type IN (0,2) ";
				}
			}
			
			//os type
			if("Android".equals(osType)){
				str_Select += "AND n.show_android = true ";
			}else if("iOS".equals(osType)){
				str_Select += "AND n.show_ios = true ";
			}
			
			String str_orderby = "ORDER BY n.create_date DESC ";
			Query q = em.createNativeQuery(str_Select + str_clause + str_orderby);
			@SuppressWarnings("unchecked")
			List<Object[]> results = q.getResultList();
			Date currentDate = null;
			Date createDate = null;
			for (Object[] i : results) {
				createDate = (Date) i[1];
				UserNotices userNotices = new UserNotices();
				userNotices.setTitle((String) i[0]);
				userNotices.setCreateDate(createDate);
				userNotices.setContent((String) i[2]);
				userNotices.setId((Integer) i[3]);
				userNotices.setUserId(user.getId());
				
				currentDate = new Date();
				Integer userNoticeId = (Integer) i[4];
				if((currentDate.getTime() - createDate.getTime() <= 604800000) && (userNoticeId == null)) {
					userNotices.setIsShowIcon(1);
				} else {
					userNotices.setIsShowIcon(0);
				}
				list.add(userNotices);
			}
			return list;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	@Override
	public List<UserNotices> noticesInAppNotUser(Short type, String osType) {
		try {
			List<UserNotices> list = new ArrayList<>();
			String str_Select = "  SELECT n.title, n.create_date, n.content, n.id "
								  + "FROM notice n "
								  + "WHERE n.is_show = 1 "
								  + "AND n.business_type = 0 "
								  + "AND n.type = "+type+" ";
			
			//os type
			if("Android".equals(osType)){
				str_Select += "AND n.show_android = true ";
			}else if("iOS".equals(osType)){
				str_Select += "AND n.show_ios = true ";
			}
			
			String str_orderby = "ORDER BY n.create_date DESC ";
			Query q = em.createNativeQuery(str_Select + str_orderby);
			@SuppressWarnings("unchecked")
			List<Object[]> results = q.getResultList();
			Date createDate = null;
			for (Object[] i : results) {
				createDate = (Date) i[1];
				UserNotices userNotices = new UserNotices();
				userNotices.setTitle((String) i[0]);
				userNotices.setCreateDate(createDate);
				userNotices.setContent((String) i[2]);
				userNotices.setId((Integer) i[3]);
				userNotices.setIsShowIcon(0);
				list.add(userNotices);
			}
			return list;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	@Override
	public List<UserNotices> noticesByStatus(UserEntity user, Short type) {
		try {
			List<UserNotices> list = new ArrayList<>();
			String str_clause = "";
			String str_Select = " select n.title, n.create_date, n.content, n.id, "
					+ " (SELECT un.id FROM user_notice un WHERE un.user_id = "+user.getId()+" and un.notice_id = n.id) as unId FROM notice n WHERE n.type = "+type+" ";
			/*normal user*/
			if (user.getUserRole().getId() == 1) {
				str_clause = " and n.business_type = 0 ";
			} else if (user.getUserRole().getId() == 5) {
			/*not normal user*/
				if (user.getBusinessSub().getBusiness().getBusinessType() == 1) {
					str_clause = " and n.business_type IN (0,1) ";
				} else {
					str_clause = " and n.business_type IN (0,2) ";
				}
			}
			
			String str_orderby = "ORDER BY n.create_date DESC ";
			Query q = em.createNativeQuery(str_Select + str_clause + str_orderby);
			@SuppressWarnings("unchecked")
			List<Object[]> results = q.getResultList();
			Date currentDate = null;
			Date createDate = null;
			for (Object[] i : results) {
				createDate = (Date) i[1];
				UserNotices userNotices = new UserNotices();
				userNotices.setTitle((String) i[0]);
				userNotices.setCreateDate(createDate);
				userNotices.setContent((String) i[2]);
				userNotices.setId((Integer) i[3]);
				userNotices.setUserId(user.getId());
				
				currentDate = new Date();
				Integer userNoticeId = (Integer) i[4];
				if((currentDate.getTime() - createDate.getTime() <= 604800000) && (userNoticeId == null)) {
					userNotices.setIsShowIcon(1);
					list.add(userNotices);
				}
			}
			return list;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public UserNotice findByNoticeIdAndUserId(Integer noticeId, Integer userId) {
		UserNoticeEntity rs = userNoticeJpaRepository.findByNoticeIdAndUserId(noticeId, userId);
		return userNoticeServiceMapper.mapUserNoticeEntityToUserNotice(rs);
	}
}
