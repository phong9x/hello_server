/*
 * Created on 23 thg 11 2016 ( Time 16:49:52 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.business.service.impl;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.annotation.Resource;
import javax.persistence.EntityManager;
import javax.persistence.Query;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import org.trams.hello.bean.BusinessVoucher;
import org.trams.hello.bean.PageCustom;
import org.trams.hello.bean.VoucherUser;
import org.trams.hello.bean.api.HelloVoucherSummary;
import org.trams.hello.bean.jpa.VoucherUserEntity;
import org.trams.hello.bean.web.company.StatisticsVoucher;
import org.trams.hello.bean.web.company.VoucherInfo;
import org.trams.hello.business.service.VoucherService;
import org.trams.hello.business.service.VoucherUserService;
import org.trams.hello.business.service.mapping.VoucherUserServiceMapper;
import org.trams.hello.data.repository.jpa.VoucherUserJpaRepository;
import org.trams.hello.web.bean.search.SearchBusinessVoucher;
import org.trams.hello.web.bean.search.SearchHeartVoucher;
import org.trams.hello.web.common.utils.DataUtils;
/**
 * Implementation of VoucherUserService
 */
@Component
@Transactional
public class VoucherUserServiceImpl implements VoucherUserService {

	@Resource
	private VoucherUserJpaRepository voucherUserJpaRepository;
	
	@Resource
	private VoucherService voucherService;

	private static final Integer PAGE_SIZE   = 15;

	@Autowired
	private EntityManager em;
	
	@Resource
	private VoucherUserServiceMapper voucherUserServiceMapper;
	
	@Override
	public VoucherUser findById(Integer id) {
		VoucherUserEntity voucherUserEntity = voucherUserJpaRepository.findOne(id);
		return voucherUserServiceMapper.mapVoucherUserEntityToVoucherUser(voucherUserEntity);
	}

	@Override
	public Page<VoucherUserEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return voucherUserJpaRepository.findAll(request);
	}

	@Override
	public List<VoucherUser> findAll() {
		Iterable<VoucherUserEntity> entities = voucherUserJpaRepository.findAll();
		List<VoucherUser> beans = new ArrayList<VoucherUser>();
		for(VoucherUserEntity voucherUserEntity : entities) {
			beans.add(voucherUserServiceMapper.mapVoucherUserEntityToVoucherUser(voucherUserEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = voucherUserJpaRepository.count();
		return count;
	}

	@Override
	public VoucherUser save(VoucherUser voucherUser) {
		return update(voucherUser) ;
	}

	@Override
	public VoucherUser create(VoucherUser voucherUser) {
/*
		VoucherUserEntity voucherUserEntity = voucherUserJpaRepository.findOne(voucherUser.getId());
		if( voucherUserEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		voucherUserEntity = new VoucherUserEntity();
		voucherUserServiceMapper.mapVoucherUserToVoucherUserEntity(voucherUser, voucherUserEntity);
		VoucherUserEntity voucherUserEntitySaved = voucherUserJpaRepository.save(voucherUserEntity);
		return voucherUserServiceMapper.mapVoucherUserEntityToVoucherUser(voucherUserEntitySaved);
*/
		VoucherUserEntity voucherUserEntity = new VoucherUserEntity();
		voucherUserServiceMapper.mapVoucherUserToVoucherUserEntity(voucherUser, voucherUserEntity);
		VoucherUserEntity voucherUserEntitySaved = voucherUserJpaRepository.save(voucherUserEntity);
		return voucherUserServiceMapper.mapVoucherUserEntityToVoucherUser(voucherUserEntitySaved);
	}

	@Override
	public VoucherUser update(VoucherUser voucherUser) {
		VoucherUserEntity voucherUserEntity = voucherUserJpaRepository.findOne(voucherUser.getId());
		voucherUserServiceMapper.mapVoucherUserToVoucherUserEntity(voucherUser, voucherUserEntity);
		VoucherUserEntity voucherUserEntitySaved = voucherUserJpaRepository.save(voucherUserEntity);
		return voucherUserServiceMapper.mapVoucherUserEntityToVoucherUser(voucherUserEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		voucherUserJpaRepository.delete(id);
	}

	public VoucherUserJpaRepository getVoucherUserJpaRepository() {
		return voucherUserJpaRepository;
	}

	public void setVoucherUserJpaRepository(VoucherUserJpaRepository voucherUserJpaRepository) {
		this.voucherUserJpaRepository = voucherUserJpaRepository;
	}

	public VoucherUserServiceMapper getVoucherUserServiceMapper() {
		return voucherUserServiceMapper;
	}

	public void setVoucherUserServiceMapper(VoucherUserServiceMapper voucherUserServiceMapper) {
		this.voucherUserServiceMapper = voucherUserServiceMapper;
	}

	@Override
	public Page<VoucherUserEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return voucherUserJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}
	
	

	@Override
	public Page<VoucherUserEntity> listPagingByUserId(Integer page, Integer size, Integer userId) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return voucherUserJpaRepository.listPagingByUserId(userId, pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Integer totalVourcherByUserId(Integer userId) {
		try {
			return voucherUserJpaRepository.totalVourcherByUserId(userId);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public List<VoucherUserEntity> listPagingByUserIdAndStatus(Integer userId, short status) {
		try {
			return voucherUserJpaRepository.listPagingByUserIdAndStatus(userId,status);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}

	}

	@Override
	public void deleteVouchert(Integer[] voucherId) {
		try {
			voucherUserJpaRepository.deleteVouchert(voucherId);
		} catch (Exception e) {
			System.out.println(e);
		}
		
	}
	
	@Override
	public void deleteVouchertByUserId(Integer userId) {
		try {
			voucherUserJpaRepository.deleteVouchertByUserId(userId);
		} catch (Exception e) {
			System.out.println(e);
		}
		
	}
	
	@Override
	public List<HelloVoucherSummary> voucherUserEntitiesByUserId(Integer page, Integer size, Integer userId) {
		List<HelloVoucherSummary> list = new ArrayList<>();
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.ASC, "statusUse"), new Order(Direction.DESC, "createDate")));
			Page<VoucherUserEntity> result = voucherUserJpaRepository.listPagingByUserId(userId, pageable);
			for (VoucherUserEntity i : result) {
				HelloVoucherSummary v = new HelloVoucherSummary();
				v.setId(i.getId());
				v.setUserId(i.getUserId());
				v.setVoucherId(i.getVoucher().getId());
				v.setFromDate(i.getFromDate());
				v.setToDate(i.getToDate());
				v.setStatusUse(i.getStatusUse());
				v.setCreateDate(i.getCreateDate());
				v.setUpdateDate(i.getUpdateDate());
				v.setUserVoucherDate(i.getUseVoucherDate());
				if(i.getVoucher().getContent() == null){
					v.setContentVoucher("");
				}else{
					v.setContentVoucher(i.getVoucher().getContent());
				}
				if(i.getVoucher().getBusinessSub() != null){
					v.setIsBussinessVoucher(1);
					v.setIsHeartVoucher(0);
				}else if(i.getVoucher().getTypeVoucher() == 2){
					v.setIsBussinessVoucher(0);
					v.setIsHeartVoucher(1);
				}
				v.setVoucherName(i.getVoucher().getName());
				list.add(v);
			}
			
			return list;
		} catch (Exception e) {
				e.printStackTrace();			
					return null;
		}
	}
	
	@Override
	public List<HelloVoucherSummary> voucherUserEntitiesByUserIdLoadMore(Integer userId, Integer startElement, Integer defaultElement) {
		List<HelloVoucherSummary> list = new ArrayList<>();
		try {
			List<VoucherUserEntity> result = voucherUserJpaRepository.voucherUserEntitiesByUserIdLoadMore(userId, 0 , startElement + defaultElement );
			for (VoucherUserEntity i : result) {
				HelloVoucherSummary v = new HelloVoucherSummary();
				v.setId(i.getId());
				v.setUserId(i.getUserId());
				v.setVoucherId(i.getVoucher().getId());
				v.setFromDate(i.getFromDate());
				v.setToDate(i.getToDate());
				v.setStatusUse(i.getStatusUse());
				v.setCreateDate(i.getCreateDate());
				v.setUpdateDate(i.getUpdateDate());
				v.setUserVoucherDate(i.getUseVoucherDate());
				if(i.getVoucher().getContent() == null){
					v.setContentVoucher("");
				}else{
					v.setContentVoucher(i.getVoucher().getContent());
				}
				if(i.getVoucher().getBusinessSub() != null){
					v.setIsBussinessVoucher(1);
					v.setIsHeartVoucher(0);
				}else if(i.getVoucher().getTypeVoucher() == 2){
					v.setIsBussinessVoucher(0);
					v.setIsHeartVoucher(1);
				}
				v.setVoucherName(i.getVoucher().getName());
				list.add(v);
			}
			
			return list;
		} catch (Exception e) {
				e.printStackTrace();			
					return null;
		}
	}

	@Override
	public Integer totalVoucherByUserId(Integer userId) {
		Integer totalVoucherByUserId = voucherUserJpaRepository.totalVoucherByUserId(userId);
		if(totalVoucherByUserId == null) {
			totalVoucherByUserId = 0; 
		}
		return totalVoucherByUserId;
	}

	@Override
	public Integer totalVoucherNoUsedByUserId(Integer userId) {
		Integer totalVoucherByUserId = voucherUserJpaRepository.totalVoucherNoUsedByUserId(userId);
		if(totalVoucherByUserId == null) {
			totalVoucherByUserId = 0; 
		}
		return totalVoucherByUserId;
	}

	@Override
	public VoucherUser getVoucherCanUse(Integer userId, Integer typeCounseling) {
		try {
			PageRequest pageable = new PageRequest(0, 1 , new Sort(new Order(Direction.DESC, "toDate"), new Order(Direction.ASC, "voucher.typeVoucher")));
			List<VoucherUserEntity> list = voucherUserJpaRepository.listVoucherCanUse(userId, typeCounseling, pageable);
			return voucherUserServiceMapper.mapVoucherUserEntityToVoucherUser(list.get(0));
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}
	
	@Override
	public PageCustom<BusinessVoucher> filterAdmin(SearchBusinessVoucher s, Integer page, Integer size) {
		try {
			String select = 
					"SELECT DISTINCT V.id as voucherId, "
							+ "U.fullname, "
							+ "B.business_name, "
							+ "BS.manage_year, "
							+ "BS.business_sub_name, "
							+ "V.name, "
							+ "(select count(*) from voucher_user VUS where VUS.user_id = U.id and VUS.voucher_id = V.id) as voucherNumber, "
							+ "VU.from_date, "
							+ "VU.to_date, "
							+ "VU.create_date ";
			
			String from ="FROM user U "
							+ "INNER JOIN voucher_user VU on U.id = VU.user_id "
							+ "INNER JOIN voucher V on V.id = VU.voucher_id "
							+ "INNER JOIN business_sub BS on V.business_sub_id = BS.id "
							+ "INNER JOIN business B on B.id = BS.business_id ";
			
			String where ="WHERE 1=1 ";
			
			String orderBy =" ORDER BY ";
			
			if (s.getStartDate() != null) {
				where += " AND DATE_FORMAT(VU.create_date, '%Y-%m-%d') >= '" + s.getStartDate() + "'";
			}
			
			if (s.getEndDate() != null) {
				where += " AND DATE_FORMAT(VU.create_date, '%Y-%m-%d') <= '" + s.getEndDate() + "'";
			}

			//year manager
			if(s.getBusinessType() != null){
				where+=" AND B.business_type = "+s.getBusinessType();
				if(s.getManagerYear() != null){
					where+=" AND BS.manage_year = "+s.getManagerYear();
					if(s.getBusinessSubId() != null){
						where+=" AND BS.id = "+s.getBusinessSubId();
					}
				}
			}
			
			// type and keyword
			if (s.getCommon().getType() != null && s.getCommon().getKeyWord() != null) {
				if (s.getCommon().getType().equals("fullname")) {
					where+=" AND U.fullname like '%"+s.getCommon().getKeyWord()+"%'";
				} else{
					where+=" AND V.name like '%"+s.getCommon().getKeyWord()+"%'";
				} 
			}
			
			//order by
			if (s.getOrder().equals("memberName")) {
				orderBy +=" AA.fullname ASC ";
			}else{
				orderBy +=" AA.create_date DESC ";
			}
			
			//limit
			Integer offset = DataUtils.getOffset(page, size);
			String limit = " LIMIT " + offset + ", " + size;
			
			//Select
			String queryString = "SELECT AA.* "
								+"FROM (" 
										+select
										+from
										+where
								+") AA"
								+orderBy
								+limit;
			System.out.println(queryString);
			Query query = em.createNativeQuery(queryString);
			List<Object[]> list = query.getResultList();
			List<BusinessVoucher> listResult = new ArrayList<>();
			for (Object[] i : list) {
				BusinessVoucher b = new BusinessVoucher();
				b.setVoucherId((Integer) i[0]);
				b.setFullName((String) i[1]);
				b.setBusinessName((String) i[2]);
				b.setManageYear((Integer) i[3]);
				b.setBusinessSubName((String) i[4]);
				b.setVoucherName((String) i[5]);
				b.setVoucherNumber(Integer.parseInt(String.valueOf(i[6])));
				b.setFromDate((Date) i[7]);
				b.setToDate((Date) i[8]);
				listResult.add(b);
			}
			
			//Count 
			String queryStringCount = "SELECT COUNT(*) "
									+"FROM (" 
											+select
											+from
											+where
									+") AA";
			
			Query countQuery = em.createNativeQuery(queryStringCount);
			Long totalCount = ((Number) countQuery.getSingleResult()).longValue();
			return  new PageCustom<BusinessVoucher>(listResult, totalCount, page, size);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public PageCustom<BusinessVoucher> filterHeartVoucher(SearchHeartVoucher s, Integer page, Integer size) {
		try {
			String select = "SELECT VU.id as voucherUserId, U.fullname, "
					+ "VU.from_date, VU.to_date, VU.reason, ADMIN.fullname as adminName, U.id  ";
			
			String count ="SELECT COUNT(*) ";
			
			String from ="FROM user U "
					+ "INNER JOIN voucher_user VU on U.id = VU.user_id "
					+ "INNER JOIN voucher V on V.id = VU.voucher_id "
					+ "LEFT JOIN user ADMIN on ADMIN.id = VU.admin_id ";
			
			String where ="WHERE V.type_voucher = 2 ";
			
			String orderBy =" ORDER BY VU.create_date";
			
			if (s.getStartDate() != null) {
				where += " AND DATE_FORMAT(VU.create_date, '%Y-%m-%d') >= '" + s.getStartDate() + "'";
			}
			
			if (s.getEndDate() != null) {
				where += " AND DATE_FORMAT(VU.create_date, '%Y-%m-%d') <= '" + s.getEndDate() + "'";
			}

			// type and keyword
			if (s.getCommon().getType() != null && s.getCommon().getKeyWord() != null) {
				if (s.getCommon().getType().equals("fullname")) {
					where+=" AND U.fullname like '%"+s.getCommon().getKeyWord()+"%'";
				} else{
					where+=" AND ADMIN.name like '%"+s.getCommon().getKeyWord()+"%'";
				} 
			}
			
			//limit
			Integer offset = DataUtils.getOffset(page, size);
			String limit = " LIMIT " + offset + ", " + size;
			
			//Select
			Query query = em.createNativeQuery(select + from + where + orderBy + limit );
			List<Object[]> list = query.getResultList();
			List<BusinessVoucher> listResult = new ArrayList<>();
			for (Object[] i : list) {
				BusinessVoucher b = new BusinessVoucher();
				b.setVoucherId((Integer) i[0]);
				b.setFullName((String) i[1]);
				b.setFromDate((Date) i[2]);
				b.setToDate((Date) i[3]);
				b.setReason((String) i[4]);
				b.setAdminName((String) i[5]);
				b.setUserId((Integer) i[6]);
				listResult.add(b);
			}
			
			//Count 
			Query countQuery = em.createNativeQuery(count + from + where);
			Long totalCount = ((Number) countQuery.getSingleResult()).longValue();
			return  new PageCustom<BusinessVoucher>(listResult, totalCount, page, size);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public PageCustom<VoucherInfo> getVoucherInfoInCompany(Integer businessId, String keyword, Integer subCompanyId,
			Integer yearSearch, String rsOrder, Integer page, Integer size) {
		try {
			String sql_select = " SELECT u.id, u.username, u.fullname, u.day_of_birth, bs.manage_year, bs.manager_name, vu.use_voucher_date, v.fee, "
					+ " (SELECT COUNT(*) FROM voucher_user vu1 INNER JOIN user u1 ON vu1.user_id = u1.id INNER JOIN voucher v1 ON vu1.voucher_id = v1.id "
					+ " WHERE vu1.status_use = 1 and v1.type_voucher = 1 and vu1.use_voucher_date = vu.use_voucher_date and u1.id = u.id) AS countVoucherUsed ";
			String sql_count  = " SELECT COUNT(*) FROM ( ";
			String sql_countTotal  = " SELECT SUM(voucherInfo.fee * voucherInfo.countVoucherUsed), SUM(voucherInfo.countVoucherUsed) FROM ( ";
			String sql_from   = " FROM voucher_user vu INNER JOIN user u ON vu.user_id = u.id INNER JOIN voucher v ON vu.voucher_id = v.id INNER JOIN business_sub bs ON v.business_sub_id = bs.id ";
			String sql_where  = " WHERE vu.status_use = 1 and v.type_voucher = 1 and u.role_id = 5 and bs.business_id = :businessId and bs.manage_year = :manageYear ";
			
			String sql_where_sub = "";
			if (subCompanyId != 0) {
				sql_where_sub = " and u.business_sub_id = :subCompanyId ";
			}
			if (keyword != null) {
				sql_where_sub = sql_where_sub + " and (bs.manage_year LIKE :keyword or u.id LIKE :keyword or u.username LIKE :keyword OR u.fullname LIKE :keyword OR u.day_of_birth LIKE :keyword OR bs.manager_name LIKE :keyword OR vu.use_voucher_date LIKE :keyword OR v.fee LIKE :keyword ) ";
			}
			String sql_orderby = "";
			if (rsOrder.equals("name_order")) {
				sql_orderby = sql_orderby + " ORDER BY u.fullname ASC ";
			} else {
				sql_orderby = sql_orderby + " ORDER BY vu.use_voucher_date DESC ";
			}
			System.out.println("select:" + sql_select + sql_from + sql_where + sql_where_sub + " GROUP BY u.id, vu.use_voucher_date " + sql_orderby + " limit " + (page-1)*size  + ", " + size);
			Query q = em.createNativeQuery(sql_select + sql_from + sql_where + sql_where_sub + " GROUP BY u.id, vu.use_voucher_date " + sql_orderby + " limit " + (page-1)*size  + ", " + size);
			q.setParameter("businessId", businessId);
			q.setParameter("manageYear", yearSearch);
			if (subCompanyId != 0) {
				q.setParameter("subCompanyId", subCompanyId);
			}
			q.setParameter("businessId", businessId);
			if (keyword != null) {
				q.setParameter("keyword", "%"+keyword+"%");
			}
			@SuppressWarnings("unchecked")
			List<Object[] > rss = q.getResultList();
			List<VoucherInfo> list = new ArrayList<>();
			for (Object[] i : rss) {
				VoucherInfo m = new VoucherInfo();
				m.setId((Integer) i[0]);
				m.setUsername((String) i[1]);
				m.setFullname((String) i[2]);
				m.setDayOfBirth((Date) i[3]);
				m.setManageYear((Integer) i[4]);
				m.setBusinessSubName((String) i[5]);
				m.setUseVoucherDate((Date) i[6]);
				m.setFee((Integer) i[7]);
				m.setCountVoucherUsed(((BigInteger) i[8]).intValue());
				list.add(m);
			}
			
			Query c = em.createNativeQuery(sql_count + sql_select + sql_from + sql_where + sql_where_sub + " GROUP BY u.id, vu.use_voucher_date " + sql_orderby +") AS voucherInfo" );
			c.setParameter("businessId", businessId);
			c.setParameter("manageYear", yearSearch);
			if (subCompanyId != 0) {
				c.setParameter("subCompanyId", subCompanyId);
			}
			c.setParameter("businessId", businessId);
			if (keyword != null) {
				c.setParameter("keyword", "%"+keyword+"%");
			}
			
			Long totalCount = Long.valueOf(c.getSingleResult().toString());
			if(totalCount == null) {
				totalCount = 0l;
			}
			
			Query t = em.createNativeQuery(sql_countTotal + sql_select + sql_from + sql_where + sql_where_sub + " GROUP BY u.id, vu.use_voucher_date " + sql_orderby + ") AS voucherInfo" );
			t.setParameter("businessId", businessId);
			t.setParameter("manageYear", yearSearch);
			if (subCompanyId != 0) {
				t.setParameter("subCompanyId", subCompanyId);
			}
			t.setParameter("businessId", businessId);
			if (keyword != null) {
				t.setParameter("keyword", "%"+keyword+"%");
			}
			
			Object[] rs = (Object[]) t.getSingleResult();
			StatisticsVoucher s = new StatisticsVoucher();
			s.setTotalFee(((BigDecimal) rs[0]).intValue());
			s.setTotalVoucher(((BigDecimal) rs[1]).intValue());
			
			PageCustom<VoucherInfo> pageCustom = new PageCustom<>(list, totalCount, page, size, s);
			
			return pageCustom;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	@Override
	public PageCustom<VoucherInfo> getVoucherMemberInfoInCompany(Integer businessId, String keyword, Integer subCompanyId,
			Integer yearSearch, String rsOrder, Integer page, Integer size) {
		try {
			String sql_select = " SELECT u.id, u.username, u.fullname, u.day_of_birth, bs.manage_year, bs.manager_name, vu.create_date, v.fee, "
					+ " (SELECT COUNT(*) FROM voucher_user vu1 INNER JOIN user u1 ON vu1.user_id = u1.id INNER JOIN voucher v1 ON vu1.voucher_id = v1.id INNER JOIN business_sub bs1 ON v1.business_sub_id = bs1.id "
					+ " WHERE vu1.status_use = 1 and v1.type_voucher = 1 and vu1.create_date = vu.create_date and u1.id = u.id) AS countVoucherUsed, (SELECT COUNT(*) FROM voucher_user vu2 "
					+ " INNER JOIN user u2 ON vu2.user_id = u2.id INNER JOIN voucher v2 ON vu2.voucher_id = v2.id INNER JOIN business_sub bs2 ON v2.business_sub_id = bs2.id "
					+ " WHERE vu2.status_use = 0 and v2.type_voucher = 1 and vu2.create_date = vu.create_date and u2.id = u.id) AS countVoucherRemain, "
					+ " (SELECT COUNT(*) FROM voucher_user vu3 INNER JOIN user u3 ON vu3.user_id = u3.id INNER JOIN voucher v3 ON vu3.voucher_id = v3.id INNER JOIN business_sub bs3 ON v3.business_sub_id = bs3.id "
					+ " WHERE v3.type_voucher = 1 and vu3.create_date = vu.create_date and u3.id = u.id) AS totalC ";

			String sql_count  = " SELECT COUNT(*) FROM ( ";
			String sql_countTotal  = " SELECT SUM(voucherInfo.fee * voucherInfo.countVoucherUsed), SUM(voucherInfo.countVoucherUsed), SUM(voucherInfo.countVoucherRemain) FROM ( ";
			String sql_from   = " FROM voucher_user vu INNER JOIN user u ON vu.user_id = u.id INNER JOIN voucher v ON vu.voucher_id = v.id INNER JOIN business_sub bs ON v.business_sub_id = bs.id ";
			String sql_where  = " WHERE v.type_voucher = 1 and u.role_id = 5 and bs.business_id = :businessId and bs.manage_year = :manageYear ";
			
			String sql_where_sub = "";
			if (subCompanyId != 0) {
				sql_where_sub = " and u.business_sub_id = :subCompanyId ";
			}
			if (keyword != null) {
				sql_where_sub = sql_where_sub + " and (bs.manage_year LIKE :keyword or u.id LIKE :keyword or u.username LIKE :keyword OR u.fullname LIKE :keyword OR u.day_of_birth LIKE :keyword OR bs.manager_name LIKE :keyword OR vu.use_voucher_date LIKE :keyword OR v.fee LIKE :keyword ) ";
			}
			
			String sql_orderby = "";
			if (rsOrder.equals("name_order")) {
				sql_orderby = sql_orderby + " ORDER BY u.fullname ASC ";
			} else {
				sql_orderby = sql_orderby + " ORDER BY vu.use_voucher_date DESC ";
			}
			System.out.println("select:" + sql_select + sql_from + sql_where + sql_where_sub + " GROUP BY u.id, vu.create_date " + sql_orderby + " limit " + (page-1)*size  + ", " + size);
			Query q = em.createNativeQuery(sql_select + sql_from + sql_where + sql_where_sub + " GROUP BY u.id, vu.create_date " + sql_orderby + " limit " + (page-1)*size  + ", " + size);
			q.setParameter("businessId", businessId);
			q.setParameter("manageYear", yearSearch);
			if (subCompanyId != 0) {
				q.setParameter("subCompanyId", subCompanyId);
			}
			q.setParameter("businessId", businessId);
			if (keyword != null) {
				q.setParameter("keyword", "%"+keyword+"%");
			}
			@SuppressWarnings("unchecked")
			List<Object[] > rss = q.getResultList();
			List<VoucherInfo> list = new ArrayList<>();
			for (Object[] i : rss) {
				VoucherInfo m = new VoucherInfo();
				m.setId((Integer) i[0]);
				m.setUsername((String) i[1]);
				m.setFullname((String) i[2]);
				m.setDayOfBirth((Date) i[3]);
				m.setManageYear((Integer) i[4]);
				m.setBusinessSubName((String) i[5]);
				m.setCreateDate((Date) i[6]);
				m.setFee((Integer) i[7]);
				m.setCountVoucherUsed(((BigInteger) i[8]).intValue());
				m.setCountRemainVoucher(((BigInteger) i[9]).intValue());
				m.setCountTotalVoucher(((BigInteger) i[10]).intValue());
				list.add(m);
			}
			
			Query c = em.createNativeQuery(sql_count + sql_select + sql_from + sql_where + sql_where_sub + " GROUP BY u.id, vu.create_date " + sql_orderby + ") AS voucherInfo" );
			c.setParameter("businessId", businessId);
			c.setParameter("manageYear", yearSearch);
			if (subCompanyId != 0) {
				c.setParameter("subCompanyId", subCompanyId);
			}
			c.setParameter("businessId", businessId);
			if (keyword != null) {
				c.setParameter("keyword", "%"+keyword+"%");
			}
			
			Long totalCount = Long.valueOf(c.getSingleResult().toString());
			if(totalCount == null) {
				totalCount = 0l;
			}
			
			Query t = em.createNativeQuery(sql_countTotal + sql_select + sql_from + sql_where + sql_where_sub + " GROUP BY u.id, vu.create_date " + sql_orderby + ") AS voucherInfo" );
			t.setParameter("businessId", businessId);
			t.setParameter("manageYear", yearSearch);
			if (subCompanyId != 0) {
				t.setParameter("subCompanyId", subCompanyId);
			}
			t.setParameter("businessId", businessId);
			if (keyword != null) {
				t.setParameter("keyword", "%"+keyword+"%");
			}
			
			Object[] rs = (Object[]) t.getSingleResult();
			StatisticsVoucher s = new StatisticsVoucher();
			s.setTotalFee(((BigDecimal) rs[0]).intValue());
			s.setTotalVoucher(((BigDecimal) rs[1]).intValue());
			s.setTotalVoucherRemain(((BigDecimal) rs[2]).intValue());
			
			PageCustom<VoucherInfo> pageCustom = new PageCustom<>(list, totalCount, page, size, s);
			
			return pageCustom;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	@Override
	public List<VoucherInfo> getVoucherInfoInCompanyExportExcel(Integer businessId, String keyword, Integer subCompanyId,
			Integer yearSearch, String rsOrder) {
		try {
			String sql_select = " SELECT u.id, u.username, u.fullname, u.day_of_birth, bs.manage_year, bs.manager_name, vu.use_voucher_date, "
					+ " (SELECT COUNT(*) FROM voucher_user vu1 INNER JOIN user u1 ON vu1.user_id = u1.id INNER JOIN voucher v1 ON vu1.voucher_id = v1.id "
					+ " WHERE vu1.status_use = 1 and v1.type_voucher = 1 and vu1.use_voucher_date = vu.use_voucher_date and u1.id = u.id) AS countVoucherUsed , v.fee ";
			String sql_from   = " FROM voucher_user vu INNER JOIN user u ON vu.user_id = u.id INNER JOIN voucher v ON vu.voucher_id = v.id INNER JOIN business_sub bs ON v.business_sub_id = bs.id ";
			String sql_where  = " WHERE vu.status_use = 1 and v.type_voucher = 1 and u.role_id = 5 and bs.business_id = :businessId and bs.manage_year = :manageYear ";
			
			String sql_where_sub = "";
			if (subCompanyId != 0) {
				sql_where_sub = " and u.business_sub_id = :subCompanyId ";
			}
			if (keyword != null) {
				sql_where_sub = sql_where_sub + " and (bs.manage_year LIKE :keyword or u.id LIKE :keyword or u.username LIKE :keyword OR u.fullname LIKE :keyword OR u.day_of_birth LIKE :keyword OR bs.manager_name LIKE :keyword OR vu.use_voucher_date LIKE :keyword OR v.fee LIKE :keyword ) ";
			}
			String sql_orderby = "";
			if (rsOrder.equals("name_order")) {
				sql_orderby = sql_orderby + " ORDER BY u.fullname ASC ";
			} else {
				sql_orderby = sql_orderby + " ORDER BY vu.use_voucher_date DESC ";
			}
			Query q = em.createNativeQuery(sql_select + sql_from + sql_where + sql_where_sub + " GROUP BY u.id, vu.use_voucher_date " + sql_orderby );
			q.setParameter("businessId", businessId);
			q.setParameter("manageYear", yearSearch);
			if (subCompanyId != 0) {
				q.setParameter("subCompanyId", subCompanyId);
			}
			q.setParameter("businessId", businessId);
			if (keyword != null) {
				q.setParameter("keyword", "%"+keyword+"%");
			}
			@SuppressWarnings("unchecked")
			List<Object[] > rss = q.getResultList();
			List<VoucherInfo> list = new ArrayList<>();
			for (Object[] i : rss) {
				VoucherInfo m = new VoucherInfo();
				m.setId((Integer) i[0]);
				m.setUsername((String) i[1]);
				m.setFullname((String) i[2]);
				m.setDayOfBirth((Date) i[3]);
				m.setManageYear((Integer) i[4]);
				m.setBusinessSubName((String) i[5]);
				m.setUseVoucherDate((Date) i[6]);
				m.setCountVoucherUsed(((BigInteger) i[7]).intValue());
				m.setFee((Integer) i[8]);
				
				list.add(m);
			}
			
			
			return list;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	@Override
	public List<VoucherInfo> getVoucherMemberInfoInCompanyExportExcel(Integer businessId, String keyword, Integer subCompanyId,
			Integer yearSearch, String rsOrder) {
		try {
			String sql_select = " SELECT u.id, u.username, u.fullname, u.day_of_birth, bs.manage_year, bs.manager_name, vu.create_date, v.fee, "
					+ " (SELECT COUNT(*) FROM voucher_user vu1 INNER JOIN user u1 ON vu1.user_id = u1.id INNER JOIN voucher v1 ON vu1.voucher_id = v1.id INNER JOIN business_sub bs1 ON v1.business_sub_id = bs1.id "
					+ " WHERE vu1.status_use = 1 and v1.type_voucher = 1 and vu1.create_date = vu.create_date and u1.id = u.id) AS countVoucherUsed, (SELECT COUNT(*) FROM voucher_user vu2 "
					+ " INNER JOIN user u2 ON vu2.user_id = u2.id INNER JOIN voucher v2 ON vu2.voucher_id = v2.id INNER JOIN business_sub bs2 ON v2.business_sub_id = bs2.id "
					+ " WHERE vu2.status_use = 0 and v2.type_voucher = 1 and vu2.create_date = vu.create_date and u2.id = u.id) AS countVoucherRemain, "
					+ " (SELECT COUNT(*) FROM voucher_user vu3 INNER JOIN user u3 ON vu3.user_id = u3.id INNER JOIN voucher v3 ON vu3.voucher_id = v3.id INNER JOIN business_sub bs3 ON v3.business_sub_id = bs3.id "
					+ " WHERE v3.type_voucher = 1 and vu3.create_date = vu.create_date and u3.id = u.id) AS totalC ";

			String sql_from   = " FROM voucher_user vu INNER JOIN user u ON vu.user_id = u.id INNER JOIN voucher v ON vu.voucher_id = v.id INNER JOIN business_sub bs ON v.business_sub_id = bs.id ";
			String sql_where  = " WHERE v.type_voucher = 1 and u.role_id = 5 and bs.business_id = :businessId and bs.manage_year = :manageYear ";
			
			String sql_where_sub = "";
			if (subCompanyId != 0) {
				sql_where_sub = " and u.business_sub_id = :subCompanyId ";
			}
			if (keyword != null) {
				sql_where_sub = sql_where_sub + " and (bs.manage_year LIKE :keyword or u.id LIKE :keyword or u.username LIKE :keyword OR u.fullname LIKE :keyword OR u.day_of_birth LIKE :keyword OR bs.manager_name LIKE :keyword OR vu.use_voucher_date LIKE :keyword OR v.fee LIKE :keyword ) ";
			}
			
			String sql_orderby = "";
			if (rsOrder.equals("name_order")) {
				sql_orderby = sql_orderby + " ORDER BY u.fullname ASC ";
			} else {
				sql_orderby = sql_orderby + " ORDER BY vu.use_voucher_date DESC ";
			}
			System.out.println("selec: " + sql_select + sql_from + sql_where + sql_where_sub + " GROUP BY u.id, vu.create_date " + sql_orderby);
			Query q = em.createNativeQuery(sql_select + sql_from + sql_where + sql_where_sub + " GROUP BY u.id, vu.create_date " + sql_orderby );
			q.setParameter("businessId", businessId);
			q.setParameter("manageYear", yearSearch);
			if (subCompanyId != 0) {
				q.setParameter("subCompanyId", subCompanyId);
			}
			q.setParameter("businessId", businessId);
			if (keyword != null) {
				q.setParameter("keyword", "%"+keyword+"%");
			}
			@SuppressWarnings("unchecked")
			List<Object[] > rss = q.getResultList();
			List<VoucherInfo> list = new ArrayList<>();
			for (Object[] i : rss) {
				VoucherInfo m = new VoucherInfo();
				m.setId((Integer) i[0]);
				m.setUsername((String) i[1]);
				m.setFullname((String) i[2]);
				m.setDayOfBirth((Date) i[3]);
				m.setManageYear((Integer) i[4]);
				m.setBusinessSubName((String) i[5]);
				m.setCreateDate((Date) i[6]);
				m.setFee((Integer) i[7]);
				m.setCountVoucherUsed(((BigInteger) i[8]).intValue());
				m.setCountRemainVoucher(((BigInteger) i[9]).intValue());
				m.setCountTotalVoucher(((BigInteger) i[10]).intValue());
				list.add(m);
			}
			
			return list;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public Integer totalVouchersByCreateDateAndBusinessId(Integer businessId, String createDate) {
		String sql_select = "SELECT COUNT(*) FROM voucher_user vu "
			+ " INNER JOIN user u ON vu.user_id = u.id INNER JOIN voucher v ON vu.voucher_id = v.id INNER JOIN business_sub bs ON v.business_sub_id = bs.id "
			+ " WHERE DATE(vu.create_date) = :dateConvert and bs.business_id = :businessId ";
		Query t = em.createNativeQuery( sql_select);
		t.setParameter("businessId", businessId);
		t.setParameter("dateConvert", createDate);
		
		return Integer.valueOf(t.getSingleResult().toString());
	}
	
	@Override
	public Integer totalVoucherMembersByCreateDateAndBusinessId(Integer businessId, String useVoucherDate) {
		String sql_select = "SELECT COUNT(*) FROM voucher_user vu "
				+ " INNER JOIN user u ON vu.user_id = u.id INNER JOIN voucher v ON vu.voucher_id = v.id INNER JOIN business_sub bs ON v.business_sub_id = bs.id "
				+ " WHERE DATE(vu.create_date) = :dateConvert and bs.business_id = :businessId and vu.status_use = 1 ";
			Query t = em.createNativeQuery( sql_select);
			t.setParameter("businessId", businessId);
			t.setParameter("dateConvert", useVoucherDate);
		return Integer.valueOf(t.getSingleResult().toString());
	}

	@Override
	public VoucherUser findByUserIdAndVoucherIdAndStatusUse(Integer userId, Integer voucherId, Short statusUse) {
		VoucherUserEntity voucherUserEntity = voucherUserJpaRepository.findByUserIdAndVoucherIdAndStatusUse(userId, voucherId, statusUse);
		return voucherUserServiceMapper.mapVoucherUserEntityToVoucherUser(voucherUserEntity);
	}
}
