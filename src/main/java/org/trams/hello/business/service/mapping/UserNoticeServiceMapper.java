/*
 * Created on 3 Mar 2017 ( Time 10:03:51 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.business.service.mapping;

import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import org.trams.hello.bean.UserNotice;
import org.trams.hello.bean.jpa.NoticeEntity;
import org.trams.hello.bean.jpa.UserNoticeEntity;

/**
 * Mapping between entity beans and display beans.
 */
@Component
public class UserNoticeServiceMapper extends AbstractServiceMapper {

	/**
	 * ModelMapper : bean to bean mapping library.
	 */
	private ModelMapper modelMapper;
	
	/**
	 * Constructor.
	 */
	public UserNoticeServiceMapper() {
		modelMapper = new ModelMapper();
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}

	/**
	 * Mapping from 'UserNoticeEntity' to 'UserNotice'
	 * @param userNoticeEntity
	 */
	public UserNotice mapUserNoticeEntityToUserNotice(UserNoticeEntity userNoticeEntity) {
		if(userNoticeEntity == null) {
			return null;
		}

		//--- Generic mapping 
		UserNotice userNotice = map(userNoticeEntity, UserNotice.class);

		//--- Link mapping ( link to Notice )
		if(userNoticeEntity.getNotice() != null) {
			userNotice.setNoticeId(userNoticeEntity.getNotice().getId());
		}
		return userNotice;
	}
	
	/**
	 * Mapping from 'UserNotice' to 'UserNoticeEntity'
	 * @param userNotice
	 * @param userNoticeEntity
	 */
	public void mapUserNoticeToUserNoticeEntity(UserNotice userNotice, UserNoticeEntity userNoticeEntity) {
		if(userNotice == null) {
			return;
		}

		//--- Generic mapping 
		map(userNotice, userNoticeEntity);

		//--- Link mapping ( link : userNotice )
		if( hasLinkToNotice(userNotice) ) {
			NoticeEntity notice1 = new NoticeEntity();
			notice1.setId( userNotice.getNoticeId() );
			userNoticeEntity.setNotice( notice1 );
		} else {
			userNoticeEntity.setNotice( null );
		}

	}
	
	/**
	 * Verify that Notice id is valid.
	 * @param Notice Notice
	 * @return boolean
	 */
	private boolean hasLinkToNotice(UserNotice userNotice) {
		if(userNotice.getNoticeId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected ModelMapper getModelMapper() {
		return modelMapper;
	}

	protected void setModelMapper(ModelMapper modelMapper) {
		this.modelMapper = modelMapper;
	}

}