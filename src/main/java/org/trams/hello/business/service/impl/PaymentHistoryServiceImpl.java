/*
 * Created on 23 thg 11 2016 ( Time 16:49:52 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.business.service.impl;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;

import javax.annotation.Resource;
import javax.persistence.EntityManager;
import javax.persistence.Query;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import org.trams.hello.bean.PageCustom;
import org.trams.hello.bean.PaymentHistory;
import org.trams.hello.bean.jpa.CoinHistory;
import org.trams.hello.bean.jpa.PaymentHistoryEntity;
import org.trams.hello.business.service.CategoryService;
import org.trams.hello.business.service.PaymentHistoryService;
import org.trams.hello.business.service.mapping.PaymentHistoryServiceMapper;
import org.trams.hello.data.repository.jpa.PaymentHistoryJpaRepository;
import org.trams.hello.web.common.ApplicationDefine;
/**
 * Implementation of PaymentHistoryService
 */
@Component
@Transactional
public class PaymentHistoryServiceImpl implements PaymentHistoryService {

	@Resource
	private PaymentHistoryJpaRepository paymentHistoryJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Autowired
	private EntityManager em;
	
	@Resource
	private CategoryService categoryService;
	
	@Resource
	private PaymentHistoryServiceMapper paymentHistoryServiceMapper;
	
	@Override
	public PaymentHistory findById(Integer id) {
		PaymentHistoryEntity paymentHistoryEntity = paymentHistoryJpaRepository.findOne(id);
		return paymentHistoryServiceMapper.mapPaymentHistoryEntityToPaymentHistory(paymentHistoryEntity);
	}
	
	@Override
	public PaymentHistoryEntity findOne(Integer id) {
		return paymentHistoryJpaRepository.findOne(id);
	}


	@Override
	public Page<PaymentHistoryEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return paymentHistoryJpaRepository.findAll(request);
	}

	@Override
	public List<PaymentHistory> findAll() {
		Iterable<PaymentHistoryEntity> entities = paymentHistoryJpaRepository.findAll();
		List<PaymentHistory> beans = new ArrayList<PaymentHistory>();
		for(PaymentHistoryEntity paymentHistoryEntity : entities) {
			beans.add(paymentHistoryServiceMapper.mapPaymentHistoryEntityToPaymentHistory(paymentHistoryEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = paymentHistoryJpaRepository.count();
		return count;
	}

	@Override
	public PaymentHistory save(PaymentHistory paymentHistory) {
		return update(paymentHistory) ;
	}

	@Override
	public PaymentHistory create(PaymentHistory paymentHistory) {
/*
		PaymentHistoryEntity paymentHistoryEntity = paymentHistoryJpaRepository.findOne(paymentHistory.getId());
		if( paymentHistoryEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		paymentHistoryEntity = new PaymentHistoryEntity();
		paymentHistoryServiceMapper.mapPaymentHistoryToPaymentHistoryEntity(paymentHistory, paymentHistoryEntity);
		PaymentHistoryEntity paymentHistoryEntitySaved = paymentHistoryJpaRepository.save(paymentHistoryEntity);
		return paymentHistoryServiceMapper.mapPaymentHistoryEntityToPaymentHistory(paymentHistoryEntitySaved);
*/
		PaymentHistoryEntity paymentHistoryEntity = new PaymentHistoryEntity();
		paymentHistoryServiceMapper.mapPaymentHistoryToPaymentHistoryEntity(paymentHistory, paymentHistoryEntity);
		PaymentHistoryEntity paymentHistoryEntitySaved = paymentHistoryJpaRepository.save(paymentHistoryEntity);
		return paymentHistoryServiceMapper.mapPaymentHistoryEntityToPaymentHistory(paymentHistoryEntitySaved);
	}

	@Override
	public PaymentHistory update(PaymentHistory paymentHistory) {
		PaymentHistoryEntity paymentHistoryEntity = paymentHistoryJpaRepository.findOne(paymentHistory.getId());
		paymentHistoryServiceMapper.mapPaymentHistoryToPaymentHistoryEntity(paymentHistory, paymentHistoryEntity);
		PaymentHistoryEntity paymentHistoryEntitySaved = paymentHistoryJpaRepository.save(paymentHistoryEntity);
		return paymentHistoryServiceMapper.mapPaymentHistoryEntityToPaymentHistory(paymentHistoryEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		paymentHistoryJpaRepository.delete(id);
	}

	public PaymentHistoryJpaRepository getPaymentHistoryJpaRepository() {
		return paymentHistoryJpaRepository;
	}

	public void setPaymentHistoryJpaRepository(PaymentHistoryJpaRepository paymentHistoryJpaRepository) {
		this.paymentHistoryJpaRepository = paymentHistoryJpaRepository;
	}

	public PaymentHistoryServiceMapper getPaymentHistoryServiceMapper() {
		return paymentHistoryServiceMapper;
	}

	public void setPaymentHistoryServiceMapper(PaymentHistoryServiceMapper paymentHistoryServiceMapper) {
		this.paymentHistoryServiceMapper = paymentHistoryServiceMapper;
	}

	@Override
	public Page<PaymentHistoryEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return paymentHistoryJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Integer totalAddCoinBy_Type(Short type) {
		try {
			return paymentHistoryJpaRepository.totalAddCoinBy_Type(type);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Integer totalDeductionCoinBy_Type(Short type) {
		try {
			return paymentHistoryJpaRepository.totalDeductionCoinBy_Type(type);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public PageCustom<CoinHistory> listCoinManegerment(String start, String end, Short[] payment_reason, Short[] recharge_reason,
			String type, String key, Integer page, Integer size) {
		
		String STR_SELECT ="select p.id, u.fullname as memberName, p.create_date as create_date, p.type_use, p.coin, u2.fullname, u.id as userId, p.reason, p.type_payment as type ";
		
		String STR_COUNT ="select count(*) ";
		
		String STR_FROM =" from (payment_history p inner join user u on p.user_id = u.id) left join user u2 on p.admin_id = u2.id where p.type_coin = 1 and p.status = 1 ";
		
		String STR_WHERE = "";
		
		if(start != null){
			STR_WHERE +=" and DATE(p.create_date) >= '"+start+"'";
		}
		
		if(end != null){
			STR_WHERE +=" and DATE(p.create_date) <= '"+end+"'";
		}
		
		List<Short> list_type_use = new ArrayList<>();
		if(payment_reason.length > 0 ){
			for (Short i : payment_reason) {
				list_type_use.add(i);
			}
		}
		
		if(recharge_reason.length > 0 ){
			for (Short i : recharge_reason) {
				list_type_use.add(i);
			}
		}
		if(list_type_use.size() > 0){
			String str_status = Arrays.toString(list_type_use.toArray());
			str_status = str_status.replace("[", "(").replace("]", ")");
			STR_WHERE +="and p.type_use in "+str_status;
		}else{
			STR_WHERE +="and p.type_payment in (1,2)";
		}
		
		if(key != null){
			if(type.contains("member_name")){
				STR_WHERE +=" and u.fullname like '%"+key+"%' ";
			}else if(type.contains("admin_name")){
				STR_WHERE +=" and u2.fullname like '%"+key+"%' ";
			}
		}
		
		String STR_ORDER = " order by create_date DESC limit " + size + " OFFSET " + (page - 1) * size;
		
		String SELECT_TOTAL_DEDUCTION = "select sum(p.coin) "+ STR_FROM + STR_WHERE + " and p.type_payment = 2";
		String SELECT_TOTAL_ADD = "select sum(p.coin) "+ STR_FROM + STR_WHERE + " and p.type_payment = 1";
		
		try {
			Query q = em.createNativeQuery(STR_SELECT + STR_FROM + STR_WHERE + STR_ORDER);
			@SuppressWarnings("unchecked")
			List<Object[]> reservation = q.getResultList();
			List<CoinHistory> list = new ArrayList<>();
			for (Object[] i : reservation) {
				CoinHistory r = new CoinHistory();
				r.setId((Integer) i[0]);
				r.setMemberName((String) i[1]);
				r.setCreateDate((Date) i[2]);
				r.setTypeUse((Integer) i[3]);
				r.setPoint((Integer) i[4]);
				r.setAdminName((String) i[5]);
				r.setMemberId((Integer) i[6]);
				r.setReason((String) i[7]);
				r.setTypePayment((Integer) i[8]);
				list.add(r);
			}
			Query c = em.createNativeQuery(STR_COUNT + STR_FROM + STR_WHERE);
			Long totalCount = ((Number) c.getSingleResult()).longValue();
			Query d = em.createNativeQuery(SELECT_TOTAL_ADD);
			Query e = em.createNativeQuery(SELECT_TOTAL_DEDUCTION);
			Integer totalAdd = 0;
			Integer totalDeducation = 0;
			if(d.getSingleResult() != null){
				totalAdd = Integer.valueOf(d.getSingleResult().toString());
			}
			
			if(e.getSingleResult() != null){
				totalDeducation = Integer.valueOf(e.getSingleResult().toString());
			}
			
			List<Object> list_param = new ArrayList<>();
			list_param.add(totalAdd);
			list_param.add(totalDeducation);
			PageCustom<CoinHistory> pageCustom = new PageCustom<CoinHistory>(list, totalCount, page, size, list_param);
			return pageCustom;
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return null;
	}
	
	@Override
	public PageCustom<CoinHistory> listHeartManegerment(String start, String end, Short[] payment_reason, Short[] recharge_reason,
			String type, String key, Integer page, Integer size) {
		
		String STR_SELECT ="select p.id, u.fullname as memberName, p.create_date as create_date, p.type_use, p.coin, u2.fullname, u.id as userId, p.reason, p.type_payment as type ";
		
		String STR_COUNT ="select count(*) ";
		
		String STR_FROM =" from (payment_history p inner join user u on p.user_id = u.id) left join user u2 on p.admin_id = u2.id where p.type_coin = 2 and p.status = 1 ";
		
		String STR_WHERE = "";
		
		if(start != null){
			STR_WHERE +=" and DATE(p.create_date) >= '"+start+"'";
		}
		
		if(end != null){
			STR_WHERE +=" and DATE(p.create_date) <= '"+end+"'";
		}
		
		List<Short> list_type_use = new ArrayList<>();
		if(payment_reason.length > 0 ){
			for (Short i : payment_reason) {
				list_type_use.add(i);
			}
		}
		
		if(recharge_reason.length > 0 ){
			for (Short i : recharge_reason) {
				list_type_use.add(i);
			}
		}
		if(list_type_use.size() > 0){
			String str_status = Arrays.toString(list_type_use.toArray());
			str_status = str_status.replace("[", "(").replace("]", ")");
			STR_WHERE +="and p.type_use in "+str_status;
		}else{
			STR_WHERE +="and p.type_payment in (1,2)";
		}
		
		if(key != null){
			if(type.contains("member_name")){
				STR_WHERE +=" and u.fullname like '%"+key+"%' ";
			}else if(type.contains("admin_name")){
				STR_WHERE +=" and u2.fullname like '%"+key+"%' ";
			}
		}
		
		String STR_ORDER = " order by create_date DESC limit "+ (page-1)*size+","+ page*size;
		
		String SELECT_TOTAL_DEDUCTION = "select sum(p.coin) "+ STR_FROM + STR_WHERE + " and p.type_payment = 2";
		String SELECT_TOTAL_ADD = "select sum(p.coin) "+ STR_FROM + STR_WHERE + " and p.type_payment = 1";
		
		try {
			Query q = em.createNativeQuery(STR_SELECT + STR_FROM + STR_WHERE + STR_ORDER);
			@SuppressWarnings("unchecked")
			List<Object[]> reservation = q.getResultList();
			List<CoinHistory> list = new ArrayList<>();
			for (Object[] i : reservation) {
				CoinHistory r = new CoinHistory();
				r.setId((Integer) i[0]);
				r.setMemberName((String) i[1]);
				r.setCreateDate((Date) i[2]);
				r.setTypeUse((Integer) i[3]);
				r.setPoint((Integer) i[4]);
				r.setAdminName((String) i[5]);
				r.setMemberId((Integer) i[6]);
				r.setReason((String) i[7]);
				r.setTypePayment((Integer) i[8]);
				list.add(r);
			}
			Query c = em.createNativeQuery(STR_COUNT + STR_FROM + STR_WHERE);
			Long totalCount = ((Number) c.getSingleResult()).longValue();
			Query d = em.createNativeQuery(SELECT_TOTAL_ADD);
			Query e = em.createNativeQuery(SELECT_TOTAL_DEDUCTION);
			Integer totalAdd = 0;
			Integer totalDeducation = 0;
			if(d.getSingleResult() != null){
				totalAdd = Integer.valueOf(d.getSingleResult().toString());
			}
			
			if(e.getSingleResult() != null){
				totalDeducation = Integer.valueOf(e.getSingleResult().toString());
			}
			
			List<Object> list_param = new ArrayList<>();
			list_param.add(totalAdd);
			list_param.add(totalDeducation);
			PageCustom<CoinHistory> pageCustom = new PageCustom<CoinHistory>(list, totalCount, page, size, list_param);
			return pageCustom;
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return null;
	}

	@Override
	public Page<PaymentHistoryEntity> filterRecharge(Date startTime, Date endTime, String[] os, Short[] payment, Short[] status,
			String type, String key, Integer page, Integer size) {

		Specification<PaymentHistoryEntity> spec = new Specification<PaymentHistoryEntity>() {
			@Override
			public Predicate toPredicate(Root<PaymentHistoryEntity> root, CriteriaQuery<?> query, CriteriaBuilder cb) {
				try {
					
				
				List<Predicate> predicates = new ArrayList<>();
				Predicate predicate1 = cb.equal(root.get("typeCoin"), 1);
				Predicate predicate2 = cb.equal(root.get("typePayment"), 1);
				Predicate predicate3 = cb.equal(root.get("category").get("id"), ApplicationDefine.Recharge_TypeUse.NormalCharging.getCode());
				predicates.add(predicate1);
				predicates.add(predicate2);
				predicates.add(predicate3);
				if (startTime != null) {
					predicates.add(cb.greaterThanOrEqualTo(root.get("createDate"), startTime));
				}
				
				if (endTime != null) {
					predicates.add(cb.lessThanOrEqualTo(root.get("createDate"), endTime));
				}
				
				if (os.length == 1) {
					Predicate predicate = cb.isTrue(root.get("osName").in(os));
					predicates.add(predicate);
				} 
				
				if (payment.length > 0 ) {
					Predicate predicate = cb.isTrue(root.get("category2").get("id").in(payment));
					predicates.add(predicate);
				} 

				if (status.length >0 ) {
					Predicate predicate = cb.isTrue(root.get("status").in(status));
					predicates.add(predicate);
				}else {
					Short[] status_default = new Short[2]; 
					status_default[0] = ApplicationDefine.Payment_Status.PaymentSuccess.getCode();
					status_default[1] = ApplicationDefine.Payment_Status.Cancel.getCode();
					Predicate predicate = cb.isTrue(root.get("status").in(status_default));
					predicates.add(predicate);
				}
				
				if (key != "" && key != null) {
					if (type.equals("userName")) {
						Predicate predicate = cb.like(root.get("user").get("fullname"), key);
						predicates.add(predicate);
					} else if (type.equals("paymentMethodName")) {
						Predicate predicate = cb.like(root.get("category2").get("categoryName"), key);
						predicates.add(predicate);
					}
				}
				
				return cb.and(predicates.toArray(new Predicate[] {}));
				} catch (Exception e) {
					e.printStackTrace();
					return null;
				}
			}

		};
		
		Order oder = new Order(Direction.DESC, "createDate");
		PageRequest pageable = new PageRequest(page - 1, size, new Sort(oder));
		return paymentHistoryJpaRepository.findAll(spec, pageable);
	}
	
	@Override
	public Page<PaymentHistoryEntity> listPagingByUserId(Integer userId, Integer typePayment, Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return paymentHistoryJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Integer totallistPagingByUserId(Integer userId) {
		try {
			return paymentHistoryJpaRepository.totallistPagingByUserId(userId);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Page<PaymentHistoryEntity> listPagingByUserId(Integer userId, Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return paymentHistoryJpaRepository.listPagingByUserId(userId, pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public PaymentHistory getBy_Tid(String tid) {
		try {
			PaymentHistoryEntity paymentHistoryEntity = paymentHistoryJpaRepository.getBy_Tid(tid);
			return paymentHistoryServiceMapper.mapPaymentHistoryEntityToPaymentHistory(paymentHistoryEntity);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Page<PaymentHistoryEntity> listPagingByUserIdAndTypeCoin(Integer userId, Short typeCoin, Integer page,
			Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return paymentHistoryJpaRepository.listPagingByUserIdAndTypeCoin(userId, typeCoin, pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Integer counShareBy_TypeShare(Integer userId, Integer typeUse, String type, Date now) {
		try {
			return paymentHistoryJpaRepository.counShareBy_TypeShare(userId, typeUse, type, now);
		} catch (Exception e) {
			return 0;
		}
	}


}
