/*
 * Created on 22 Mar 2017 ( Time 15:53:27 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import org.trams.hello.bean.SelfDiagnosisAnswer;
import org.trams.hello.bean.jpa.SelfDiagnosisAnswerEntity;
import org.trams.hello.business.service.SelfDiagnosisAnswerService;
import org.trams.hello.business.service.mapping.SelfDiagnosisAnswerServiceMapper;
import org.trams.hello.data.repository.jpa.SelfDiagnosisAnswerJpaRepository;
/**
 * Implementation of SelfDiagnosisAnswerService
 */
@Component
@Transactional
public class SelfDiagnosisAnswerServiceImpl implements SelfDiagnosisAnswerService {

	@Resource
	private SelfDiagnosisAnswerJpaRepository selfDiagnosisAnswerJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private SelfDiagnosisAnswerServiceMapper selfDiagnosisAnswerServiceMapper;
	
	@Override
	public SelfDiagnosisAnswer findById(Integer id) {
		SelfDiagnosisAnswerEntity selfDiagnosisAnswerEntity = selfDiagnosisAnswerJpaRepository.findOne(id);
		return selfDiagnosisAnswerServiceMapper.mapSelfDiagnosisAnswerEntityToSelfDiagnosisAnswer(selfDiagnosisAnswerEntity);
	}

	@Override
	public Page<SelfDiagnosisAnswerEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return selfDiagnosisAnswerJpaRepository.findAll(request);
	}

	@Override
	public List<SelfDiagnosisAnswer> findAll() {
		Iterable<SelfDiagnosisAnswerEntity> entities = selfDiagnosisAnswerJpaRepository.findAll();
		List<SelfDiagnosisAnswer> beans = new ArrayList<SelfDiagnosisAnswer>();
		for(SelfDiagnosisAnswerEntity selfDiagnosisAnswerEntity : entities) {
			beans.add(selfDiagnosisAnswerServiceMapper.mapSelfDiagnosisAnswerEntityToSelfDiagnosisAnswer(selfDiagnosisAnswerEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = selfDiagnosisAnswerJpaRepository.count();
		return count;
	}

	@Override
	public SelfDiagnosisAnswer save(SelfDiagnosisAnswer selfDiagnosisAnswer) {
		return update(selfDiagnosisAnswer) ;
	}

	@Override
	public SelfDiagnosisAnswer create(SelfDiagnosisAnswer selfDiagnosisAnswer) {
/*
		SelfDiagnosisAnswerEntity selfDiagnosisAnswerEntity = selfDiagnosisAnswerJpaRepository.findOne(selfDiagnosisAnswer.getId());
		if( selfDiagnosisAnswerEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		selfDiagnosisAnswerEntity = new SelfDiagnosisAnswerEntity();
		selfDiagnosisAnswerServiceMapper.mapSelfDiagnosisAnswerToSelfDiagnosisAnswerEntity(selfDiagnosisAnswer, selfDiagnosisAnswerEntity);
		SelfDiagnosisAnswerEntity selfDiagnosisAnswerEntitySaved = selfDiagnosisAnswerJpaRepository.save(selfDiagnosisAnswerEntity);
		return selfDiagnosisAnswerServiceMapper.mapSelfDiagnosisAnswerEntityToSelfDiagnosisAnswer(selfDiagnosisAnswerEntitySaved);
*/
		SelfDiagnosisAnswerEntity selfDiagnosisAnswerEntity = new SelfDiagnosisAnswerEntity();
		selfDiagnosisAnswerServiceMapper.mapSelfDiagnosisAnswerToSelfDiagnosisAnswerEntity(selfDiagnosisAnswer, selfDiagnosisAnswerEntity);
		SelfDiagnosisAnswerEntity selfDiagnosisAnswerEntitySaved = selfDiagnosisAnswerJpaRepository.save(selfDiagnosisAnswerEntity);
		return selfDiagnosisAnswerServiceMapper.mapSelfDiagnosisAnswerEntityToSelfDiagnosisAnswer(selfDiagnosisAnswerEntitySaved);
	}

	@Override
	public SelfDiagnosisAnswer update(SelfDiagnosisAnswer selfDiagnosisAnswer) {
		SelfDiagnosisAnswerEntity selfDiagnosisAnswerEntity = selfDiagnosisAnswerJpaRepository.findOne(selfDiagnosisAnswer.getId());
		selfDiagnosisAnswerServiceMapper.mapSelfDiagnosisAnswerToSelfDiagnosisAnswerEntity(selfDiagnosisAnswer, selfDiagnosisAnswerEntity);
		SelfDiagnosisAnswerEntity selfDiagnosisAnswerEntitySaved = selfDiagnosisAnswerJpaRepository.save(selfDiagnosisAnswerEntity);
		return selfDiagnosisAnswerServiceMapper.mapSelfDiagnosisAnswerEntityToSelfDiagnosisAnswer(selfDiagnosisAnswerEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		selfDiagnosisAnswerJpaRepository.delete(id);
	}

	public SelfDiagnosisAnswerJpaRepository getSelfDiagnosisAnswerJpaRepository() {
		return selfDiagnosisAnswerJpaRepository;
	}

	public void setSelfDiagnosisAnswerJpaRepository(SelfDiagnosisAnswerJpaRepository selfDiagnosisAnswerJpaRepository) {
		this.selfDiagnosisAnswerJpaRepository = selfDiagnosisAnswerJpaRepository;
	}

	public SelfDiagnosisAnswerServiceMapper getSelfDiagnosisAnswerServiceMapper() {
		return selfDiagnosisAnswerServiceMapper;
	}

	public void setSelfDiagnosisAnswerServiceMapper(SelfDiagnosisAnswerServiceMapper selfDiagnosisAnswerServiceMapper) {
		this.selfDiagnosisAnswerServiceMapper = selfDiagnosisAnswerServiceMapper;
	}

	@Override
	public Page<SelfDiagnosisAnswerEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return selfDiagnosisAnswerJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public List<SelfDiagnosisAnswer> listBySelfDiagnosisField(Integer selfDiagnosisField) {
		List<SelfDiagnosisAnswerEntity> results = selfDiagnosisAnswerJpaRepository.listBySelfDiagnosisField(selfDiagnosisField);
		List<SelfDiagnosisAnswer> beans = new ArrayList<>();
		for (SelfDiagnosisAnswerEntity selfDiagnosisAnswerEntity : results) {
			beans.add(selfDiagnosisAnswerServiceMapper.mapSelfDiagnosisAnswerEntityToSelfDiagnosisAnswer(selfDiagnosisAnswerEntity));
		}
		return beans;
	}
	
	


}
