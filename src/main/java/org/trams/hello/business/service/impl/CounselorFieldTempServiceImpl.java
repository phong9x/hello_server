/*
 * Created on 29 Apr 2017 ( Time 11:01:44 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import org.trams.hello.bean.CounselorFieldTemp;
import org.trams.hello.bean.jpa.CounselorFieldTempEntity;
import org.trams.hello.bean.jpa.CounselorFieldTempEntityKey;
import org.trams.hello.business.service.CounselorFieldTempService;
import org.trams.hello.business.service.mapping.CounselorFieldTempServiceMapper;
import org.trams.hello.data.repository.jpa.CounselorFieldTempJpaRepository;
/**
 * Implementation of CounselorFieldTempService
 */
@Component
@Transactional
public class CounselorFieldTempServiceImpl implements CounselorFieldTempService {

	@Resource
	private CounselorFieldTempJpaRepository counselorFieldTempJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private CounselorFieldTempServiceMapper counselorFieldTempServiceMapper;
	
	@Override
	public CounselorFieldTemp findById(Integer counselorTempId, Integer counselorFieldId) {
		CounselorFieldTempEntityKey id = new CounselorFieldTempEntityKey(counselorTempId, counselorFieldId);
		CounselorFieldTempEntity counselorFieldTempEntity = counselorFieldTempJpaRepository.findOne(id);
		return counselorFieldTempServiceMapper.mapCounselorFieldTempEntityToCounselorFieldTemp(counselorFieldTempEntity);
	}

	@Override
	public Page<CounselorFieldTempEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "counselorTempId, counselorFieldId")));
		return counselorFieldTempJpaRepository.findAll(request);
	}

	@Override
	public List<CounselorFieldTemp> findAll() {
		Iterable<CounselorFieldTempEntity> entities = counselorFieldTempJpaRepository.findAll();
		List<CounselorFieldTemp> beans = new ArrayList<CounselorFieldTemp>();
		for(CounselorFieldTempEntity counselorFieldTempEntity : entities) {
			beans.add(counselorFieldTempServiceMapper.mapCounselorFieldTempEntityToCounselorFieldTemp(counselorFieldTempEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = counselorFieldTempJpaRepository.count();
		return count;
	}

	@Override
	public CounselorFieldTemp save(CounselorFieldTemp counselorFieldTemp) {
		return update(counselorFieldTemp) ;
	}

	@Override
	public CounselorFieldTemp create(CounselorFieldTemp counselorFieldTemp) {
/*
		CounselorFieldTempEntityKey id = new CounselorFieldTempEntityKey(counselorFieldTemp.getCounselorTempId(), counselorFieldTemp.getCounselorFieldId());
		CounselorFieldTempEntity counselorFieldTempEntity = counselorFieldTempJpaRepository.findOne(id);
		if( counselorFieldTempEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		counselorFieldTempEntity = new CounselorFieldTempEntity();
		counselorFieldTempServiceMapper.mapCounselorFieldTempToCounselorFieldTempEntity(counselorFieldTemp, counselorFieldTempEntity);
		CounselorFieldTempEntity counselorFieldTempEntitySaved = counselorFieldTempJpaRepository.save(counselorFieldTempEntity);
		return counselorFieldTempServiceMapper.mapCounselorFieldTempEntityToCounselorFieldTemp(counselorFieldTempEntitySaved);
*/
		CounselorFieldTempEntity counselorFieldTempEntity = new CounselorFieldTempEntity();
		counselorFieldTempServiceMapper.mapCounselorFieldTempToCounselorFieldTempEntity(counselorFieldTemp, counselorFieldTempEntity);
		CounselorFieldTempEntity counselorFieldTempEntitySaved = counselorFieldTempJpaRepository.save(counselorFieldTempEntity);
		return counselorFieldTempServiceMapper.mapCounselorFieldTempEntityToCounselorFieldTemp(counselorFieldTempEntitySaved);
	}

	@Override
	public CounselorFieldTemp update(CounselorFieldTemp counselorFieldTemp) {
		CounselorFieldTempEntityKey id = new CounselorFieldTempEntityKey(counselorFieldTemp.getCounselorTempId(), counselorFieldTemp.getCounselorFieldId());
		CounselorFieldTempEntity counselorFieldTempEntity = counselorFieldTempJpaRepository.findOne(id);
		counselorFieldTempServiceMapper.mapCounselorFieldTempToCounselorFieldTempEntity(counselorFieldTemp, counselorFieldTempEntity);
		CounselorFieldTempEntity counselorFieldTempEntitySaved = counselorFieldTempJpaRepository.save(counselorFieldTempEntity);
		return counselorFieldTempServiceMapper.mapCounselorFieldTempEntityToCounselorFieldTemp(counselorFieldTempEntitySaved);
	}

	@Override
	public void delete(Integer counselorTempId, Integer counselorFieldId) {
		CounselorFieldTempEntityKey id = new CounselorFieldTempEntityKey(counselorTempId, counselorFieldId);
		counselorFieldTempJpaRepository.delete(id);
	}

	public CounselorFieldTempJpaRepository getCounselorFieldTempJpaRepository() {
		return counselorFieldTempJpaRepository;
	}

	public void setCounselorFieldTempJpaRepository(CounselorFieldTempJpaRepository counselorFieldTempJpaRepository) {
		this.counselorFieldTempJpaRepository = counselorFieldTempJpaRepository;
	}

	public CounselorFieldTempServiceMapper getCounselorFieldTempServiceMapper() {
		return counselorFieldTempServiceMapper;
	}

	public void setCounselorFieldTempServiceMapper(CounselorFieldTempServiceMapper counselorFieldTempServiceMapper) {
		this.counselorFieldTempServiceMapper = counselorFieldTempServiceMapper;
	}

	@Override
	public Page<CounselorFieldTempEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return counselorFieldTempJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public List<Object> getCategoryNameBy_CouselorId(Integer counselorId) {
		try {
			 return  counselorFieldTempJpaRepository.getCategoryNameBy_CouselorId(counselorId);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public List<CounselorFieldTempEntity> listPagingByCounselorTempId(Integer counselorTempId) {
		try {
			 return  counselorFieldTempJpaRepository.listPagingByCounselorTempId(counselorTempId);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public void deleteBycounselorTempId(Integer counselorTempId) {
		try {
			   counselorFieldTempJpaRepository.deleteBycounselorTempId(counselorTempId);
		} catch (Exception e) {
			e.printStackTrace();
		
		}
		
	}
	
	


}
