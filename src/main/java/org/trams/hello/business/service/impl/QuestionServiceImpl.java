/*
 * Created on 23 thg 11 2016 ( Time 13:38:13 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import org.trams.hello.bean.Question;
import org.trams.hello.bean.jpa.QuestionEntity;
import org.trams.hello.business.service.QuestionService;
import org.trams.hello.business.service.mapping.QuestionServiceMapper;
import org.trams.hello.data.repository.jpa.QuestionJpaRepository;
/**
 * Implementation of QuestionService
 */
@Component
@Transactional
public class QuestionServiceImpl implements QuestionService {

	@Resource
	private QuestionJpaRepository questionJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private QuestionServiceMapper questionServiceMapper;
	
	@Override
	public Question findById(Integer id) {
		QuestionEntity questionEntity = questionJpaRepository.findOne(id);
		return questionServiceMapper.mapQuestionEntityToQuestion(questionEntity);
	}

	@Override
	public Page<QuestionEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return questionJpaRepository.findAll(request);
	}

	@Override
	public List<Question> findAll() {
		Iterable<QuestionEntity> entities = questionJpaRepository.findAll();
		List<Question> beans = new ArrayList<Question>();
		for(QuestionEntity questionEntity : entities) {
			beans.add(questionServiceMapper.mapQuestionEntityToQuestion(questionEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = questionJpaRepository.count();
		return count;
	}

	@Override
	public Question save(Question question) {
		return update(question) ;
	}

	@Override
	public Question create(Question question) {
/*
		QuestionEntity questionEntity = questionJpaRepository.findOne(question.getId());
		if( questionEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		questionEntity = new QuestionEntity();
		questionServiceMapper.mapQuestionToQuestionEntity(question, questionEntity);
		QuestionEntity questionEntitySaved = questionJpaRepository.save(questionEntity);
		return questionServiceMapper.mapQuestionEntityToQuestion(questionEntitySaved);
*/
		QuestionEntity questionEntity = new QuestionEntity();
		questionServiceMapper.mapQuestionToQuestionEntity(question, questionEntity);
		QuestionEntity questionEntitySaved = questionJpaRepository.save(questionEntity);
		return questionServiceMapper.mapQuestionEntityToQuestion(questionEntitySaved);
	}

	@Override
	public Question update(Question question) {
		QuestionEntity questionEntity = questionJpaRepository.findOne(question.getId());
		questionServiceMapper.mapQuestionToQuestionEntity(question, questionEntity);
		QuestionEntity questionEntitySaved = questionJpaRepository.save(questionEntity);
		return questionServiceMapper.mapQuestionEntityToQuestion(questionEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		questionJpaRepository.delete(id);
	}

	public QuestionJpaRepository getQuestionJpaRepository() {
		return questionJpaRepository;
	}

	public void setQuestionJpaRepository(QuestionJpaRepository questionJpaRepository) {
		this.questionJpaRepository = questionJpaRepository;
	}

	public QuestionServiceMapper getQuestionServiceMapper() {
		return questionServiceMapper;
	}

	public void setQuestionServiceMapper(QuestionServiceMapper questionServiceMapper) {
		this.questionServiceMapper = questionServiceMapper;
	}

	@Override
	public Page<QuestionEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return questionJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}
	
	@Override
	public List<Question> listQuestionByIsShowQsn(Short questionnaireType) {
		List<QuestionEntity> entities = questionJpaRepository.listQuestionByIsShowQsn(questionnaireType);
		List<Question> list = new ArrayList<>();
		for (QuestionEntity questionEntity : entities) {
			list.add(questionServiceMapper.mapQuestionEntityToQuestion(questionEntity));
		}
		return list;
	}
	
	@Override
	public List<Question> listQuestionStressSelfDiagnosisByIsShowQsn(Short questionnaireType, Integer selfDiagnosisField){
		List<QuestionEntity> entities = questionJpaRepository.listQuestionStressSelfDiagnosisByIsShowQsn(questionnaireType, selfDiagnosisField);
		List<Question> list = new ArrayList<>();
		for (QuestionEntity questionEntity : entities) {
			list.add(questionServiceMapper.mapQuestionEntityToQuestion(questionEntity));
		}
		return list;
	}

	@Override
	public List<QuestionEntity> listQuestionBy_QuestionId(Integer questionnaireId) {
		try {
			return questionJpaRepository.listQuestionBy_QuestionId(questionnaireId);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public void updateIsDeleteByQuestionaireId(Integer questionaireId) {
		try {
			questionJpaRepository.updateIsDeleteByQuestionaireId(questionaireId);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
