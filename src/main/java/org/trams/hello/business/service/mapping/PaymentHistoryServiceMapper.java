/*
 * Created on 14 Apr 2017 ( Time 15:35:16 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.business.service.mapping;

import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import org.trams.hello.bean.PaymentHistory;
import org.trams.hello.bean.jpa.CategoryEntity;
import org.trams.hello.bean.jpa.PaymentHistoryEntity;
import org.trams.hello.bean.jpa.UserEntity;
import org.trams.hello.bean.jpa.VoucherUserEntity;

/**
 * Mapping between entity beans and display beans.
 */
@Component
public class PaymentHistoryServiceMapper extends AbstractServiceMapper {

	/**
	 * ModelMapper : bean to bean mapping library.
	 */
	private ModelMapper modelMapper;
	
	/**
	 * Constructor.
	 */
	public PaymentHistoryServiceMapper() {
		modelMapper = new ModelMapper();
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}

	/**
	 * Mapping from 'PaymentHistoryEntity' to 'PaymentHistory'
	 * @param paymentHistoryEntity
	 */
	public PaymentHistory mapPaymentHistoryEntityToPaymentHistory(PaymentHistoryEntity paymentHistoryEntity) {
		if(paymentHistoryEntity == null) {
			return null;
		}

		//--- Generic mapping 
		PaymentHistory paymentHistory = map(paymentHistoryEntity, PaymentHistory.class);

		//--- Link mapping ( link to User )
		if(paymentHistoryEntity.getUser() != null) {
			paymentHistory.setUserId(paymentHistoryEntity.getUser().getId());
		}
		//--- Link mapping ( link to Category )
		if(paymentHistoryEntity.getCategory() != null) {
			paymentHistory.setTypeUse(paymentHistoryEntity.getCategory().getId());
		}
		//--- Link mapping ( link to VoucherUser )
		if(paymentHistoryEntity.getVoucherUser() != null) {
			paymentHistory.setVoucherUserId(paymentHistoryEntity.getVoucherUser().getId());
		}
		//--- Link mapping ( link to Category )
		if(paymentHistoryEntity.getCategory2() != null) {
			paymentHistory.setPaymentMethodId(paymentHistoryEntity.getCategory2().getId());
		}
		return paymentHistory;
	}
	
	/**
	 * Mapping from 'PaymentHistory' to 'PaymentHistoryEntity'
	 * @param paymentHistory
	 * @param paymentHistoryEntity
	 */
	public void mapPaymentHistoryToPaymentHistoryEntity(PaymentHistory paymentHistory, PaymentHistoryEntity paymentHistoryEntity) {
		if(paymentHistory == null) {
			return;
		}

		//--- Generic mapping 
		map(paymentHistory, paymentHistoryEntity);

		//--- Link mapping ( link : paymentHistory )
		if( hasLinkToUser(paymentHistory) ) {
			UserEntity user1 = new UserEntity();
			user1.setId( paymentHistory.getUserId() );
			paymentHistoryEntity.setUser( user1 );
		} else {
			paymentHistoryEntity.setUser( null );
		}

		//--- Link mapping ( link : paymentHistory )
		if( hasLinkToCategory1(paymentHistory) ) {
			CategoryEntity category2 = new CategoryEntity();
			category2.setId( paymentHistory.getTypeUse() );
			paymentHistoryEntity.setCategory( category2 );
		} else {
			paymentHistoryEntity.setCategory( null );
		}

		//--- Link mapping ( link : paymentHistory )
		if( hasLinkToVoucherUser(paymentHistory) ) {
			VoucherUserEntity voucherUser3 = new VoucherUserEntity();
			voucherUser3.setId( paymentHistory.getVoucherUserId() );
			paymentHistoryEntity.setVoucherUser( voucherUser3 );
		} else {
			paymentHistoryEntity.setVoucherUser( null );
		}

		//--- Link mapping ( link : paymentHistory )
		if( hasLinkToCategory2(paymentHistory) ) {
			CategoryEntity category4 = new CategoryEntity();
			category4.setId( paymentHistory.getPaymentMethodId() );
			paymentHistoryEntity.setCategory2( category4 );
		} else {
			paymentHistoryEntity.setCategory2( null );
		}

	}
	
	/**
	 * Verify that User id is valid.
	 * @param User User
	 * @return boolean
	 */
	private boolean hasLinkToUser(PaymentHistory paymentHistory) {
		if(paymentHistory.getUserId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that Category id is valid.
	 * @param Category Category
	 * @return boolean
	 */
	private boolean hasLinkToCategory1(PaymentHistory paymentHistory) {
		if(paymentHistory.getTypeUse() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that VoucherUser id is valid.
	 * @param VoucherUser VoucherUser
	 * @return boolean
	 */
	private boolean hasLinkToVoucherUser(PaymentHistory paymentHistory) {
		if(paymentHistory.getVoucherUserId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that Category id is valid.
	 * @param Category Category
	 * @return boolean
	 */
	private boolean hasLinkToCategory2(PaymentHistory paymentHistory) {
		if(paymentHistory.getPaymentMethodId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected ModelMapper getModelMapper() {
		return modelMapper;
	}

	protected void setModelMapper(ModelMapper modelMapper) {
		this.modelMapper = modelMapper;
	}

}