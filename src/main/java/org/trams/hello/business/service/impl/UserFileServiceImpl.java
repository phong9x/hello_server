/*
 * Created on 6 thg 1 2017 ( Time 17:05:04 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import org.trams.hello.bean.UserFile;
import org.trams.hello.bean.jpa.UserFileEntity;
import org.trams.hello.business.service.UserFileService;
import org.trams.hello.business.service.mapping.UserFileServiceMapper;
import org.trams.hello.data.repository.jpa.UserFileJpaRepository;
/**
 * Implementation of UserFileService
 */
@Component
@Transactional
public class UserFileServiceImpl implements UserFileService {

	@Resource
	private UserFileJpaRepository userFileJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private UserFileServiceMapper userFileServiceMapper;
	
	@Override
	public UserFile findById(Integer id) {
		UserFileEntity userFileEntity = userFileJpaRepository.findOne(id);
		return userFileServiceMapper.mapUserFileEntityToUserFile(userFileEntity);
	}

	@Override
	public Page<UserFileEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return userFileJpaRepository.findAll(request);
	}

	@Override
	public List<UserFile> findAll() {
		Iterable<UserFileEntity> entities = userFileJpaRepository.findAll();
		List<UserFile> beans = new ArrayList<UserFile>();
		for(UserFileEntity userFileEntity : entities) {
			beans.add(userFileServiceMapper.mapUserFileEntityToUserFile(userFileEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = userFileJpaRepository.count();
		return count;
	}

	@Override
	public UserFile save(UserFile userFile) {
		return update(userFile) ;
	}

	@Override
	public UserFile create(UserFile userFile) {
/*
		UserFileEntity userFileEntity = userFileJpaRepository.findOne(userFile.getId());
		if( userFileEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		userFileEntity = new UserFileEntity();
		userFileServiceMapper.mapUserFileToUserFileEntity(userFile, userFileEntity);
		UserFileEntity userFileEntitySaved = userFileJpaRepository.save(userFileEntity);
		return userFileServiceMapper.mapUserFileEntityToUserFile(userFileEntitySaved);
*/
		UserFileEntity userFileEntity = new UserFileEntity();
		userFileServiceMapper.mapUserFileToUserFileEntity(userFile, userFileEntity);
		UserFileEntity userFileEntitySaved = userFileJpaRepository.save(userFileEntity);
		return userFileServiceMapper.mapUserFileEntityToUserFile(userFileEntitySaved);
	}

	@Override
	public UserFile update(UserFile userFile) {
		UserFileEntity userFileEntity = userFileJpaRepository.findOne(userFile.getId());
		userFileServiceMapper.mapUserFileToUserFileEntity(userFile, userFileEntity);
		UserFileEntity userFileEntitySaved = userFileJpaRepository.save(userFileEntity);
		return userFileServiceMapper.mapUserFileEntityToUserFile(userFileEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		userFileJpaRepository.delete(id);
	}

	public UserFileJpaRepository getUserFileJpaRepository() {
		return userFileJpaRepository;
	}

	public void setUserFileJpaRepository(UserFileJpaRepository userFileJpaRepository) {
		this.userFileJpaRepository = userFileJpaRepository;
	}

	public UserFileServiceMapper getUserFileServiceMapper() {
		return userFileServiceMapper;
	}

	public void setUserFileServiceMapper(UserFileServiceMapper userFileServiceMapper) {
		this.userFileServiceMapper = userFileServiceMapper;
	}

	@Override
	public Page<UserFileEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return userFileJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	

	@Override
	public Page<UserFileEntity> listPagingByUserId(Integer page, Integer size, Integer userId) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return userFileJpaRepository.listPagingByUserId(userId, pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public List<UserFileEntity> listPagingByTypeAndUserId(Short type, Integer userId) {
		try {
			PageRequest pageable = new PageRequest(0, Integer.MAX_VALUE, new Sort(new Order(Direction.DESC, "createDate")));
			return userFileJpaRepository.listPagingByTypeAndUserId(type, userId, pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public void deleteByUserId(Integer id, Short type) {
		userFileJpaRepository.deleteByUserIdAndType(id, type);
	}

}
