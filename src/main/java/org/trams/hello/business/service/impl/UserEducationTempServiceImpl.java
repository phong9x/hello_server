/*
 * Created on 29 Apr 2017 ( Time 10:20:18 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import org.trams.hello.bean.UserEducationTemp;
import org.trams.hello.bean.jpa.UserEducationTempEntity;
import org.trams.hello.business.service.UserEducationTempService;
import org.trams.hello.business.service.mapping.UserEducationTempServiceMapper;
import org.trams.hello.data.repository.jpa.UserEducationTempJpaRepository;
/**
 * Implementation of UserEducationTempService
 */
@Component
@Transactional
public class UserEducationTempServiceImpl implements UserEducationTempService {

	@Resource
	private UserEducationTempJpaRepository userEducationTempJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private UserEducationTempServiceMapper userEducationTempServiceMapper;
	
	@Override
	public UserEducationTemp findById(Integer id) {
		UserEducationTempEntity userEducationTempEntity = userEducationTempJpaRepository.findOne(id);
		return userEducationTempServiceMapper.mapUserEducationTempEntityToUserEducationTemp(userEducationTempEntity);
	}

	@Override
	public Page<UserEducationTempEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return userEducationTempJpaRepository.findAll(request);
	}

	@Override
	public List<UserEducationTemp> findAll() {
		Iterable<UserEducationTempEntity> entities = userEducationTempJpaRepository.findAll();
		List<UserEducationTemp> beans = new ArrayList<UserEducationTemp>();
		for(UserEducationTempEntity userEducationTempEntity : entities) {
			beans.add(userEducationTempServiceMapper.mapUserEducationTempEntityToUserEducationTemp(userEducationTempEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = userEducationTempJpaRepository.count();
		return count;
	}

	@Override
	public UserEducationTemp save(UserEducationTemp userEducationTemp) {
		return update(userEducationTemp) ;
	}

	@Override
	public UserEducationTemp create(UserEducationTemp userEducationTemp) {
/*
		UserEducationTempEntity userEducationTempEntity = userEducationTempJpaRepository.findOne(userEducationTemp.getId());
		if( userEducationTempEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		userEducationTempEntity = new UserEducationTempEntity();
		userEducationTempServiceMapper.mapUserEducationTempToUserEducationTempEntity(userEducationTemp, userEducationTempEntity);
		UserEducationTempEntity userEducationTempEntitySaved = userEducationTempJpaRepository.save(userEducationTempEntity);
		return userEducationTempServiceMapper.mapUserEducationTempEntityToUserEducationTemp(userEducationTempEntitySaved);
*/
		UserEducationTempEntity userEducationTempEntity = new UserEducationTempEntity();
		userEducationTempServiceMapper.mapUserEducationTempToUserEducationTempEntity(userEducationTemp, userEducationTempEntity);
		UserEducationTempEntity userEducationTempEntitySaved = userEducationTempJpaRepository.save(userEducationTempEntity);
		return userEducationTempServiceMapper.mapUserEducationTempEntityToUserEducationTemp(userEducationTempEntitySaved);
	}

	@Override
	public UserEducationTemp update(UserEducationTemp userEducationTemp) {
		UserEducationTempEntity userEducationTempEntity = userEducationTempJpaRepository.findOne(userEducationTemp.getId());
		userEducationTempServiceMapper.mapUserEducationTempToUserEducationTempEntity(userEducationTemp, userEducationTempEntity);
		UserEducationTempEntity userEducationTempEntitySaved = userEducationTempJpaRepository.save(userEducationTempEntity);
		return userEducationTempServiceMapper.mapUserEducationTempEntityToUserEducationTemp(userEducationTempEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		userEducationTempJpaRepository.delete(id);
	}

	public UserEducationTempJpaRepository getUserEducationTempJpaRepository() {
		return userEducationTempJpaRepository;
	}

	public void setUserEducationTempJpaRepository(UserEducationTempJpaRepository userEducationTempJpaRepository) {
		this.userEducationTempJpaRepository = userEducationTempJpaRepository;
	}

	public UserEducationTempServiceMapper getUserEducationTempServiceMapper() {
		return userEducationTempServiceMapper;
	}

	public void setUserEducationTempServiceMapper(UserEducationTempServiceMapper userEducationTempServiceMapper) {
		this.userEducationTempServiceMapper = userEducationTempServiceMapper;
	}

	@Override
	public Page<UserEducationTempEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return userEducationTempJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	

	@Override
	public Page<UserEducationTempEntity> listPagingByUserId(Integer page, Integer size, Integer userId) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return userEducationTempJpaRepository.listPagingByUserId(userId, pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public List<UserEducationTempEntity> listByUserId(Integer userId) {
		try {
			return userEducationTempJpaRepository.listByUserId(userId);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public void deleteByCounselorTempId(Integer counselorTempId) {
		try {
			 userEducationTempJpaRepository.deleteByCounselorTempId(counselorTempId);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

}
