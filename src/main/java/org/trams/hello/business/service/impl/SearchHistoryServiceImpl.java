/*
 * Created on 22 Jun 2017 ( Time 15:38:09 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;
import javax.persistence.EntityManager;
import javax.persistence.Query;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import org.trams.hello.bean.CounselorRanking;
import org.trams.hello.bean.PageCustom;
import org.trams.hello.bean.SearchHistory;
import org.trams.hello.bean.jpa.SearchHistoryEntity;
import org.trams.hello.business.service.SearchHistoryService;
import org.trams.hello.business.service.mapping.SearchHistoryServiceMapper;
import org.trams.hello.data.repository.jpa.SearchHistoryJpaRepository;
import org.trams.hello.web.bean.search.SearchStatistics;
/**
 * Implementation of SearchHistoryService
 */
@Component
@Transactional
public class SearchHistoryServiceImpl implements SearchHistoryService {

	@Resource
	private SearchHistoryJpaRepository searchHistoryJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private SearchHistoryServiceMapper searchHistoryServiceMapper;
	
	@Resource
	private EntityManager em;
	
	@Override
	public SearchHistory findById(Long id) {
		SearchHistoryEntity searchHistoryEntity = searchHistoryJpaRepository.findOne(id);
		return searchHistoryServiceMapper.mapSearchHistoryEntityToSearchHistory(searchHistoryEntity);
	}

	@Override
	public Page<SearchHistoryEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return searchHistoryJpaRepository.findAll(request);
	}

	@Override
	public List<SearchHistory> findAll() {
		Iterable<SearchHistoryEntity> entities = searchHistoryJpaRepository.findAll();
		List<SearchHistory> beans = new ArrayList<SearchHistory>();
		for(SearchHistoryEntity searchHistoryEntity : entities) {
			beans.add(searchHistoryServiceMapper.mapSearchHistoryEntityToSearchHistory(searchHistoryEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = searchHistoryJpaRepository.count();
		return count;
	}

	@Override
	public SearchHistory save(SearchHistory searchHistory) {
		return update(searchHistory) ;
	}

	@Override
	public SearchHistory create(SearchHistory searchHistory) {
/*
		SearchHistoryEntity searchHistoryEntity = searchHistoryJpaRepository.findOne(searchHistory.getId());
		if( searchHistoryEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		searchHistoryEntity = new SearchHistoryEntity();
		searchHistoryServiceMapper.mapSearchHistoryToSearchHistoryEntity(searchHistory, searchHistoryEntity);
		SearchHistoryEntity searchHistoryEntitySaved = searchHistoryJpaRepository.save(searchHistoryEntity);
		return searchHistoryServiceMapper.mapSearchHistoryEntityToSearchHistory(searchHistoryEntitySaved);
*/
		SearchHistoryEntity searchHistoryEntity = new SearchHistoryEntity();
		searchHistoryServiceMapper.mapSearchHistoryToSearchHistoryEntity(searchHistory, searchHistoryEntity);
		SearchHistoryEntity searchHistoryEntitySaved = searchHistoryJpaRepository.save(searchHistoryEntity);
		return searchHistoryServiceMapper.mapSearchHistoryEntityToSearchHistory(searchHistoryEntitySaved);
	}

	@Override
	public SearchHistory update(SearchHistory searchHistory) {
		SearchHistoryEntity searchHistoryEntity = searchHistoryJpaRepository.findOne(searchHistory.getId());
		searchHistoryServiceMapper.mapSearchHistoryToSearchHistoryEntity(searchHistory, searchHistoryEntity);
		SearchHistoryEntity searchHistoryEntitySaved = searchHistoryJpaRepository.save(searchHistoryEntity);
		return searchHistoryServiceMapper.mapSearchHistoryEntityToSearchHistory(searchHistoryEntitySaved);
	}

	@Override
	public void delete(Long id) {
		searchHistoryJpaRepository.delete(id);
	}

	public SearchHistoryJpaRepository getSearchHistoryJpaRepository() {
		return searchHistoryJpaRepository;
	}

	public void setSearchHistoryJpaRepository(SearchHistoryJpaRepository searchHistoryJpaRepository) {
		this.searchHistoryJpaRepository = searchHistoryJpaRepository;
	}

	public SearchHistoryServiceMapper getSearchHistoryServiceMapper() {
		return searchHistoryServiceMapper;
	}

	public void setSearchHistoryServiceMapper(SearchHistoryServiceMapper searchHistoryServiceMapper) {
		this.searchHistoryServiceMapper = searchHistoryServiceMapper;
	}

	@Override
	public Page<SearchHistoryEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return searchHistoryJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	

	@Override
	public Page<SearchHistoryEntity> listPagingByUserId(Integer page, Integer size, Integer userId) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return searchHistoryJpaRepository.listPagingByUserId(userId, pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	@Override
	public PageCustom<SearchHistory> filterStatistics(SearchStatistics s) {
		try {
			String WHERE="";
			if(s.getStartDate() != null){
				WHERE =" AND DATE(s.create_date) >= '"+s.getStartDate()+"' ";
			}
			
			if(s.getEndDate() != null){
				WHERE +=" AND DATE(s.create_date) <= '"+s.getEndDate()+"' ";
			}
			
			String SELECT = "SELECT s.keyword, COUNT(*) as count "
					+ "FROM search_history s "
					+ "WHERE 1=1 "+ WHERE 
					+"GROUP BY s.keyword ORDER BY count DESC limit 200";
			
			List<CounselorRanking> listPage = new ArrayList<>();
			
			//select list
			System.out.println(SELECT);
			@SuppressWarnings("unused")
			Query q = em.createNativeQuery(SELECT);
			List<Object[]> listObject = q.getResultList();
			List<SearchHistory> list = new ArrayList<>();
			for (Object[] ob : listObject) {
				SearchHistory c = new SearchHistory();
				c.setKeyword(String.valueOf(ob[0]));
				c.setId(Long.valueOf(String.valueOf(ob[1])));
				list.add(c);
			}
			
			//select count
			Query queryCount = em.createNativeQuery("SELECT COUNT(*) FROM counselor");
			Long totalCount = Long.valueOf(queryCount.getSingleResult().toString());
			return new PageCustom<SearchHistory>(list, totalCount, 1, Integer.MAX_VALUE);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

}
