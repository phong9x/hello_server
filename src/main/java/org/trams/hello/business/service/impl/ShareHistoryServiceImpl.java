/*
 * Created on 21 Jun 2017 ( Time 10:45:06 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.business.service.impl;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import javax.annotation.Resource;
import javax.persistence.EntityManager;
import javax.persistence.Query;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import org.trams.hello.bean.PageCustom;
import org.trams.hello.bean.ServiceStatistics;
import org.trams.hello.bean.ShareHistory;
import org.trams.hello.bean.jpa.ShareHistoryEntity;
import org.trams.hello.business.service.ShareHistoryService;
import org.trams.hello.business.service.mapping.ShareHistoryServiceMapper;
import org.trams.hello.data.repository.jpa.ShareHistoryJpaRepository;
import org.trams.hello.web.bean.search.SearchStatistics;
import org.trams.hello.web.common.ApplicationDefine;
import org.trams.hello.web.common.utils.DataUtils;
/**
 * Implementation of ShareHistoryService
 */
@Component
@Transactional
public class ShareHistoryServiceImpl implements ShareHistoryService {

	@Resource
	private ShareHistoryJpaRepository shareHistoryJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private ShareHistoryServiceMapper shareHistoryServiceMapper;
	
	@Resource
	private EntityManager em;
	
	@Override
	public ShareHistory findById(Integer id) {
		ShareHistoryEntity shareHistoryEntity = shareHistoryJpaRepository.findOne(id);
		return shareHistoryServiceMapper.mapShareHistoryEntityToShareHistory(shareHistoryEntity);
	}

	@Override
	public Page<ShareHistoryEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return shareHistoryJpaRepository.findAll(request);
	}

	@Override
	public List<ShareHistory> findAll() {
		Iterable<ShareHistoryEntity> entities = shareHistoryJpaRepository.findAll();
		List<ShareHistory> beans = new ArrayList<ShareHistory>();
		for(ShareHistoryEntity shareHistoryEntity : entities) {
			beans.add(shareHistoryServiceMapper.mapShareHistoryEntityToShareHistory(shareHistoryEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = shareHistoryJpaRepository.count();
		return count;
	}

	@Override
	public ShareHistory save(ShareHistory shareHistory) {
		return update(shareHistory) ;
	}

	@Override
	public ShareHistory create(ShareHistory shareHistory) {
/*
		ShareHistoryEntity shareHistoryEntity = shareHistoryJpaRepository.findOne(shareHistory.getId());
		if( shareHistoryEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		shareHistoryEntity = new ShareHistoryEntity();
		shareHistoryServiceMapper.mapShareHistoryToShareHistoryEntity(shareHistory, shareHistoryEntity);
		ShareHistoryEntity shareHistoryEntitySaved = shareHistoryJpaRepository.save(shareHistoryEntity);
		return shareHistoryServiceMapper.mapShareHistoryEntityToShareHistory(shareHistoryEntitySaved);
*/
		ShareHistoryEntity shareHistoryEntity = new ShareHistoryEntity();
		shareHistoryServiceMapper.mapShareHistoryToShareHistoryEntity(shareHistory, shareHistoryEntity);
		ShareHistoryEntity shareHistoryEntitySaved = shareHistoryJpaRepository.save(shareHistoryEntity);
		return shareHistoryServiceMapper.mapShareHistoryEntityToShareHistory(shareHistoryEntitySaved);
	}

	@Override
	public ShareHistory update(ShareHistory shareHistory) {
		ShareHistoryEntity shareHistoryEntity = shareHistoryJpaRepository.findOne(shareHistory.getId());
		shareHistoryServiceMapper.mapShareHistoryToShareHistoryEntity(shareHistory, shareHistoryEntity);
		ShareHistoryEntity shareHistoryEntitySaved = shareHistoryJpaRepository.save(shareHistoryEntity);
		return shareHistoryServiceMapper.mapShareHistoryEntityToShareHistory(shareHistoryEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		shareHistoryJpaRepository.delete(id);
	}

	public ShareHistoryJpaRepository getShareHistoryJpaRepository() {
		return shareHistoryJpaRepository;
	}

	public void setShareHistoryJpaRepository(ShareHistoryJpaRepository shareHistoryJpaRepository) {
		this.shareHistoryJpaRepository = shareHistoryJpaRepository;
	}

	public ShareHistoryServiceMapper getShareHistoryServiceMapper() {
		return shareHistoryServiceMapper;
	}

	public void setShareHistoryServiceMapper(ShareHistoryServiceMapper shareHistoryServiceMapper) {
		this.shareHistoryServiceMapper = shareHistoryServiceMapper;
	}

	@Override
	public Page<ShareHistoryEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return shareHistoryJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	

	@Override
	public Page<ShareHistoryEntity> listPagingByUserId(Integer page, Integer size, Integer userId) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return shareHistoryJpaRepository.listPagingByUserId(userId, pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public PageCustom<ServiceStatistics> filterStatistics(SearchStatistics s) {
		try {
			String ATTRIBUTE = "";
			String WHERE_SUB = "";
			if (s.getType().equals("weekly")) {
				ATTRIBUTE = "WEEK(create_date)";
				WHERE_SUB += " AND WEEK(create_date) >= " + s.getFromWeek() + " AND WEEK(create_date) <= " + s.getToWeek() + " ";
				WHERE_SUB += " AND YEAR(create_date)=" + s.getYearWeekly()+" ";
			} else if (s.getType().equals("monthly")) {
				ATTRIBUTE = "MONTH(create_date)";
				WHERE_SUB += " AND MONTH(create_date) >= " + s.getFromMonth() + " AND MONTH(create_date) <= " + s.getToMonth()+ " ";
				WHERE_SUB += " AND YEAR(create_date)=" + s.getYearMonthly()+" ";
			} else {
				ATTRIBUTE = "DATE(create_date)";
				WHERE_SUB += " AND DATE_FORMAT(create_date,'%Y/%m/%d') >= '" + s.getStartDate() + "' AND DATE_FORMAT(create_date,'%Y/%m/%d') <= '" + s.getEndDate()+"' ";
			}
			if(s.isAndroid() != s.isIos()){
				if(s.isAndroid()){
					WHERE_SUB += " AND os_name = 'android' ";
				}
				if(s.isIos()){
					WHERE_SUB += " AND os_name = 'ios' ";
				}
			}
			String SELECT = "SELECT title, SUM(totalPayment), SUM(totalTest), "
					+ "SUM(KakaoTalk), SUM(KakaoStory), SUM(facebook), SUM(instagram) ";
			
			String FROM = "FROM("
					
					+ "SELECT "+ATTRIBUTE+" as title, COUNT(*) as totalPayment, 0 as totalTest, "
					+ "0 as KakaoTalk, 0 as KakaoStory, 0 as facebook, 0 as instagram "
					+ "FROM payment_history p "
					+ "WHERE p.type_coin =1 AND p.type_payment = 1 AND p.status = 1 AND p.type_use = "+ApplicationDefine.Recharge_TypeUse.NormalCharging.getCode()+" "+WHERE_SUB
					+ "GROUP BY "+ATTRIBUTE+" "
					
					+ "UNION ALL "
					
					+ "SELECT "+ATTRIBUTE+" as title, 0 as totalPayment, COUNT(*) as totalTest , "
					+ "0 as KakaoTalk, 0 as KakaoStory, 0 as facebook, 0 as instagram "
					+ "FROM user_questionaire uq WHERE uq.type = 2 "+WHERE_SUB
					+ "GROUP BY "+ATTRIBUTE+" "
					
					+ "UNION ALL "
					
					+ "SELECT "+ATTRIBUTE+" as title, 0 as totalPayment, 0 as totalTest,"
					+ "COUNT(CASE WHEN type = 'KakaoTalk' THEN 1 ELSE null END) as KakaoTalk, "
					+ "COUNT(CASE WHEN type = 'KakaoStory' THEN 1 ELSE null END) as KakaoStory, "
					+ "COUNT(CASE WHEN type = 'facebook' THEN 1 ELSE null END) as facebook,"
					+ "COUNT(CASE WHEN type = 'instagram' THEN 1 ELSE null END) as instagram "
					+ "FROM share_history s "
					+ "WHERE 1=1 " + WHERE_SUB
					+ "GROUP BY "+ATTRIBUTE+" "
					
					+ ")a ";
			
			
			String GROUP_BY = "GROUP BY (a.title) ";
			String ORDER_BY = " ORDER BY (a.title) DESC";
			List<ServiceStatistics> listPage = new ArrayList<>();
			Integer totalPayment = 0;
			Integer totalTest = 0;
			Integer kakaoTalk = 0;
			Integer kakaoStory = 0;
			Integer facebook = 0;
			Integer instagram = 0;
			

			System.out.println(SELECT + FROM  + GROUP_BY +ORDER_BY);
			@SuppressWarnings("unused")
			Query q = em.createNativeQuery(SELECT + FROM  + GROUP_BY+ ORDER_BY);
			List<Object[]> listObject = q.getResultList();
			Integer index = 0;
			Calendar cal = Calendar.getInstance();
			
			if (s.getType().equals("weekly")) {
				//get data by week
				for (int i = s.getToWeek(); i >= s.getFromWeek(); i--) {
					
					Calendar startWeek = Calendar.getInstance();
					startWeek.set(Calendar.WEEK_OF_YEAR, i);
					startWeek.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY);
					Calendar endWeek = Calendar.getInstance();
					endWeek.set(Calendar.WEEK_OF_YEAR, i+1);
					endWeek.set(Calendar.DAY_OF_WEEK, Calendar.SUNDAY);
					ServiceStatistics l = new ServiceStatistics();
					l.setTitle(DataUtils.parseStringFromDate(startWeek.getTime(), "yyyy-MM-dd") + " ~ "
							+ DataUtils.parseStringFromDate(endWeek.getTime(), "yyyy-MM-dd"));
					l.setTotalPayment(0);
					l.setTotalTest(0);
					l.setKakaoTalk(0);
					l.setKakaoStory(0);
					l.setFacebook(0);
					l.setInstagram(0);
					
					for (int j = index; j < listObject.size(); j++) {
						Object[] ob = listObject.get(j);
						Integer week =Integer.valueOf(ob[0].toString());
						if (week == i) {
							l.setTotalPayment(Integer.valueOf(String.valueOf(ob[1])));
							l.setTotalTest(Integer.valueOf(String.valueOf(ob[2])));
							l.setKakaoTalk(Integer.valueOf(String.valueOf(ob[3])));
							l.setKakaoStory(Integer.valueOf(String.valueOf(ob[4])));
							l.setFacebook(Integer.valueOf(String.valueOf(ob[5])));
							l.setInstagram(Integer.valueOf(String.valueOf(ob[6])));
							
							totalPayment +=l.getTotalPayment();
							totalTest += l.getTotalTest();
							kakaoTalk += l.getKakaoTalk();
							kakaoStory += l.getKakaoStory();
							facebook  += l.getFacebook();
							instagram += l.getInstagram();
							
							index++;
						} else {
							
							break;
						}

					}
					listPage.add(l);
				}

			} else if (s.getType().equals("monthly")) {
				//get data by month
				for (int i = s.getToMonth(); i >= s.getFromMonth(); i--) {

					ServiceStatistics l = new ServiceStatistics();
					if (i < 10) {
						l.setTitle(s.getYearMonthly() + "-0" + i);
					} else {
						l.setTitle(s.getYearMonthly() + "-" + i);
					}
					l.setTotalPayment(0);
					l.setTotalTest(0);
					l.setKakaoTalk(0);
					l.setKakaoStory(0);
					l.setFacebook(0);
					l.setInstagram(0);

					for (int j = index; j < listObject.size(); j++) {
						Object[] ob = listObject.get(j);
						Integer month =Integer.valueOf(ob[0].toString());
						if (month == i) {
							l.setTotalPayment(Integer.valueOf(String.valueOf(ob[1])));
							l.setTotalTest(Integer.valueOf(String.valueOf(ob[2])));
							l.setKakaoTalk(Integer.valueOf(String.valueOf(ob[3])));
							l.setKakaoStory(Integer.valueOf(String.valueOf(ob[4])));
							l.setFacebook(Integer.valueOf(String.valueOf(ob[5])));
							l.setInstagram(Integer.valueOf(String.valueOf(ob[6])));
							
							totalPayment +=l.getTotalPayment();
							totalTest += l.getTotalTest();
							kakaoTalk += l.getKakaoTalk();
							kakaoStory += l.getKakaoStory();
							facebook  += l.getFacebook();
							instagram += l.getInstagram();
							
							index++;
						} else {
							
							break;
						}

					}
					listPage.add(l);
				}

			} else {
				//get data by date
				Calendar start = Calendar.getInstance();
				Calendar end = Calendar.getInstance();
				
				if(s.getStartDate() == null){
					start.setTime(new Date());
				}else{
					Date date = DataUtils.convertToDate(s.getStartDate(), "yyyy/MM/dd");
					start.setTime(date);
				}
				
				if(s.getStartDate() == null){
					start.setTime(new Date());
				}else{
					Date date = DataUtils.convertToDate(s.getEndDate(), "yyyy/MM/dd");
					end.setTime(date);
				}
				long dayDiff = DataUtils.daysBetween(start, end);
				
				for (long i = dayDiff; i >= 0; i--) {
					ServiceStatistics l = new ServiceStatistics();
					l.setTitle(DataUtils.parseStringFromDate(end.getTime(), "yyyy-MM-dd"));
					l.setTotalPayment(0);
					l.setTotalTest(0);
					l.setKakaoTalk(0);
					l.setKakaoStory(0);
					l.setFacebook(0);
					l.setInstagram(0);
					
					for (int j = index; j < listObject.size(); j++) {
						
						Object[] ob = listObject.get(j);
						cal.setTime((Date) ob[0]);
						if (DataUtils.daysBetween(end, cal) == 0) {
							l.setTotalPayment(Integer.valueOf(String.valueOf(ob[1])));
							l.setTotalTest(Integer.valueOf(String.valueOf(ob[2])));
							l.setKakaoTalk(Integer.valueOf(String.valueOf(ob[3])));
							l.setKakaoStory(Integer.valueOf(String.valueOf(ob[4])));
							l.setFacebook(Integer.valueOf(String.valueOf(ob[5])));
							l.setInstagram(Integer.valueOf(String.valueOf(ob[6])));
							
							totalPayment +=l.getTotalPayment();
							totalTest += l.getTotalTest();
							kakaoTalk += l.getKakaoTalk();
							kakaoStory += l.getKakaoStory();
							facebook  += l.getFacebook();
							instagram += l.getInstagram();
					
							index++;
						} else {
							break;
						}
					}
					listPage.add(l);
					end.add(Calendar.DATE, -1);
				}

			}

			List<Object> listOther = new ArrayList<>();
			listOther.add(totalPayment);
			listOther.add(totalTest);			
			listOther.add(kakaoTalk);
			listOther.add(kakaoStory);
			listOther.add(facebook);
			listOther.add(instagram);

			return new PageCustom<>(listPage, Long.valueOf(listPage.size()), 1, Integer.MAX_VALUE, listOther);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
		
	}
}
