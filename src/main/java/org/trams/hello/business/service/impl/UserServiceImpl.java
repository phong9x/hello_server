/*
 * Created on 23 thg 11 2016 ( Time 16:44:47 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.business.service.impl;

import java.math.BigInteger;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.persistence.EntityManager;
import javax.persistence.Query;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import javax.servlet.ServletContext;

import org.apache.commons.lang.ArrayUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;
import org.trams.hello.bean.Counselor;
import org.trams.hello.bean.CounselorBiography;
import org.trams.hello.bean.CounselorBiographyTemp;
import org.trams.hello.bean.CounselorField;
import org.trams.hello.bean.CounselorFieldTemp;
import org.trams.hello.bean.CounselorStatistics;
import org.trams.hello.bean.CounselorTemp;
import org.trams.hello.bean.DataChart;
import org.trams.hello.bean.PageCustom;
import org.trams.hello.bean.PasswordHistory;
import org.trams.hello.bean.PaymentHistory;
import org.trams.hello.bean.User;
import org.trams.hello.bean.UserCertificate;
import org.trams.hello.bean.UserCertificateTemp;
import org.trams.hello.bean.UserEducation;
import org.trams.hello.bean.UserEducationTemp;
import org.trams.hello.bean.UserFile;
import org.trams.hello.bean.UserFileTemp;
import org.trams.hello.bean.UserStatistics;
import org.trams.hello.bean.api.MemberStatisticsChart;
import org.trams.hello.bean.jpa.CounselorBiographyEntity;
import org.trams.hello.bean.jpa.CounselorEntity;
import org.trams.hello.bean.jpa.CounselorFieldEntity;
import org.trams.hello.bean.jpa.PasswordHistoryEntity;
import org.trams.hello.bean.jpa.UserCertificateEntity;
import org.trams.hello.bean.jpa.UserEducationEntity;
import org.trams.hello.bean.jpa.UserEntity;
import org.trams.hello.bean.jpa.UserFileEntity;
import org.trams.hello.bean.web.company.MemberInfo;
import org.trams.hello.bean.web.counselingCenter.CounselingCenterStatistics;
import org.trams.hello.business.service.CounselorBiographyTempService;
import org.trams.hello.business.service.CounselorFieldTempService;
import org.trams.hello.business.service.CounselorTempService;
import org.trams.hello.business.service.PaymentHistoryService;
import org.trams.hello.business.service.UserCertificateTempService;
import org.trams.hello.business.service.UserEducationTempService;
import org.trams.hello.business.service.UserFileTempService;
import org.trams.hello.business.service.UserService;
import org.trams.hello.business.service.mapping.CounselorBiographyServiceMapper;
import org.trams.hello.business.service.mapping.CounselorFieldServiceMapper;
import org.trams.hello.business.service.mapping.CounselorServiceMapper;
import org.trams.hello.business.service.mapping.PasswordHistoryServiceMapper;
import org.trams.hello.business.service.mapping.UserCertificateServiceMapper;
import org.trams.hello.business.service.mapping.UserEducationServiceMapper;
import org.trams.hello.business.service.mapping.UserFileServiceMapper;
import org.trams.hello.business.service.mapping.UserServiceMapper;
import org.trams.hello.data.repository.jpa.BusinessJpaRepository;
import org.trams.hello.data.repository.jpa.CounselorBiographyJpaRepository;
import org.trams.hello.data.repository.jpa.CounselorFieldJpaRepository;
import org.trams.hello.data.repository.jpa.CounselorJpaRepository;
import org.trams.hello.data.repository.jpa.PasswordHistoryJpaRepository;
import org.trams.hello.data.repository.jpa.UserCertificateJpaRepository;
import org.trams.hello.data.repository.jpa.UserEducationJpaRepository;
import org.trams.hello.data.repository.jpa.UserFileJpaRepository;
import org.trams.hello.data.repository.jpa.UserJpaRepository;
import org.trams.hello.web.bean.search.SearchMember;
import org.trams.hello.web.bean.search.SearchPushMember;
import org.trams.hello.web.bean.search.SearchStatistics;
import org.trams.hello.web.common.ApplicationDefine;
import org.trams.hello.web.common.utils.DataUtils;
import org.trams.hello.web.common.utils.EncryptionUtils;
import org.trams.hello.web.common.utils.FileUtils;
import org.trams.hello.web.dto.Biography;
import org.trams.hello.web.dto.Certificate;
import org.trams.hello.web.dto.Field;
import org.trams.hello.web.dto.OtherCertificate;
import org.trams.hello.web.dto.UserDto;

/**
 * Implementation of UserService
 */
@Service
@Transactional
public class UserServiceImpl implements UserService {

	private static final Integer PAGE_SIZE = 15;

	@Resource
	private UserJpaRepository userJpaRepository;
	@Resource
	private UserServiceMapper userServiceMapper;
	@Resource
	private BusinessJpaRepository businessJpaRepository;
	@Resource
	private CounselorFieldJpaRepository counselorFieldJpaRepository;
	@Resource
	private CounselorFieldServiceMapper counselorFieldServiceMapper;
	@Resource
	private CounselorBiographyJpaRepository counselorBiographyJpaRepository;
	@Resource
	private CounselorBiographyServiceMapper counselorBiographyServiceMapper;
	@Resource
	private UserEducationJpaRepository userEducationJpaRepository;
	@Resource
	private UserEducationServiceMapper userEducationServiceMapper;
	@Resource
	private UserCertificateJpaRepository userCertificateJpaRepository;
	@Resource
	private UserCertificateServiceMapper userCertificateServiceMapper;
	@Resource
	private UserFileJpaRepository userFileJpaRepository;
	@Resource
	private UserFileServiceMapper userFileServiceMapper;
	@Resource
	private CounselorJpaRepository counselorJpaRepository;
	@Resource
	private CounselorServiceMapper counselorServiceMapper;
	@Resource
	private PaymentHistoryService paymentHistoryService;
	@Resource
	private PasswordHistoryJpaRepository passwordHistoryJpaRepository;
	@Resource
	private PasswordHistoryServiceMapper passwordHistoryServiceMapper;
	@Resource
	private CounselorTempService counselorTempService;
	@Resource
	private UserCertificateTempService userCertificateTempService;
	@Resource
	private UserEducationTempService userEducationTempService;
	@Resource
	private CounselorFieldTempService counselorFieldTempService;
	@Resource
	private CounselorBiographyTempService counselorBiographyTempService;
	@Resource
	private UserFileTempService userFileTempService;

	@Resource
	EntityManager em;

	@Override
	public User findById(Integer id) {
		UserEntity userEntity = userJpaRepository.findOne(id);
		return userServiceMapper.mapUserEntityToUser(userEntity);
	}

	@Override
	public UserEntity findOne(Integer id) {
		return userJpaRepository.findOne(id);
	}

	@Override
	public Page<UserEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE, new Sort(new Order(Direction.DESC, "id")));
		return userJpaRepository.findAll(request);
	}

	@Override
	public List<User> findAll() {
		Iterable<UserEntity> entities = userJpaRepository.findAll();
		List<User> beans = new ArrayList<User>();
		for (UserEntity userEntity : entities) {
			beans.add(userServiceMapper.mapUserEntityToUser(userEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * 
	 * @return Long
	 */
	public Long countTotal() {
		Long count = userJpaRepository.count();
		return count;
	}

	@Override
	public User save(User user) {
		return update(user);
	}

	@Override
	public User create(User user) {
		/*
		 * UserEntity userEntity = userJpaRepository.findOne(user.getId()); if(
		 * userEntity != null ) { throw new
		 * IllegalStateException("already.exists"); }
		 * 
		 * userEntity = new UserEntity();
		 * userServiceMapper.mapUserToUserEntity(user, userEntity); UserEntity
		 * userEntitySaved = userJpaRepository.save(userEntity); return
		 * userServiceMapper.mapUserEntityToUser(userEntitySaved);
		 */
		UserEntity userEntity = new UserEntity();
		userServiceMapper.mapUserToUserEntity(user, userEntity);
		UserEntity userEntitySaved = userJpaRepository.save(userEntity);
		return userServiceMapper.mapUserEntityToUser(userEntitySaved);
	}

	@Override
	public User update(User user) {
		UserEntity userEntity = userJpaRepository.findOne(user.getId());
		userServiceMapper.mapUserToUserEntity(user, userEntity);
		UserEntity userEntitySaved = userJpaRepository.save(userEntity);
		return userServiceMapper.mapUserEntityToUser(userEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		userJpaRepository.delete(id);
	}

	public UserJpaRepository getUserJpaRepository() {
		return userJpaRepository;
	}

	public void setUserJpaRepository(UserJpaRepository userJpaRepository) {
		this.userJpaRepository = userJpaRepository;
	}

	public UserServiceMapper getUserServiceMapper() {
		return userServiceMapper;
	}

	public void setUserServiceMapper(UserServiceMapper userServiceMapper) {
		this.userServiceMapper = userServiceMapper;
	}

	@Override
	public Page<UserEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page - 1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return userJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Page<UserEntity> findByUsername(String username, Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page - 1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return userJpaRepository.findByUsername(username, pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Page<UserEntity> findByNickname(String nickname, Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page - 1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return userJpaRepository.findByNickname(nickname, pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Page<UserEntity> findByFullname(String fullname, Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page - 1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return userJpaRepository.findByFullname(fullname, pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Page<UserEntity> findByEmail(String email, Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page - 1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return userJpaRepository.findByEmail(email, pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public void update_isDelete(Integer id) {
		try {
			userJpaRepository.update_isDelete(id);
		} catch (Exception e) {
			System.out.println(e);
		}
	}

	@Override
	public User loginApp(String username) {
		try {
			UserEntity u = userJpaRepository.loginApp(username);
			return userServiceMapper.mapUserEntityToUser(u);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public User loginAdmin(String username, String password, Integer[] roleId) {
		try {
			UserEntity u = userJpaRepository.loginAdmin(username, password, roleId);
			return userServiceMapper.mapUserEntityToUser(u);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public User loginCounselor(String username, String password) {
		try {
			UserEntity u = userJpaRepository.loginCounselor(username, password);
			return userServiceMapper.mapUserEntityToUser(u);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public User loginCounselorTemp(String username, String password) {
		try {
			UserEntity u = userJpaRepository.loginCounselorTemp(username, password);
			return userServiceMapper.mapUserEntityToUser(u);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public List<Integer> totalUserHome(Date date) {
		try {
			List<Object[]> list_object = userJpaRepository.totalUserHome(date);
			List<Integer> list_integer = new ArrayList<>();
			if (list_object != null) {
				Object[] ob = list_object.get(0);
				list_integer.add(DataUtils.parseInt(ob[0]));
				list_integer.add(DataUtils.parseInt(ob[1]));
				list_integer.add(DataUtils.parseInt(ob[2]));
				list_integer.add(DataUtils.parseInt(ob[3]));
				list_integer.add(DataUtils.parseInt(ob[4]));
			}
			return list_integer;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public List<Integer> totalRequestAndCounselingHome() {
		try {
			List<Object[]> list_object = userJpaRepository.totalRequestAndCounselingHome();
			List<Integer> list_integer = new ArrayList<>();
			if (list_object != null) {
				Object[] ob = list_object.get(0);
				list_integer.add(DataUtils.parseInt(ob[0]));
				list_integer.add(DataUtils.parseInt(ob[1]));
				list_integer.add(DataUtils.parseInt(ob[2]));
			}
			return list_integer;
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public List<DataChart> getDataChart(Date date, String type) {
		try {
			List<Object[]> list_chart_line = new ArrayList<Object[]>();
			Object[] ob1 = null;
			if (type.equals("login")) {
				ob1 = userJpaRepository.getDataChart_LoginNumber(date);
			} else if (type.equals("reservationNumber")) {
				list_chart_line = userJpaRepository.getDataChart_ReservationNumber(date);
				ob1 = list_chart_line.get(0);
			} else if (type.equals("counselingNumber")) {
				list_chart_line = userJpaRepository.getDataChart_CounselingNumber(date);
				ob1 = list_chart_line.get(0);
			} else {
				list_chart_line = userJpaRepository.getDataChart_CounselingFee(date);
				ob1 = list_chart_line.get(0);
			}
			List<Object[]> list_remove_account = userJpaRepository.getDataChart_RemoveAccount(date,
					ApplicationDefine.UserStatusActive.WITHDRAWAL.getCode());
			List<Object[]> list_join_number = userJpaRepository.getDataChart_JoinNumber(date);
			List<DataChart> result = new ArrayList<>();
			Calendar c = Calendar.getInstance();
			c.setTime(date);

			Object[] ob2 = list_remove_account.get(0);
			Object[] ob3 = list_join_number.get(0);
			for (int i = 0; i < ob2.length; i++) {
				String str_date = (c.get(Calendar.MONTH) + 1) + "/" + c.get(Calendar.DAY_OF_MONTH);
				DataChart dc = new DataChart();
				dc.setDate(str_date);
				if (ob1[i] == null) {
					dc.setData(0);
				} else {
					dc.setData(DataUtils.parseInt(ob1[i]));
				}
				if (ob2[i] == null) {
					dc.setRemoveAccountNumber(0);
				} else {
					dc.setRemoveAccountNumber(DataUtils.parseInt(ob2[i]));
				}
				if (ob3[i] == null) {
					dc.setJoinNumber(0);
				} else {
					dc.setJoinNumber(DataUtils.parseInt(ob3[i]));
				}

				c.add(Calendar.DATE, 1);
				result.add(dc);
			}
			return result;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public UserEntity findOneByEmail(String email) {
		try {
			UserEntity u = userJpaRepository.findOneByEmail(email);
			return u;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public UserEntity findOneByEmailAndBirthDay(String email, Date birthDay) {
		try {
			UserEntity u = userJpaRepository.findOneByEmailAndBirthDay(email, birthDay);
			return u;
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public UserEntity findOneByPhone(String phone) {
		try {
			UserEntity u = userJpaRepository.findOneByPhone(phone);
			return u;
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Page<UserEntity> filter(SearchMember searchMember, Integer page, Integer size) {
		try {
			Specification<UserEntity> spec = new Specification<UserEntity>() {
				@Override
				public Predicate toPredicate(Root<UserEntity> root, CriteriaQuery<?> query, CriteriaBuilder cb) {
					List<Predicate> predicates = new ArrayList<>();

					// date
					if (searchMember.getStartDate() != null) {
						Date start = DataUtils.parseDate(searchMember.getStartDate(), "yyyy/MM/dd");
						Predicate startDateLess = cb.greaterThanOrEqualTo(root.get("createDate"), start);
						predicates.add(startDateLess);
					}
					if (searchMember.getEndDate() != null) {
						Date end = DataUtils.parseDate(searchMember.getEndDate() + " 23:59:59", "yyyy/MM/dd HH:mm:ss");
						Predicate endDateLess = cb.lessThanOrEqualTo(root.get("createDate"), end);
						predicates.add(endDateLess);
					}

					// gender
					if (!(searchMember.isMan() == searchMember.isWomen())) {
						if (searchMember.isMan()) {
							predicates.add(cb.equal(root.get("gender"), 1));
						}

						if (searchMember.isWomen()) {
							predicates.add(cb.equal(root.get("gender"), 0));
						}
					}
					// role
					if (!(searchMember.isIndividual() == searchMember.isEnterprise())) {
						if (searchMember.getBusinessId() != null) {
							List<Predicate> list_role = new ArrayList<>();
							if (searchMember.isEnterprise()) {
								Predicate predicate1 = cb.equal(root.get("business").get("id"),
										searchMember.getBusinessId());
								Predicate predicate2 = cb.equal(root.get("userRole").get("id"),
										ApplicationDefine.USER_ROLE_MEMBER_BUSSINESS);
								Predicate andPre = cb.and(predicate1, predicate2);
								list_role.add(andPre);
							}
							if (searchMember.isIndividual()) {
								Predicate predicate = cb.equal(root.get("userRole").get("id"),
										ApplicationDefine.USER_ROLE_USER);
								list_role.add(predicate);
							}
							Predicate predicateRole = cb.or(list_role.toArray(new Predicate[] {}));
							predicates.add(predicateRole);
						} else {
							if (searchMember.isIndividual()) {
								predicates.add(
										cb.equal(root.get("userRole").get("id"), ApplicationDefine.USER_ROLE_USER));
							}

							if (searchMember.isEnterprise()) {
								predicates.add(cb.equal(root.get("userRole").get("id"),
										ApplicationDefine.USER_ROLE_MEMBER_BUSSINESS));
							}
						}
					} else {
						predicates.add(cb.or(cb.equal(root.get("userRole").get("id"), ApplicationDefine.USER_ROLE_USER),
								cb.equal(root.get("userRole").get("id"),
										ApplicationDefine.USER_ROLE_MEMBER_BUSSINESS)));

					}

					// osName
					Predicate predicateOs = null;
					List<Predicate> list_predicate_os = new ArrayList<>();
					if (!(searchMember.isAndroid() == searchMember.isIos()
							&& searchMember.isIos() == searchMember.isOtherOs())) {
						if (searchMember.isOtherOs()) {
							if (searchMember.isIos()) {
								Predicate predicate = cb.notLike(root.get("osName"), "android");
								list_predicate_os.add(predicate);
							} else if (searchMember.isAndroid()) {
								Predicate predicate = cb.notLike(root.get("osName"), "ios");
								list_predicate_os.add(predicate);
							} else {
								Predicate predicate = cb.and(cb.notLike(root.get("osName"), "ios"),
										cb.notLike(root.get("osName"), "android"));
								list_predicate_os.add(predicate);
							}
						} else {
							if (searchMember.isIos()) {
								Predicate predicate = cb.like(root.get("osName"), "ios");
								list_predicate_os.add(predicate);
							}
							if (searchMember.isAndroid()) {
								Predicate predicate = cb.like(root.get("osName"), "android");
								list_predicate_os.add(predicate);
							}
						}
						if (list_predicate_os.size() > 0) {
							predicateOs = cb.or(list_predicate_os.toArray(new Predicate[] {}));
							predicates.add(predicateOs);
						}
						// age
					}
					Predicate predicateAge = null;
					List<Predicate> list_predicate = new ArrayList<>();
					Calendar c = Calendar.getInstance();
					if (searchMember.isAge10()) {
						Integer startYear = c.get(Calendar.YEAR);
						startYear = startYear - 20;
						Predicate predicate = cb.greaterThanOrEqualTo(
								cb.function("year", Integer.class, root.get("dayOfBirth")), startYear);
						list_predicate.add(predicate);
					}
					if (searchMember.isAge50()) {
						Integer endYear = c.get(Calendar.YEAR);
						endYear = endYear - 50;
						Predicate predicate = cb
								.lessThanOrEqualTo(cb.function("year", Integer.class, root.get("dayOfBirth")), endYear);
						list_predicate.add(predicate);
					}
					if (searchMember.isAge20()) {
						Integer startYear = c.get(Calendar.YEAR);
						Integer endYear = c.get(Calendar.YEAR);
						startYear = startYear - 30;
						endYear = endYear - 20;
						Predicate predicate1 = cb.greaterThanOrEqualTo(
								cb.function("year", Integer.class, root.get("dayOfBirth")), startYear);
						Predicate predicate2 = cb.lessThan(cb.function("year", Integer.class, root.get("dayOfBirth")),
								endYear);
						Predicate andPre = cb.and(predicate1, predicate2);
						list_predicate.add(andPre);
					}
					if (searchMember.isAge30()) {
						Integer startYear = c.get(Calendar.YEAR);
						Integer endYear = c.get(Calendar.YEAR);
						startYear = startYear - 40;
						endYear = endYear - 30;
						Predicate predicate1 = cb.greaterThanOrEqualTo(
								cb.function("year", Integer.class, root.get("dayOfBirth")), startYear);
						Predicate predicate2 = cb.lessThan(cb.function("year", Integer.class, root.get("dayOfBirth")),
								endYear);
						Predicate andPre = cb.and(predicate1, predicate2);
						list_predicate.add(andPre);
					}
					if (searchMember.isAge40()) {
						Integer startYear = c.get(Calendar.YEAR);
						Integer endYear = c.get(Calendar.YEAR);
						startYear = startYear - 50;
						endYear = endYear - 40;
						Predicate predicate1 = cb.greaterThanOrEqualTo(
								cb.function("year", Integer.class, root.get("dayOfBirth")), startYear);
						Predicate predicate2 = cb.lessThan(cb.function("year", Integer.class, root.get("dayOfBirth")),
								endYear);
						Predicate andPre = cb.and(predicate1, predicate2);
						list_predicate.add(andPre);
					}
					if (list_predicate.size() > 0) {
						predicateAge = cb.or(list_predicate.toArray(new Predicate[] {}));
						predicates.add(predicateAge);
					}

					// statusAcitve
					if (searchMember.isStatusNormal() || searchMember.isStatusBan() || searchMember.isStatusDormat()
							|| searchMember.isStatusWithdrawl()) {
						List<Short> list_status = new ArrayList<>();
						if (searchMember.isStatusNormal()) {
							list_status.add(ApplicationDefine.UserStatusActive.NORMAL.getCode());
						}
						if (searchMember.isStatusBan()) {
							list_status.add(ApplicationDefine.UserStatusActive.BANNED.getCode());
						}

						if (searchMember.isStatusDormat()) {
							list_status.add(ApplicationDefine.UserStatusActive.DORMAT.getCode());

						}

						if (searchMember.isStatusWithdrawl()) {
							list_status.add(ApplicationDefine.UserStatusActive.WITHDRAWAL.getCode());
						}

						predicates.add(cb.isTrue(root.get("statusActive").in(list_status.toArray())));
					}
					// type and keyword
					if (searchMember.getCommon().getType() != null && searchMember.getCommon().getKeyWord() != null) {
						if (searchMember.getCommon().getType().equals("fullname")) {
							Predicate predicate = cb.like(root.get("fullname"),
									"%" + searchMember.getCommon().getKeyWord() + "%");
							predicates.add(predicate);
						} else if (searchMember.getCommon().getType().equals("username")) {
							Predicate predicate = cb.like(root.get("username"),
									"%" + searchMember.getCommon().getKeyWord() + "%");
							predicates.add(predicate);

						} else if (searchMember.getCommon().getType().equals("device_id")) {
							Predicate predicate = cb.like(root.get("deviceId"),
									"%" + searchMember.getCommon().getKeyWord() + "%");
							predicates.add(predicate);
						}
					}
					return cb.and(predicates.toArray(new Predicate[] {}));
				}
			};
			Order oder = new Order(Direction.DESC, searchMember.getOrder());
			if (searchMember.getOrder().equals("fullname")) {
				oder = new Order(Direction.ASC, searchMember.getOrder());
			}

			PageRequest pageable = new PageRequest(page - 1, size, new Sort(oder));
			return userJpaRepository.findAll(spec, pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}

		// order by

	}

	@Override
	public Page<UserEntity> listPagingBy_BusinessId(Integer id, Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page - 1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return userJpaRepository.listPagingBy_BusinessId(id, pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Integer findOneByUsername(String username) {
		try {
			return userJpaRepository.findOneByUsername(username);
		} catch (Exception e) {
			System.out.println(e);
			return 0;
		}
	}

	@Override
	public Page<UserEntity> filter(Map<String, Object> params) {
		int page = Integer.parseInt(params.get("page").toString());
		int size = Integer.parseInt(params.get("size").toString());

		PageRequest pageable = new PageRequest(page - 1, size, new Sort(new Order(Direction.DESC, "createDate")));

		Specification<UserEntity> specification = new Specification<UserEntity>() {
			@Override
			public Predicate toPredicate(Root<UserEntity> root, CriteriaQuery<?> criteriaQuery,
					CriteriaBuilder criteriaBuilder) {

				List<Predicate> predicates = new ArrayList<>();

				if (params.get("id") != null) {
					Integer id = Integer.parseInt(params.get("id").toString());
					predicates.add(criteriaBuilder.equal(root.get("id"), id));
				}
				if (params.get("title") != null) {
					String title = String.valueOf(params.get("title"));
					predicates.add(criteriaBuilder.like(root.get("title"), "%" + title + "%"));
				}
				if (params.get("types") != null) {
					Short[] types = (Short[]) params.get("types");
					predicates.add(criteriaBuilder.isTrue(root.get("type").in(types)));
				}
				if (params.get("username") != null) {
					String username = String.valueOf(params.get("username"));
					predicates.add(criteriaBuilder.like(root.get("username"), "%" + username + "%"));
				}

				if (predicates.isEmpty()) {
					return criteriaBuilder.isNotNull(root.get("id"));
				} else {
					return criteriaBuilder.and(predicates.toArray(new Predicate[] {}));
				}
			}
		};

		return userJpaRepository.findAll(specification, pageable);
	}

	@Override
	public UserEntity findOneBy_Username(String username) {
		try {
			return userJpaRepository.findOneBy_Username(username);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Integer[] updateCoin(User user, Integer coin) {
		try {
			Integer totalCoin = userJpaRepository.getTotalCoin(user.getId());
			Integer userCoin = totalCoin + coin;
			Integer coinChange = 0;
			if (userCoin < 0) {
				user.setCoin(0);
				coinChange = totalCoin;
			} else {
				user.setCoin(userCoin);
				coinChange = coin;
			}
			User u = update(user);
			Integer[] result = new Integer[2];
			if (coinChange < 0) {
				coinChange = -coinChange;
			}
			result[0] = coinChange;
			result[1] = u.getCoin();
			return result;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public UserEntity findByFullnameAndPhone(String fullname, String phone) {
		return userJpaRepository.findByFullnameAndPhone(fullname, phone);
	}

	@Override
	public UserEntity findByFullnameAndUsernameAndPhone(String fullname, String username, String phone) {
		return userJpaRepository.findByFullnameAndUsernameAndPhone(fullname, username, phone);
	}

	@Override
	public void register(UserDto param, ServletContext servletContext) {
		Date currentDate = new Date();
		List<String> vipCertificates = Arrays.asList("전문상담사 1급 (수련감독자)", "상담심리사 1급 (주 수퍼바이저)", "전문상담사 1급", "상담심리사 1급");

		// create user
		User user = new User();
		user.setCreateDate(currentDate);
		user.setUpdateDate(currentDate);
		user.setUsername(param.getEmail());
		user.setEmail(param.getEmail());
		user.setPassword(EncryptionUtils.jwtBuild(String.valueOf(param.getPwd())));
		user.setFullname(param.getFullname());
		user.setPhone(param.getMobilephone());
		user.setDayOfBirth(DataUtils.parseDate(param.getDobYear() + "/" + param.getDobMonth() + "/" + param.getDobDay(),
				DataUtils.DatePattern.YYYYMMDD));
		user.setRoleId(param.getCounselType());
		user.setStatusActive((short) 0);
		user = create(user);

		// create password history
		PasswordHistoryEntity passwordHistoryEntity = new PasswordHistoryEntity();
		PasswordHistory passwordHistory = new PasswordHistory();
		passwordHistory.setCreateDate(currentDate);
		passwordHistory.setUserId(user.getId());
		passwordHistory.setPassword(user.getPassword());

		passwordHistoryServiceMapper.mapPasswordHistoryToPasswordHistoryEntity(passwordHistory, passwordHistoryEntity);
		passwordHistoryJpaRepository.save(passwordHistoryEntity);

		// create counselor
		Counselor counselor = new Counselor();
		counselor.setId(user.getId());
		counselor.setIntroduce(param.getIntroduce());
		counselor.setCounselNumber(param.getCounseledTimes());
		counselor.setFeeCounselor(33000);
		counselor.setAimmedRecommend((short) 0);
		counselor.setCreateDate(currentDate);
		counselor.setUpdateDate(currentDate);
		counselor.setPoints((float) 0);

		if (3 == param.getCounselType()) {
			counselor.setCounselorCenterId(param.getCounselCenter());
		}

		MultipartFile avatar = param.getAvatar();
		if (avatar != null && !avatar.isEmpty()) {
			counselor.setThumbnailName(avatar.getOriginalFilename());
			counselor.setThumbnailUrl(FileUtils.saveFileOrigin(avatar, servletContext));
		}

		Integer mbti = param.getMbti();
		String mbtiSchool = param.getMbtiSchool();

		counselor.setIsFromAssesta((short) 0);
		if (mbti != null && mbti.equals(1)) {
			counselor.setIsFromAssesta((short) 1);
			counselor.setMbtiCertificate(mbtiSchool);
		}

		if (user.getDayOfBirth() != null) {
			counselor.setGuidancePassword(DataUtils.parseStringFromDate(user.getDayOfBirth(), "yyMMdd"));
		}

		List<Certificate> certificates = param.getCertificates();
		if (certificates != null && !certificates.isEmpty()) {
			for (Certificate c : certificates) {
				if (c.getDiploma() != null) {
					if (vipCertificates.contains(c.getDiploma())) {
						counselor.setLevelVip((short) 1);
					}

					UserCertificate certificate = new UserCertificate();
					certificate.setUserId(user.getId());
					certificate.setCreateDate(currentDate);
					certificate.setUpdateDate(currentDate);
					certificate.setType(c.getType());
					certificate.setName(c.getDiploma());
					if (c.getAuthor() != null && !c.getAuthor().trim().isEmpty()) {
						certificate.setAuthor(c.getAuthor());
					}
					if (c.getIssuedDate() != null && !c.getIssuedDate().trim().isEmpty()) {
						certificate.setIssuedDate(DataUtils.parseDate(c.getIssuedDate(), DataUtils.DatePattern.YYYYMM));
					}
					if (c.getFile() != null && !c.getFile().isEmpty()) {
						certificate.setFileName(c.getFile().getOriginalFilename());
						certificate.setFileUrl(FileUtils.saveFileOrigin(c.getFile(), servletContext));
					}

					UserCertificateEntity certificateEntity = new UserCertificateEntity();
					userCertificateServiceMapper.mapUserCertificateToUserCertificateEntity(certificate,
							certificateEntity);

					userCertificateJpaRepository.save(certificateEntity);
				}
			}
		}

		CounselorEntity counselorEntity = new CounselorEntity();
		counselorServiceMapper.mapCounselorToCounselorEntity(counselor, counselorEntity);
		counselorJpaRepository.save(counselorEntity);

		// counselor education
		UserEducation education = new UserEducation();
		education.setCreateDate(currentDate);
		education.setUpdateDate(currentDate);
		education.setUserId(user.getId());
		education.setUniversity(param.getUniversity());
		education.setFaculty(param.getFaculty());
		education.setType(param.getEduLevel());
		if (param.getEduFile() != null && !param.getEduFile().isEmpty()) {
			education.setFileName(param.getEduFile().getOriginalFilename());
			education.setFileUrl(FileUtils.saveFileOrigin(param.getEduFile(), servletContext));
		}

		UserEducationEntity educationEntity = new UserEducationEntity();
		userEducationServiceMapper.mapUserEducationToUserEducationEntity(education, educationEntity);

		userEducationJpaRepository.save(educationEntity);

		// counselor fields
		List<Field> fields = param.getCounselorFields();
		if (fields != null && !fields.isEmpty()) {
			for (Field field : fields) {
				if (field.getCategory() != null) {
					CounselorField cf = new CounselorField();
					cf.setCounselorId(counselor.getId());
					cf.setCreateDate(currentDate);
					cf.setUpdateDate(currentDate);
					cf.setCounselorFieldId(field.getCategory());

					CounselorFieldEntity cfe = new CounselorFieldEntity();
					counselorFieldServiceMapper.mapCounselorFieldToCounselorFieldEntity(cf, cfe);
					counselorFieldJpaRepository.save(cfe);
				}
			}
		}

		// counselor biography
		List<Biography> biographies = param.getBiographies();
		if (biographies != null && !biographies.isEmpty()) {
			for (Biography biography : biographies) {
				if (biography.getBiography() != null) {
					CounselorBiography cb = new CounselorBiography();
					cb.setCreateDate(currentDate);
					cb.setUpdateDate(currentDate);
					cb.setCounselorId(counselor.getId());
					cb.setContent(biography.getBiography());

					CounselorBiographyEntity cbe = new CounselorBiographyEntity();
					counselorBiographyServiceMapper.mapCounselorBiographyToCounselorBiographyEntity(cb, cbe);
					counselorBiographyJpaRepository.save(cbe);
				}
			}
		}

		List<OtherCertificate> otherCertificates = param.getOtherCertificates();
		if (otherCertificates != null && !otherCertificates.isEmpty()) {
			for (OtherCertificate certificate : otherCertificates) {
				MultipartFile file = certificate.getFile();
				if (file != null && !file.isEmpty()) {
					UserFile userFile = new UserFile();
					userFile.setUserId(user.getId());
					userFile.setCreateDate(currentDate);
					userFile.setUpdateDate(currentDate);
					userFile.setFileName(file.getOriginalFilename());
					userFile.setFileUrl(FileUtils.saveFileOrigin(file, servletContext));
					userFile.setType((short) 1);

					UserFileEntity userFileEntity = new UserFileEntity();
					userFileServiceMapper.mapUserFileToUserFileEntity(userFile, userFileEntity);

					userFileJpaRepository.save(userFileEntity);
				}
			}
		}
	}

	@Override
	public void postpone(UserDto param, ServletContext servletContext) {
		Date currentDate = new Date();
		List<String> vipCertificates = Arrays.asList("전문상담사 1급 (수련감독자)", "상담심리사 1급 (주 수퍼바이저)", "전문상담사 1급", "상담심리사 1급");

		// update user
		User user = findById(param.getCounselorId());
		user.setUpdateDate(currentDate);
		user.setPassword(EncryptionUtils.jwtBuild(String.valueOf(param.getPwd())));
		user.setFullname(param.getFullname());
		user.setPhone(param.getMobilephone());
		user.setDayOfBirth(DataUtils.parseDate(param.getDobYear() + "/" + param.getDobMonth() + "/" + param.getDobDay(),
				DataUtils.DatePattern.YYYYMMDD));
		user.setRoleId(param.getCounselType());
		user.setStatusActive((short) 0);

		update(user);

		// update counselor
		CounselorEntity counselorEntity = counselorJpaRepository.findOne(user.getId());
		Counselor counselor = counselorServiceMapper.mapCounselorEntityToCounselor(counselorEntity);
		counselor.setIntroduce(param.getIntroduce());
		counselor.setCounselNumber(param.getCounseledTimes());
		counselor.setUpdateDate(currentDate);
		counselor.setStatus(ApplicationDefine.Counselor_Status.Waiting.getCode());

		if (3 == param.getCounselType()) {
			counselor.setCounselorCenterId(param.getCounselCenter());
		}

		MultipartFile avatar = param.getAvatar();
		if (avatar != null && !avatar.isEmpty()) {
			counselor.setThumbnailName(avatar.getOriginalFilename());
			counselor.setThumbnailUrl(FileUtils.saveFileOrigin(avatar, servletContext));
		}

		Integer mbti = param.getMbti();
		String mbtiSchool = param.getMbtiSchool();

		if (mbti != null && mbti.equals(1)) {
			counselor.setIsFromAssesta((short) 1);
			counselor.setMbtiCertificate(mbtiSchool);
		} else {
			counselor.setIsFromAssesta((short) 0);
			counselor.setMbtiCertificate(null);
		}

		if (user.getDayOfBirth() != null) {
			counselor.setGuidancePassword(DataUtils.parseStringFromDate(user.getDayOfBirth(), "yyMMdd"));
		}

		// get Previous saved certificates
		List<UserCertificateEntity> previousCertificates = userCertificateJpaRepository.findByUserId(user.getId());
		List<Certificate> certificates = param.getCertificates();
		List<Certificate> certificatesToBeUpdate = new ArrayList<>();

		Iterator<UserCertificateEntity> userCertificateEntityIterator = previousCertificates.iterator();

		while (userCertificateEntityIterator.hasNext()) {

			UserCertificateEntity userCertificateEntity = userCertificateEntityIterator.next();

			Iterator<Certificate> certificateIterator = certificates.iterator();
			while (certificateIterator.hasNext()) {

				Certificate certificate = certificateIterator.next();
				if (userCertificateEntity.getId().equals(certificate.getId())
						&& userCertificateEntity.getType().equals(certificate.getType())) {

					if (certificate.getDiploma() != null && !certificate.getDiploma().isEmpty()) {
						certificateIterator.remove();
						userCertificateEntityIterator.remove();
						certificatesToBeUpdate.add(certificate);
					}
				}
			}
		}

		// delete certificates
		if (!previousCertificates.isEmpty()) {
			for (UserCertificateEntity uce : previousCertificates) {
				userCertificateJpaRepository.delete(uce.getId());
			}
		}
		// update certificates
		if (!certificatesToBeUpdate.isEmpty()) {
			for (Certificate c : certificatesToBeUpdate) {

				UserCertificateEntity uce = userCertificateJpaRepository.findOne(c.getId());
				uce.setUpdateDate(currentDate);
				uce.setName(c.getDiploma());
				if (c.getAuthor() != null && !c.getAuthor().trim().isEmpty()) {
					uce.setAuthor(c.getAuthor());
				}
				if (c.getIssuedDate() != null && !c.getIssuedDate().trim().isEmpty()) {
					uce.setIssuedDate(DataUtils.parseDate(c.getIssuedDate(), DataUtils.DatePattern.YYYYMM));
				}
				if (c.getFile() != null && !c.getFile().isEmpty()) {
					uce.setFileName(c.getFile().getOriginalFilename());
					uce.setFileUrl(FileUtils.saveFileOrigin(c.getFile(), servletContext));
				}

				userCertificateJpaRepository.save(uce);
			}
		}
		// insert certificates
		if (!certificates.isEmpty()) {
			for (Certificate c : certificates) {
				if (c.getDiploma() != null) {
					if (vipCertificates.contains(c.getDiploma())) {
						counselor.setLevelVip((short) 1);
					}

					UserCertificate certificate = new UserCertificate();
					certificate.setUserId(user.getId());
					certificate.setCreateDate(currentDate);
					certificate.setUpdateDate(currentDate);
					certificate.setType(c.getType());
					certificate.setName(c.getDiploma());
					if (c.getAuthor() != null && !c.getAuthor().trim().isEmpty()) {
						certificate.setAuthor(c.getAuthor());
					}
					if (c.getIssuedDate() != null && !c.getIssuedDate().trim().isEmpty()) {
						certificate.setIssuedDate(DataUtils.parseDate(c.getIssuedDate(), DataUtils.DatePattern.YYYYMM));
					}
					if (c.getFile() != null && !c.getFile().isEmpty()) {
						certificate.setFileName(c.getFile().getOriginalFilename());
						certificate.setFileUrl(FileUtils.saveFileOrigin(c.getFile(), servletContext));
					}

					UserCertificateEntity certificateEntity = new UserCertificateEntity();
					userCertificateServiceMapper.mapUserCertificateToUserCertificateEntity(certificate,
							certificateEntity);

					userCertificateJpaRepository.save(certificateEntity);
				}
			}
		}

		counselorServiceMapper.mapCounselorToCounselorEntity(counselor, counselorEntity);
		counselorJpaRepository.save(counselorEntity);

		// counselor education
		// find previous education
		UserEducationEntity userEducationEntity = userEducationJpaRepository.findByUserId(user.getId());
		if (userEducationEntity.getType().equals(param.getEduLevel())) {
			// update previous education
			userEducationEntity.setUpdateDate(currentDate);
			userEducationEntity.setUniversity(param.getUniversity());
			userEducationEntity.setFaculty(param.getFaculty());
			if (param.getEduFile() != null && !param.getEduFile().isEmpty()) {
				userEducationEntity.setFileName(param.getEduFile().getOriginalFilename());
				userEducationEntity.setFileUrl(FileUtils.saveFileOrigin(param.getEduFile(), servletContext));
			}
			userEducationJpaRepository.save(userEducationEntity);
		} else {
			// delete previous education
			userEducationJpaRepository.delete(userEducationEntity.getId());
			// insert new
			UserEducation education = new UserEducation();
			education.setCreateDate(currentDate);
			education.setUpdateDate(currentDate);
			education.setUserId(user.getId());
			education.setUniversity(param.getUniversity());
			education.setFaculty(param.getFaculty());
			education.setType(param.getEduLevel());
			if (param.getEduFile() != null && !param.getEduFile().isEmpty()) {
				education.setFileName(param.getEduFile().getOriginalFilename());
				education.setFileUrl(FileUtils.saveFileOrigin(param.getEduFile(), servletContext));
			}

			UserEducationEntity educationEntity = new UserEducationEntity();
			userEducationServiceMapper.mapUserEducationToUserEducationEntity(education, educationEntity);

			userEducationJpaRepository.save(educationEntity);
		}

		// counselor fields
		// delete all previous fields
		counselorFieldJpaRepository.deleteByCounselorId(user.getId());
		// insert new
		List<Field> fields = param.getCounselorFields();
		if (fields != null && !fields.isEmpty()) {
			for (Field field : fields) {
				if (field.getCategory() != null) {
					CounselorField cf = new CounselorField();
					cf.setCounselorId(counselor.getId());
					cf.setCreateDate(currentDate);
					cf.setUpdateDate(currentDate);
					cf.setCounselorFieldId(field.getCategory());

					CounselorFieldEntity cfe = new CounselorFieldEntity();
					counselorFieldServiceMapper.mapCounselorFieldToCounselorFieldEntity(cf, cfe);
					counselorFieldJpaRepository.save(cfe);
				}
			}
		}

		// counselor biography
		// delete all previous biography
		counselorBiographyJpaRepository.deleteCounselorBiography(user.getId());
		// insert new
		List<Biography> biographies = param.getBiographies();
		if (biographies != null && !biographies.isEmpty()) {
			for (Biography biography : biographies) {
				if (biography.getBiography() != null) {
					CounselorBiography cb = new CounselorBiography();
					cb.setCreateDate(currentDate);
					cb.setUpdateDate(currentDate);
					cb.setCounselorId(counselor.getId());
					cb.setContent(biography.getBiography());

					CounselorBiographyEntity cbe = new CounselorBiographyEntity();
					counselorBiographyServiceMapper.mapCounselorBiographyToCounselorBiographyEntity(cb, cbe);
					counselorBiographyJpaRepository.save(cbe);
				}
			}
		}

		List<UserFileEntity> previousOtherCertificates = userFileJpaRepository.findByUserIdAndType(user.getId(),
				(short) 1);
		List<OtherCertificate> otherCertificates = param.getOtherCertificates();

		Iterator<UserFileEntity> previousOtherCertificateIterator = previousOtherCertificates.iterator();
		while (previousOtherCertificateIterator.hasNext()) {

			UserFileEntity previousOtherCertificate = previousOtherCertificateIterator.next();
			Iterator<OtherCertificate> otherCertificateIterator = otherCertificates.iterator();
			while (otherCertificateIterator.hasNext()) {

				OtherCertificate otherCertificate = otherCertificateIterator.next();
				if (otherCertificate.getId() == null
						&& (otherCertificate.getFile() == null || otherCertificate.getFile().isEmpty())) {
					otherCertificateIterator.remove();
					continue;
				}
				if (otherCertificate.getId() != null
						&& otherCertificate.getId().equals(previousOtherCertificate.getId())) {
					previousOtherCertificateIterator.remove();
					otherCertificateIterator.remove();
				}
			}
		}

		if (!previousOtherCertificates.isEmpty()) {
			for (UserFileEntity ufe : previousOtherCertificates) {
				userFileJpaRepository.delete(ufe.getId());
			}
		}
		if (!otherCertificates.isEmpty()) {
			for (OtherCertificate oc : otherCertificates) {
				MultipartFile file = oc.getFile();
				UserFile userFile = new UserFile();
				userFile.setUserId(user.getId());
				userFile.setCreateDate(currentDate);
				userFile.setUpdateDate(currentDate);
				userFile.setFileName(file.getOriginalFilename());
				userFile.setFileUrl(FileUtils.saveFileOrigin(file, servletContext));
				userFile.setType((short) 1);

				UserFileEntity userFileEntity = new UserFileEntity();
				userFileServiceMapper.mapUserFileToUserFileEntity(userFile, userFileEntity);

				userFileJpaRepository.save(userFileEntity);
			}
		}
	}

	@Override
	public void updateBasicInfo(UserDto param) {
		Date currentDate = new Date();

		// update user
		User user = findById(param.getCounselorId());
		user.setUpdateDate(currentDate);
		if (param.getPwd() != null && !param.getPwd().isEmpty()) {
			user.setPassword(EncryptionUtils.jwtBuild(String.valueOf(param.getPwd())));
		}
		user.setFullname(param.getFullname());
		user.setPhone(param.getMobilephone());
		user.setDayOfBirth(DataUtils.parseDate(param.getDobYear() + "/" + param.getDobMonth() + "/" + param.getDobDay(),
				DataUtils.DatePattern.YYYYMMDD));
		user.setAddress(param.getAddress());

		update(user);

		// create password history
		if (param.getPwd() != null && !param.getPwd().isEmpty()) {
			PasswordHistoryEntity passwordHistoryEntity = new PasswordHistoryEntity();
			PasswordHistory passwordHistory = new PasswordHistory();
			passwordHistory.setCreateDate(currentDate);
			passwordHistory.setUserId(user.getId());
			passwordHistory.setPassword(user.getPassword());

			passwordHistoryServiceMapper.mapPasswordHistoryToPasswordHistoryEntity(passwordHistory,
					passwordHistoryEntity);
			passwordHistoryJpaRepository.save(passwordHistoryEntity);
		}

		// update counselor
		CounselorEntity counselorEntity = counselorJpaRepository.findOne(user.getId());
		Counselor counselor = counselorServiceMapper.mapCounselorEntityToCounselor(counselorEntity);
		counselor.setUpdateDate(currentDate);
		if (param.getBankId() != null)
			counselor.setBankId(param.getBankId());
		if (param.getAccountBankHolder() != null && !param.getAccountBankHolder().isEmpty())
			counselor.setAccountBankHolder(param.getAccountBankHolder());
		if (param.getAccountBankNumber() != null && !param.getAccountBankNumber().isEmpty())
			counselor.setAccountBankNumber(param.getAccountBankNumber());

		if (user.getDayOfBirth() != null) {
			counselor.setGuidancePassword(DataUtils.parseStringFromDate(user.getDayOfBirth(), "yyMMdd"));
		}

		counselorServiceMapper.mapCounselorToCounselorEntity(counselor, counselorEntity);
		counselorJpaRepository.save(counselorEntity);
	}

	@Override
	public void updateServiceInfo(UserDto param, ServletContext servletContext) {
		Date currentDate = new Date();
		Integer counselorId = param.getCounselorId();
		List<String> vipCertificates = Arrays.asList("전문상담사 1급 (수련감독자)", "상담심리사 1급 (주 수퍼바이저)", "전문상담사 1급", "상담심리사 1급");

		// update counselor
		CounselorEntity counselorEntity = counselorJpaRepository.findOne(param.getCounselorId());
		counselorEntity.setStatus(ApplicationDefine.Counselor_Status.WaitingRequestProfile.getCode());

		Counselor counselor = counselorServiceMapper.mapCounselorEntityToCounselor(counselorEntity);
		counselor.setIntroduce(param.getIntroduce());
		counselor.setCounselNumber(param.getCounseledTimes());
		counselor.setUpdateDate(currentDate);
		counselor.setStatus(ApplicationDefine.Counselor_Status.Waiting.getCode());

		MultipartFile avatar = param.getAvatar();
		if (avatar != null && !avatar.isEmpty()) {
			counselor.setThumbnailName(avatar.getOriginalFilename());
			counselor.setThumbnailUrl(FileUtils.saveFileOrigin(avatar, servletContext));
		}

		Integer mbti = param.getMbti();
		String mbtiSchool = param.getMbtiSchool();

		if (mbti != null && mbti.equals(1)) {
			counselor.setIsFromAssesta((short) 1);
			counselor.setMbtiCertificate(mbtiSchool);
		} else {
			counselor.setIsFromAssesta((short) 0);
			counselor.setMbtiCertificate(null);
		}

		// get Previous saved certificates
		List<UserCertificateEntity> previousCertificates = userCertificateJpaRepository.findByUserId(counselorId);
		List<Certificate> certificates = param.getCertificates();
		List<Certificate> certificatesToBeUpdate = new ArrayList<>();

		Iterator<UserCertificateEntity> userCertificateEntityIterator = previousCertificates.iterator();

		while (userCertificateEntityIterator.hasNext()) {
			UserCertificateEntity userCertificateEntity = userCertificateEntityIterator.next();
			Iterator<Certificate> certificateIterator = certificates.iterator();
			while (certificateIterator.hasNext()) {
				Certificate certificate = certificateIterator.next();
				if (userCertificateEntity.getId().equals(certificate.getId())
						&& userCertificateEntity.getType().equals(certificate.getType())) {

					if (certificate.getDiploma() != null && !certificate.getDiploma().isEmpty()) {
						certificateIterator.remove();
						userCertificateEntityIterator.remove();
						certificatesToBeUpdate.add(certificate);
					}
				}
			}
		}

		// update certificates
		if (!certificatesToBeUpdate.isEmpty()) {
			for (Certificate c : certificatesToBeUpdate) {
				if (vipCertificates.contains(c.getDiploma())) {
					counselor.setLevelVip((short) 1);
				}
			}
		}
		if (!certificates.isEmpty()) {
			for (Certificate c : certificates) {
				if (c.getDiploma() != null) {
					if (vipCertificates.contains(c.getDiploma())) {
						counselor.setLevelVip((short) 1);
					}
				}
			}
		}

		CounselorTemp counselorTemp = new CounselorTemp();
		BeanUtils.copyProperties(counselor, counselorTemp);
		counselorTemp.setId(null);
		counselorTemp.setCounselorId(counselorId);

		counselorTemp = counselorTempService.create(counselorTemp);

		// update certificates
		if (!certificatesToBeUpdate.isEmpty()) {
			for (Certificate c : certificatesToBeUpdate) {

				UserCertificateEntity uce = userCertificateJpaRepository.findOne(c.getId());
				UserCertificate uc = userCertificateServiceMapper.mapUserCertificateEntityToUserCertificate(uce);

				uc.setName(c.getDiploma());
				uc.setUpdateDate(currentDate);
				if (c.getAuthor() != null && !c.getAuthor().trim().isEmpty()) {
					uc.setAuthor(c.getAuthor());
				}
				if (c.getIssuedDate() != null && !c.getIssuedDate().trim().isEmpty()) {
					uc.setIssuedDate(DataUtils.parseDate(c.getIssuedDate(), DataUtils.DatePattern.YYYYMM));
				}
				if (c.getFile() != null && !c.getFile().isEmpty()) {
					uc.setFileName(c.getFile().getOriginalFilename());
					uc.setFileUrl(FileUtils.saveFileOrigin(c.getFile(), servletContext));
				}

				UserCertificateTemp uct = new UserCertificateTemp();
				BeanUtils.copyProperties(uc, uct);
				uct.setId(null);
				uct.setCounselorTempId(counselorTemp.getId());

				userCertificateTempService.create(uct);
			}
		}

		// insert certificates
		if (!certificates.isEmpty()) {
			for (Certificate c : certificates) {
				if (c.getDiploma() != null) {
					if (vipCertificates.contains(c.getDiploma())) {
						counselor.setLevelVip((short) 1);
					}

					UserCertificateTemp certificate = new UserCertificateTemp();
					certificate.setCounselorTempId(counselorTemp.getId());
					certificate.setUserId(counselor.getId());
					certificate.setCreateDate(currentDate);
					certificate.setUpdateDate(currentDate);
					certificate.setType(c.getType());
					certificate.setName(c.getDiploma());
					if (c.getAuthor() != null && !c.getAuthor().trim().isEmpty()) {
						certificate.setAuthor(c.getAuthor());
					}
					if (c.getIssuedDate() != null && !c.getIssuedDate().trim().isEmpty()) {
						certificate.setIssuedDate(DataUtils.parseDate(c.getIssuedDate(), DataUtils.DatePattern.YYYYMM));
					}
					if (c.getFile() != null && !c.getFile().isEmpty()) {
						certificate.setFileName(c.getFile().getOriginalFilename());
						certificate.setFileUrl(FileUtils.saveFileOrigin(c.getFile(), servletContext));
					}

					userCertificateTempService.create(certificate);
				}
			}
		}

		// counselor education
		// find previous education
		UserEducationEntity userEducationEntity = userEducationJpaRepository.findByUserId(counselorId);
		if (userEducationEntity.getType().equals(param.getEduLevel())) {
			UserEducation userEducation = userEducationServiceMapper
					.mapUserEducationEntityToUserEducation(userEducationEntity);

			// update previous education
			userEducationEntity.setUpdateDate(currentDate);
			userEducationEntity.setUniversity(param.getUniversity());
			userEducationEntity.setFaculty(param.getFaculty());
			if (param.getEduFile() != null && !param.getEduFile().isEmpty()) {
				userEducationEntity.setFileName(param.getEduFile().getOriginalFilename());
				userEducationEntity.setFileUrl(FileUtils.saveFileOrigin(param.getEduFile(), servletContext));
			}

			UserEducationTemp education = new UserEducationTemp();
			BeanUtils.copyProperties(userEducation, education);
			education.setId(null);
			education.setCounselorTempId(counselorTemp.getId());

			userEducationTempService.create(education);
		} else {
			// insert new
			UserEducationTemp education = new UserEducationTemp();
			education.setCreateDate(currentDate);
			education.setUpdateDate(currentDate);
			education.setUserId(counselorId);
			education.setUniversity(param.getUniversity());
			education.setFaculty(param.getFaculty());
			education.setType(param.getEduLevel());
			education.setCounselorTempId(counselorTemp.getId());
			if (param.getEduFile() != null && !param.getEduFile().isEmpty()) {
				education.setFileName(param.getEduFile().getOriginalFilename());
				education.setFileUrl(FileUtils.saveFileOrigin(param.getEduFile(), servletContext));
			}

			userEducationTempService.create(education);
		}

		// counselor fields
		List<Field> fields = param.getCounselorFields();
		if (fields != null && !fields.isEmpty()) {
			for (Field field : fields) {
				if (field.getCategory() != null) {
					CounselorFieldTemp cft = new CounselorFieldTemp();
					cft.setCounselorTempId(counselorTemp.getId());
					cft.setCreateDate(currentDate);
					cft.setUpdateDate(currentDate);
					cft.setCounselorFieldId(field.getCategory());

					counselorFieldTempService.create(cft);
				}
			}
		}

		// counselor biography
		List<Biography> biographies = param.getBiographies();
		if (biographies != null && !biographies.isEmpty()) {
			for (Biography biography : biographies) {
				if (biography.getBiography() != null) {
					CounselorBiographyTemp cbt = new CounselorBiographyTemp();
					cbt.setCreateDate(currentDate);
					cbt.setUpdateDate(currentDate);
					cbt.setCounselorId(counselor.getId());
					cbt.setContent(biography.getBiography());
					cbt.setCounselorTempId(counselorTemp.getId());

					counselorBiographyTempService.create(cbt);
				}
			}
		}

		List<UserFileEntity> previousOtherCertificates = userFileJpaRepository.findByUserIdAndType(counselorId,
				(short) 1);
		List<OtherCertificate> otherCertificates = param.getOtherCertificates();
		List<UserFileEntity> otherCertificatesToBeUpdate = new ArrayList<>();

		Iterator<UserFileEntity> previousOtherCertificateIterator = previousOtherCertificates.iterator();
		while (previousOtherCertificateIterator.hasNext()) {

			UserFileEntity previousOtherCertificate = previousOtherCertificateIterator.next();
			Iterator<OtherCertificate> otherCertificateIterator = otherCertificates.iterator();
			while (otherCertificateIterator.hasNext()) {

				OtherCertificate otherCertificate = otherCertificateIterator.next();
				if (otherCertificate.getId() == null
						&& (otherCertificate.getFile() == null || otherCertificate.getFile().isEmpty())) {
					otherCertificateIterator.remove();
					continue;
				}
				if (otherCertificate.getId() != null
						&& otherCertificate.getId().equals(previousOtherCertificate.getId())) {
					otherCertificatesToBeUpdate.add(previousOtherCertificate);
					previousOtherCertificateIterator.remove();
					otherCertificateIterator.remove();
				}
			}
		}

		if (!otherCertificatesToBeUpdate.isEmpty()) {
			for (UserFileEntity ufe : otherCertificatesToBeUpdate) {
				UserFileTemp uft = new UserFileTemp();
				BeanUtils.copyProperties(ufe, uft);
				uft.setId(null);
				uft.setCounselorTempId(counselorTemp.getId());

				userFileTempService.create(uft);
			}
		}
		if (!otherCertificates.isEmpty()) {
			for (OtherCertificate oc : otherCertificates) {
				MultipartFile file = oc.getFile();
				UserFileTemp uft = new UserFileTemp();
				uft.setUserId(counselorId);
				uft.setCreateDate(currentDate);
				uft.setUpdateDate(currentDate);
				uft.setFileName(file.getOriginalFilename());
				uft.setFileUrl(FileUtils.saveFileOrigin(file, servletContext));
				uft.setType((short) 1);
				uft.setCounselorTempId(counselorTemp.getId());

				userFileTempService.create(uft);
			}
		}
	}

	@Override
	public List<UserEntity> listByLastLogin(Integer year, Integer month, Integer date) {
		try {
			return userJpaRepository.listByLastLogin(year, month, date);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public void updateHeartByUserId(Integer userId, Integer heart, Integer typePayment, Integer typeUse,
			String typeShare) {
		try {
			PaymentHistory p = new PaymentHistory();
			p.setCreateDate(new Date());
			p.setMoney(0);
			p.setOsName("");
			p.setStatus(ApplicationDefine.Recharge_Status.PaymentSuccess.getCode());
			p.setTypeCoin(ApplicationDefine.Payment_TypeCoin.Heart.getCode());
			p.setTypePayment(typePayment);
			p.setTypeUse(typeUse);
			p.setCoin(heart);
			p.setUpdateDate(new Date());
			p.setUserId(userId);
			p.setReason(typeShare);
			p = paymentHistoryService.create(p);
			userJpaRepository.updateHeartByUserId(userId);
		} catch (Exception e) {
			e.printStackTrace();
			System.out.println(e);
		}
	}
	
	@Override
	public void updateCoinByUserId(Integer userId, Integer heart, Integer typePayment, Integer typeUse,
			String typeShare) {
		try {
			PaymentHistory p = new PaymentHistory();
			p.setCreateDate(new Date());
			p.setMoney(0);
			p.setOsName("");
			p.setStatus(ApplicationDefine.Recharge_Status.PaymentSuccess.getCode());
			p.setTypeCoin(ApplicationDefine.Payment_TypeCoin.Coin.getCode());
			p.setTypePayment(typePayment);
			p.setTypeUse(typeUse);
			p.setCoin(heart);
			p.setUpdateDate(new Date());
			p.setUserId(userId);
			p.setReason(typeShare);
			p = paymentHistoryService.create(p);
			userJpaRepository.updateHeartByUserId(userId);
		} catch (Exception e) {
			e.printStackTrace();
			System.out.println(e);
		}
	}

	@Override
	public List<UserEntity> listByChangeHeartDate(Date date) {
		try {
			return userJpaRepository.listByChangeHeartDate(date);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public void updateLogin(Integer userId) {
		UserEntity userEntity = userJpaRepository.findOne(userId);
		userEntity.setLoginFirst(0);
	}

	@Override
	public void updateHeartByUserId(Integer userId) {
		userJpaRepository.updateHeartByUserId(userId);
	}

	@Override
	public void updateVoucherNumberByUserId(Integer userId) {
		try {
			userJpaRepository.updateVoucherNumberByUserId(userId);
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	@Override
	public PageCustom<User> filterPushMember(SearchPushMember searchMember, Integer page, Integer size) {

		String STR_SELECT = "SELECT U.id, U.username, U.fullname, U.os_name, U.last_login, U.device_id ";

		String STR_COUNT = "SELECT count(*) ";

		String STR_FROM = " FROM user U ";

		String STR_WHERE = "where 1=1 ";
		if (!searchMember.getSendAll()) {
			if (searchMember.getYearFrom() != null) {
				STR_WHERE += " and YEAR(U.day_of_birth) >= " + searchMember.getYearFrom();
			}

			if (searchMember.getYearTo() != null) {
				STR_WHERE += " and YEAR(U.day_of_birth) <= " + searchMember.getYearTo();
			}

			if (searchMember.getMan() != searchMember.getWomen()) {
				if (searchMember.getMan()) {
					STR_WHERE += " and U.gender = 1";
				} else {
					STR_WHERE += " and U.gender = 0";
				}
			}

			if (searchMember.getPaymentYes() != searchMember.getPaymentNo()) {
				if (searchMember.getPaymentYes()) {
					STR_WHERE += " and U.id in (SELECT DISTINCT p.user_id FROM payment_history p where p.type_coin =1 and p.type_payment =2 and p.status =1) ";
				} else {
					STR_WHERE += " and U.id not in (SELECT DISTINCT p.user_id FROM payment_history p where p.type_coin =1 and p.type_payment =2 and p.status =1) ";
				}
			}

			if (searchMember.getCounselingYes() != searchMember.getCounselingNo()) {
				if (searchMember.getCounselingYes()) {
					STR_WHERE += " and U.id in (SELECT DISTINCT cs.user_id FROM counseling_session cs where cs.status != 0 ) ";
				} else {
					STR_WHERE += " and U.id not in (SELECT DISTINCT cs.user_id FROM counseling_session cs where cs.status != 0 ) ";
				}
			}

			if (searchMember.getTestPsyNo() != searchMember.getTestPsyYes()) {
				if (searchMember.getTestPsyYes()) {
					STR_WHERE += " and U.id in (SELECT DISTINCT uq.user_id from user_questionaire uq where uq.type =2) ";
				} else {
					STR_WHERE += " and U.id not in (SELECT DISTINCT uq.user_id from user_questionaire uq where uq.type =2) ";
				}
			}

			if (searchMember.getMemberNormal() != searchMember.getMemberBusiness()) {
				if (searchMember.getMemberNormal()) {
					STR_WHERE += " and U.role_id = 1";
				} else {
					STR_WHERE += " and U.role_id = 5";
				}
			} else {
				STR_WHERE += " and U.role_id in(1,5)";
			}

			if (searchMember.getBusinessSubIds() != null) {
				STR_WHERE += " and U.business_sub_id in " + ArrayUtils.toString(searchMember.getBusinessSubIds()).replace("{", "(").replace("}", ")") ;
			}

			if (searchMember.getVersionIosIds() != null) {
				STR_WHERE += " and U.app_vesion_id in " +  ArrayUtils.toString(searchMember.getVersionIosIds()).replace("{", "(").replace("}", ")") ;
			}

			if (searchMember.getVersionAndroidIds() != null) {
				STR_WHERE += " and U.app_vesion_id in " + ArrayUtils.toString(searchMember.getVersionAndroidIds()).replace("{", "(").replace("}", ")") ;
			}

			if (searchMember.getVoucherYes() != searchMember.getVoucherNo()) {
				if (searchMember.getVoucherYes()) {
					STR_WHERE += " and U.id in (SELECT DISTINCT v.user_id from voucher_user v where v.status_use = 0) ";
				} else {
					STR_WHERE += " and U.id not in (SELECT DISTINCT v.user_id from voucher_user v where v.status_use = 0) ";
				}
			}

			if (searchMember.getIos()) {
				STR_WHERE += " and U.os_name like 'ios' ";
			}

			if (searchMember.getAndroid()) {
				STR_WHERE += " and U.os_name like 'android' ";
			}

			if (searchMember.getVoucherYes() != searchMember.getVoucherNo()) {
				if (searchMember.getVoucherYes()) {
					STR_WHERE += " and U.id in (SELECT DISTINCT v.user_id from voucher_user v where v.status_use = 0) ";
				} else {
					STR_WHERE += " and U.id not in (SELECT DISTINCT v.user_id from voucher_user v where v.status_use = 0) ";
				}
			}

			if (searchMember.getLoginDateFrom() != null && searchMember.getLoginDateFrom() != "") {
				STR_WHERE += " AND DATE_FORMAT(U.last_login, '%Y/%m/%d') >= '" + searchMember.getLoginDateFrom() + "' ";
			}
			if (searchMember.getLoginDateTo() != null && searchMember.getLoginDateTo() != "") {
				STR_WHERE += " AND DATE_FORMAT(U.last_login, '%Y/%m/%d') <= '" + searchMember.getLoginDateTo() + "' ";
			}

			if (ArrayUtils.isNotEmpty(searchMember.getDeleteUserIds())) {
				String str = Arrays.toString(searchMember.getDeleteUserIds());
				str = str.replace("[", "(").replace("]", ")");
				STR_WHERE += " and U.id not in " + str;
			}
		} else {
			STR_WHERE += " and U.role_id in(1,5) ";
		}

		String STR_ORDER = " order by U.create_date DESC limit " + (page - 1) * size + "," + page * size;

		String SELECT_TOTAL_ANDROID = "SELECT COUNT(U.id) " + STR_FROM + STR_WHERE + " and U.os_name like 'android'";
		String SELECT_TOTAL_IOS = "SELECT COUNT(U.id)" + STR_FROM + STR_WHERE + " and U.os_name like 'ios'";

		try {
			Query q = em.createNativeQuery(STR_SELECT + STR_FROM + STR_WHERE + STR_ORDER);
			@SuppressWarnings("unchecked")
			List<Object[]> reservation = q.getResultList();
			List<User> list = new ArrayList<>();
			for (Object[] i : reservation) {
				User u = new User();
				u.setId((Integer) i[0]);
				u.setUsername((String) i[1]);
				u.setFullname((String) i[2]);
				u.setOsName((String) i[3]);

				if (i[4] != null) {
					Date d = (Date) i[4];
					SimpleDateFormat df1 = new SimpleDateFormat("yyyy-MM-dd");
					SimpleDateFormat df2 = new SimpleDateFormat("HH:mm:ss");
					String str = "<p>" + df1.format(d) + "</p>";
					str += "<p>" + df2.format(d) + "</p>";
					u.setAddress(str);
				} else {
					u.setAddress("");
				}
				u.setDeviceId((String) i[5]);
				list.add(u);
			}
			Query c = em.createNativeQuery(STR_COUNT + STR_FROM + STR_WHERE);
			Long totalCount = ((Number) c.getSingleResult()).longValue();
			Query d = em.createNativeQuery(SELECT_TOTAL_ANDROID);
			Query e = em.createNativeQuery(SELECT_TOTAL_IOS);
			Integer totalAdd = 0;
			Integer totalDeducation = 0;
			if (d.getSingleResult() != null) {
				totalAdd = Integer.valueOf(d.getSingleResult().toString());
			}

			if (e.getSingleResult() != null) {
				totalDeducation = Integer.valueOf(e.getSingleResult().toString());
			}

			List<Object> list_param = new ArrayList<>();
			list_param.add(totalAdd);
			list_param.add(totalDeducation);
			PageCustom<User> pageCustom = new PageCustom<User>(list, totalCount, page, size, list_param);
			return pageCustom;
		} catch (Exception e) {
			e.printStackTrace();
		}

		return null;
	}

	@Override
	public PageCustom<UserStatistics> filterMemberStatistics(SearchStatistics s, Integer page, Integer size) {
		try {
			Calendar start = Calendar.getInstance();
			Calendar end = Calendar.getInstance();
			
			if (s.getType().equals("weekly")) {
				start.set(Calendar.WEEK_OF_YEAR, s.getFromWeek());
				start.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY);
				end.set(Calendar.WEEK_OF_YEAR, s.getToWeek());
				end.set(Calendar.DAY_OF_WEEK, Calendar.SUNDAY);
			} else if (s.getType().equals("monthly")) {
				start.set(s.getYearMonthly(), (s.getFromMonth() - 1), 1, 0, 0, 0);
				end.set(s.getYearMonthly(), (s.getToMonth() - 1), 1, 23, 59, 59);
				end.set(Calendar.DAY_OF_MONTH, end.getActualMaximum(Calendar.DAY_OF_MONTH));

			} else {
				if (s.getStartDate() != null) {
					start.setTime(DataUtils.parseDate(s.getStartDate(), "yyyy/MM/dd"));
				}
				if (s.getEndDate() != null) {
					end.setTime(DataUtils.parseDate(s.getEndDate(), "yyyy/MM/dd"));
				}
			}
			
			//Start query
			String SELECT = "SELECT u.id, u.role_id, u.status_active, u.withdrawal_date, u.create_date ";
			String FROM = "FROM user u ";
			String WHERE = "WHERE u.role_id in (1,5) and u.create_date is not null ";
			String JOIN_CLAUSE = "";
			String WITHDRAWL_CLAUSE = " AND u.status_active =3";
			
			//start and end date
			JOIN_CLAUSE += " AND DATE_FORMAT(u.create_date, '%Y-%m-%d') >= '" + DataUtils.parseStringFromDate(start.getTime(), "yyyy-MM-dd")+"'";
			WITHDRAWL_CLAUSE += " AND DATE_FORMAT(u.withdrawal_date, '%Y-%m-%d') >= '" + DataUtils.parseStringFromDate(start.getTime(), "yyyy-MM-dd")+"'";
			JOIN_CLAUSE += " AND DATE_FORMAT(u.create_date, '%Y-%m-%d') <= '" + DataUtils.parseStringFromDate(end.getTime(), "yyyy-MM-dd")+"'";
			WITHDRAWL_CLAUSE += " AND DATE_FORMAT(u.withdrawal_date, '%Y-%m-%d') <= '" + DataUtils.parseStringFromDate(end.getTime(), "yyyy-MM-dd")+"'";
			
			//os name
			if (s.isIos() != s.isAndroid()) {
				if (s.isIos()) {
					WHERE += " AND u.os_name like 'ios' ";
				} else {
					WHERE += " AND u.os_name like 'android' ";
				}
			}
			
			//order by
			String ORDER_JOIN = " ORDER BY u.create_date ASC"; 
			String ORDER_WITHDRAWL = " ORDER BY u.withdrawal_date ASC"; 
			
			// get list user join
			List<User> listUserJoin = new ArrayList<>();
			Query query1 = em.createNativeQuery(SELECT + FROM + WHERE + JOIN_CLAUSE + ORDER_JOIN);
			@SuppressWarnings("unchecked")
			List<Object[]> listJoin = query1.getResultList();
			for (Object[] i : listJoin) {
				User u = new User();
				u.setId((Integer) i[0]);
				u.setRoleId((Integer) i[1]);
				u.setStatusActive((Short) i[2]);
				u.setCreateDate((Date) i[4]);
				listUserJoin.add(u);
			}
			
			// get list user withdrawl
			List<User> listUserWithdrawl = new ArrayList<>();
			Query query2 = em.createNativeQuery(SELECT + FROM + WHERE + WITHDRAWL_CLAUSE + ORDER_WITHDRAWL);
			@SuppressWarnings("unchecked")
			List<Object[]> listWithdrawl = query2.getResultList();
			for (Object[] i : listWithdrawl) {
				User u = new User();
				u.setId((Integer) i[0]);
				u.setRoleId((Integer) i[1]);
				u.setStatusActive((Short) i[2]);
				u.setWithdrawalDate((Date) i[3]);
				listUserWithdrawl.add(u);
			}
			
			
			
			//count data
			if(s.getType().equals("monthly")){
				return getStatisticsByMonthly(listUserJoin, listUserWithdrawl, s , page, size);
			}else if(s.getType().equals("weekly")){
				return getStatisticsByWeekly(listUserJoin, listUserWithdrawl, s , page, size);
			}else{
				return getStatisticsByDaily(listUserJoin, listUserWithdrawl, start, end, page, size);
			}

			
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
		
	}
	
	@Override
	public PageCustom<UserStatistics> getStatisticsByWeekly(List<User> listUserJoin,List<User> listUserWithdrawl , SearchStatistics s, Integer page, Integer size) {
		try {
			
			Integer totalRegister = 0;
			Integer totalJoinNormal = 0;
			Integer totalJoinBusiness = 0;
			Integer totalWithdrawlNormal = 0;
			Integer totalWithdrawlBusiness = 0;
			
			//count data
			List<UserStatistics> listStatistics = new ArrayList<>();
				int indexJoin = 0;
				int indexWithDrawl = 0;
				for (int i = s.getFromWeek(); i <= s.getToWeek(); i++) {
					UserStatistics us = new UserStatistics();
					Calendar startWeek = Calendar.getInstance();
					startWeek.set(Calendar.WEEK_OF_YEAR, i);        
					startWeek.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY);
					Calendar endWeek = Calendar.getInstance();
					endWeek.set(Calendar.WEEK_OF_YEAR, i);        
					endWeek.set(Calendar.DAY_OF_WEEK, Calendar.SUNDAY);
					
					us.setTitle("W"+i+" ("+DataUtils.parseStringFromDate(startWeek.getTime(), "MM/dd")+" ~ "+DataUtils.parseStringFromDate(endWeek.getTime(), "MM/dd")+")");
					us.setId(i);
					//calculate total regiter and total join
					Calendar cal = Calendar.getInstance();
					for (int j = indexJoin; j < listUserJoin.size(); j++) {
						User user = listUserJoin.get(indexJoin);
						cal.setTime(user.getCreateDate());
						if(cal.get(Calendar.WEEK_OF_YEAR) == i){
							totalRegister++;
							if(user.getRoleId() == ApplicationDefine.USER_ROLE_USER){
								us.setTotalJoinNormal(us.getTotalJoinNormal()+1);
								totalJoinNormal++;
							}else{
								us.setTotalJoinBusiness(us.getTotalJoinBusiness()+1);
								totalJoinBusiness++;
							}
							indexJoin++;
						}else{
							break;
						}
					}
					
					
					//calculate total withdrawl
					for (int j = indexWithDrawl; j < listUserWithdrawl.size(); j++) {
						User user = listUserWithdrawl.get(indexWithDrawl);
						cal.setTime(user.getWithdrawalDate());
						if(cal.get(Calendar.WEEK_OF_YEAR) == i){
							totalRegister--;
							if(user.getRoleId() == ApplicationDefine.USER_ROLE_USER){
								us.setTotalWithdrawlNormal(us.getTotalWithdrawlNormal()+1);
								totalWithdrawlNormal++;
							}else{
								us.setTotalWithdrawlBusiness(us.getTotalJoinBusiness()+1);
								totalWithdrawlBusiness++;
							}
							indexWithDrawl++;
						}else{
							break;
						}
					}
					us.setTotalRegister(totalRegister);
					listStatistics.add(us);
				}
			//data in header table
			List<Object> listOther = new ArrayList<>();
			listOther.add(totalRegister);
			listOther.add(totalJoinNormal);
			listOther.add(totalJoinBusiness);
			listOther.add(totalWithdrawlNormal);
			listOther.add(totalWithdrawlBusiness);
			
			Comparator<UserStatistics> comparator = new Comparator<UserStatistics>() {
			    @Override
			    public int compare(UserStatistics left, UserStatistics right) {
			        return right.getId() - left.getId(); // use your logic
			    }
			};
			
			Collections.sort(listStatistics,comparator);
			PageCustom<UserStatistics> pageCustom = new PageCustom<UserStatistics>(listStatistics, (long)30, page, size, listOther);
			return pageCustom;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
		
	}
	
	@Override
	public PageCustom<UserStatistics> getStatisticsByMonthly(List<User> listUserJoin,List<User> listUserWithdrawl , SearchStatistics s, Integer page, Integer size) {
		try {
			
			Integer totalRegister = 0;
			Integer totalJoinNormal = 0;
			Integer totalJoinBusiness = 0;
			Integer totalWithdrawlNormal = 0;
			Integer totalWithdrawlBusiness = 0;
			
			//count data
			List<UserStatistics> listStatistics = new ArrayList<>();
				int indexJoin = 0;
				int indexWithDrawl = 0;
				for (int i = s.getFromMonth(); i <= s.getToMonth(); i++) {
					UserStatistics us = new UserStatistics();
					us.setTitle(i+"월");
					us.setId(i);
					//calculate total regiter and total join
					for (int j = indexJoin; j < listUserJoin.size(); j++) {
						User user = listUserJoin.get(indexJoin);
						if((user.getCreateDate().getMonth()+1)==i){
							totalRegister++;
							if(user.getRoleId() == ApplicationDefine.USER_ROLE_USER){
								us.setTotalJoinNormal(us.getTotalJoinNormal()+1);
								totalJoinNormal++;
							}else{
								us.setTotalJoinBusiness(us.getTotalJoinBusiness()+1);
								totalJoinBusiness++;
							}
							indexJoin++;
						}else{
							break;
						}
					}
					
					
					//calculate total withdrawl
					for (int j = indexWithDrawl; j < listUserWithdrawl.size(); j++) {
						User user = listUserWithdrawl.get(indexWithDrawl);
						if((user.getWithdrawalDate().getMonth()+1)==i){
							totalRegister--;
							if(user.getRoleId() == ApplicationDefine.USER_ROLE_USER){
								us.setTotalWithdrawlNormal(us.getTotalWithdrawlNormal()+1);
								totalWithdrawlNormal++;
							}else{
								us.setTotalWithdrawlBusiness(us.getTotalJoinBusiness()+1);
								totalWithdrawlBusiness++;
							}
							indexWithDrawl++;
						}else{
							break;
						}
					}
					us.setTotalRegister(totalRegister);
					listStatistics.add(us);
				}
			//data in header table
			List<Object> listOther = new ArrayList<>();
			listOther.add(totalRegister);
			listOther.add(totalJoinNormal);
			listOther.add(totalJoinBusiness);
			listOther.add(totalWithdrawlNormal);
			listOther.add(totalWithdrawlBusiness);
			
			Comparator<UserStatistics> comparator = new Comparator<UserStatistics>() {
			    @Override
			    public int compare(UserStatistics left, UserStatistics right) {
			        return right.getId() - left.getId(); // use your logic
			    }
			};
			
			Collections.sort(listStatistics,comparator);
			PageCustom<UserStatistics> pageCustom = new PageCustom<UserStatistics>(listStatistics, (long)30, page, size, listOther);
			return pageCustom;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
		
	}
	
	
	
	@Override
	public PageCustom<UserStatistics> getStatisticsByDaily(List<User> listUserJoin,List<User> listUserWithdrawl , Calendar start, Calendar end, Integer page, Integer size) {
		try {
			
			Integer totalRegister = 0;
			Integer totalJoinNormal = 0;
			Integer totalJoinBusiness = 0;
			Integer totalWithdrawlNormal = 0;
			Integer totalWithdrawlBusiness = 0;
			
			long dayDiff = DataUtils.daysBetween(start, end);
			Calendar compareDate = Calendar.getInstance();
			System.out.println("Start:"+DataUtils.parseStringFromDate(start.getTime(), "yyyy/MM/dd"));
			//count data
			List<UserStatistics> listStatistics = new ArrayList<>();
				int indexJoin = 0;
				int indexWithDrawl = 0;
				for (int i = 0; i < (dayDiff+1); i++) {
					UserStatistics us = new UserStatistics();
					us.setTitle(DataUtils.parseStringFromDate(start.getTime(), "yyyy-MM-dd"));
					us.setId(i);
					//calculate total regiter and total join
					for (int j = indexJoin; j < listUserJoin.size(); j++) {
						User user = listUserJoin.get(indexJoin);
						compareDate.setTime(user.getCreateDate());
						if(DataUtils.daysBetween(compareDate, start) == 0){
							totalRegister++;
							if(user.getRoleId() == ApplicationDefine.USER_ROLE_USER){
								us.setTotalJoinNormal(us.getTotalJoinNormal()+1);
								totalJoinNormal++;
							}else{
								us.setTotalJoinBusiness(us.getTotalJoinBusiness()+1);
								totalJoinBusiness++;
							}
							indexJoin++;
						}else{
							break;
						}
					}
					
					
					//calculate total withdrawl
					for (int j = indexWithDrawl; j < listUserWithdrawl.size(); j++) {
						User user = listUserWithdrawl.get(indexWithDrawl);
						compareDate.setTime(user.getWithdrawalDate());
						if( DataUtils.daysBetween(compareDate, start) == 0 ){
							totalRegister--;
							if(user.getRoleId() == ApplicationDefine.USER_ROLE_USER){
								us.setTotalWithdrawlNormal(us.getTotalWithdrawlNormal()+1);
								totalWithdrawlNormal++;
							}else{
								us.setTotalWithdrawlBusiness(us.getTotalJoinBusiness()+1);
								totalWithdrawlBusiness++;
							}
							indexWithDrawl++;
						}else{
							break;
						}
					}
					us.setTotalRegister(totalRegister);
					listStatistics.add(us);
					start.add(Calendar.DAY_OF_YEAR, 1);
				}
				
			//data in header table
			List<Object> listOther = new ArrayList<>();
			listOther.add(totalRegister);
			listOther.add(totalJoinNormal);
			listOther.add(totalJoinBusiness);
			listOther.add(totalWithdrawlNormal);
			listOther.add(totalWithdrawlBusiness);
			
			Comparator<UserStatistics> comparator = new Comparator<UserStatistics>() {
			    @Override
			    public int compare(UserStatistics left, UserStatistics right) {
			        return right.getId() - left.getId(); // use your logic
			    }
			};
			
			Collections.sort(listStatistics,comparator);
			//paging
			Integer startSub = 0;
			Integer endList = listStatistics.size();
			Integer endSub = size;
			
			if(dayDiff > size){
				startSub = (page - 1)*30;
				endSub = page*30;
				if(endSub > endList){
					endSub = endList;
				}
				listStatistics = listStatistics.subList(startSub, endSub);
			}
			
			PageCustom<UserStatistics> pageCustom = new PageCustom<UserStatistics>(listStatistics , dayDiff, page, size, listOther);
			return pageCustom;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	@Override
	public List<User> getCounselorsByFullName(String keyword) {
		try {
			List<UserEntity> entities = userJpaRepository.getCounselorsByFullName("%"+keyword+"%");
			List<User> beans = new ArrayList<>();
			for (UserEntity userEntity : entities) {
				beans.add(userServiceMapper.mapUserEntityToUser(userEntity));
			}
			return beans;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public MemberStatisticsChart getUserStatisticsChart(Date now) {
		
		try {
			MemberStatisticsChart u = new MemberStatisticsChart();
			Integer[] roleIds = new Integer[2];
			roleIds[0] = ApplicationDefine.USER_ROLE_MEMBER_BUSSINESS;
			roleIds[1] = ApplicationDefine.USER_ROLE_USER;
			List<Object> listGender = userJpaRepository.getGenderChart(now, roleIds);
			List<Object> listAge = userJpaRepository.getAgeChart(now, roleIds);
			List<Object> listMember = userJpaRepository.getUserTypeChart(now);
			List<Object> listOs = userJpaRepository.getOsChart(now, roleIds);
			
			u.setGenderChart(listGender);
			u.setAgeChart(listAge);
			u.setMemberChart(listMember);
			u.setOsChart(listOs);
			
			return u;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	@Override
	public MemberStatisticsChart getCounselorStatisticsChart(Date now) {
		
		try {
			MemberStatisticsChart u = new MemberStatisticsChart();
			Integer[] roleIds = new Integer[2];
			roleIds[0] = ApplicationDefine.USER_ROLE_COUNSELOR_FREELANCE;
			roleIds[1] = ApplicationDefine.USER_ROLE_COUNSELOR_IN_CENTER;
			List<Object> listGender = userJpaRepository.getGenderCounselorChart(now, roleIds);
			List<Object> listAge = userJpaRepository.getAgeCounselorChart(now, roleIds);
			List<Object> listMember = userJpaRepository.getCounselorTypeChart(now);
			
			u.setGenderChart(listGender);
			u.setAgeChart(listAge);
			u.setMemberChart(listMember);
			
			return u;
		} catch (Exception e) {
			return null;
		}
	}
	
	@Override
	public PageCustom<CounselorStatistics> filterCounselorStatistics(SearchStatistics s, Integer page, Integer size) {
		try {
			Calendar start = Calendar.getInstance();
			Calendar end = Calendar.getInstance();
			
			if (s.getType().equals("weekly")) {
				start.set(Calendar.WEEK_OF_YEAR, s.getFromWeek());
				start.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY);
				end.set(Calendar.WEEK_OF_YEAR, s.getToWeek());
				end.set(Calendar.DAY_OF_WEEK, Calendar.SUNDAY);
			} else if (s.getType().equals("monthly")) {
				start.set(s.getYearMonthly(), (s.getFromMonth() - 1), 1, 0, 0, 0);
				end.set(s.getYearMonthly(), (s.getToMonth() - 1), 1, 23, 59, 59);
				end.set(Calendar.DAY_OF_MONTH, end.getActualMaximum(Calendar.DAY_OF_MONTH));
			} else {
				if (s.getStartDate() != null) {
					start.setTime(DataUtils.parseDate(s.getStartDate(), "yyyy/MM/dd"));
				}
				if (s.getEndDate() != null) {
					end.setTime(DataUtils.parseDate(s.getEndDate(), "yyyy/MM/dd"));
				}
			}
			String strStartDate = DataUtils.parseStringFromDate(start.getTime(), "yyyy-MM-dd");
			String strEndDate = DataUtils.parseStringFromDate(end.getTime(), "yyyy-MM-dd");
			
			// get list counselor regiester
			String SELECT_REGISTER = "SELECT c.id, c.create_date, u.role_id "
						  			+ "FROM counselor c "
						  			+ "INNER JOIN user u on c.id = u.id "
						  			+ "WHERE DATE(u.create_date) >= '" + strStartDate+"' AND DATE(u.create_date) <= '"+strEndDate+"' "
						  			+ "ORDER BY u.create_date ASC";
			List<User> listRegister = new ArrayList<>();
			Query query1 = em.createNativeQuery(SELECT_REGISTER);
			@SuppressWarnings("unchecked")
			List<Object[]> listObject1 = query1.getResultList();
			for (Object[] i : listObject1) {
				User c = new User();
				c.setId((Integer) i[0]);
				c.setCreateDate((Date) i[1]);
				c.setRoleId((Integer) i[2]);
				listRegister.add(c);
			}
			
			// get list counselor admin accept
			String SELECT_ACCEPT = "SELECT c.id, c.accept_counselor_date, u.role_id "
						  			+ "FROM counselor c "
						  			+ "INNER JOIN user u on c.id = u.id "
						  			+ "WHERE DATE(c.accept_counselor_date) >= '" + strStartDate+"' AND DATE(c.accept_counselor_date) <= '"+strEndDate+"' "
									+ "ORDER BY c.accept_counselor_date ASC";
			List<User> listAccept = new ArrayList<>();
			Query query2 = em.createNativeQuery(SELECT_ACCEPT);
			@SuppressWarnings("unchecked")
			List<Object[]> listObject2 = query2.getResultList();
			for (Object[] i : listObject2) {
				User c = new User();
				c.setId((Integer) i[0]);
				c.setCreateDate((Date) i[1]);
				c.setRoleId((Integer) i[2]);
				listAccept.add(c);
			}
			
			// get list counselor withdrawl
			String SELECT_WITHDRAWL = "SELECT c.id, u..withdrawal_date, u.role_id "
						  			+ "FROM counselor c "
						  			+ "INNER JOIN user u on c.id = u.id "
						  			+ "WHERE DATE(u.withdrawal_date) >= '" + strStartDate+"' "
						  		    + "AND DATE(u.withdrawal_date) <= '"+strEndDate+"' "
						  		    + "AND u.status_active = 3 "
									+ "ORDER BY u.withdrawal_date ASC";
			List<User> listWithdrawl = new ArrayList<>();
			Query query3 = em.createNativeQuery(SELECT_WITHDRAWL);
			@SuppressWarnings("unchecked")
			List<Object[]> listObject3 = query2.getResultList();
			for (Object[] i : listObject3) {
				User c = new User();
				c.setId((Integer) i[0]);
				c.setCreateDate((Date) i[1]);
				listWithdrawl.add(c);
			}
			
			//count data
			if(s.getType().equals("monthly")){
				return getStatisticsCounselorByMonthly(listRegister, listRegister, listWithdrawl, s , page, size);
			}else if(s.getType().equals("weekly")){
				return getStatisticsCounselorByWeekly(listRegister, listRegister, listWithdrawl, s , page, size);
			}else{
				return getStatisticsCounselorByDaily(listRegister, listRegister, listWithdrawl, start, end, page, size);
			}

			
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
		
	}
	
	@Override
	public PageCustom<CounselorStatistics> getStatisticsCounselorByDaily(List<User> listRegister, List<User> listAccept, List<User> listWithdrawl , Calendar start, Calendar end, Integer page, Integer size) {
		try {
			
			Integer totalRegister = 0;
			
			Integer totalRequestFreelacer = 0;
			Integer totalRequestCenter = 0;
			
			Integer totalAcceptFreelacer = 0;
			Integer totalAcceptCenter = 0;
			
			Integer totalWithdrawlFreelacer = 0;
			Integer totalWithdrawlCenter = 0;
			
			long dayDiff = DataUtils.daysBetween(start, end);
			Calendar compareDate = Calendar.getInstance();
			System.out.println("Start:"+DataUtils.parseStringFromDate(start.getTime(), "yyyy/MM/dd"));
			//count data
			List<CounselorStatistics> listStatistics = new ArrayList<>();
				int indexRegister = 0;
				int indexWithDrawl = 0;
				int indexAccept = 0;
				for (int i = 0; i < (dayDiff+1); i++) {
					CounselorStatistics us = new CounselorStatistics();
					us.setTitle(DataUtils.parseStringFromDate(start.getTime(), "yyyy-MM-dd"));
					us.setId(i);
					//calculate total regiter and total join
					for (int j = indexRegister; j < listRegister.size(); j++) {
						User user = listRegister.get(indexRegister);
						compareDate.setTime(user.getCreateDate());
						if(DataUtils.daysBetween(compareDate, start) == 0){
							totalRegister++;
							if(user.getRoleId() == ApplicationDefine.USER_ROLE_COUNSELOR_FREELANCE){
								us.setTotalRequestFreelacer(us.getTotalRequestFreelacer()+1);
								totalRequestFreelacer++;
							}else{
								us.setTotalRequestCenter(us.getTotalRequestCenter()+1);
								totalRequestCenter++;
							}
							indexRegister++;
						}else{
							break;
						}
					}
					us.setTotalRegister(totalRegister);
					
					//calculate total withdrawl
					for (int j = indexWithDrawl; j < listWithdrawl.size(); j++) {
						User user = listWithdrawl.get(indexWithDrawl);
						compareDate.setTime(user.getCreateDate());
						if( DataUtils.daysBetween(compareDate, start) == 0 ){
							if(user.getRoleId() == ApplicationDefine.USER_ROLE_COUNSELOR_FREELANCE){
								us.setTotalWithdrawlFreelacer(us.getTotalWithdrawlFreelacer()+1);
								totalWithdrawlFreelacer++;
							}else{
								us.setTotalWithdrawlCenter(us.getTotalWithdrawlCenter()+1);
								totalWithdrawlCenter++;
							}
							indexWithDrawl++;
						}else{
							break;
						}
					}
					//calculate total accept
					for (int j = indexAccept; j < listAccept.size(); j++) {
						User user = listAccept.get(indexAccept);
						compareDate.setTime(user.getCreateDate());
						if( DataUtils.daysBetween(compareDate, start) == 0 ){
							if(user.getRoleId() == ApplicationDefine.USER_ROLE_COUNSELOR_FREELANCE){
								us.setTotalAcceptFreelacer(us.getTotalAcceptFreelacer()+1);
								totalAcceptFreelacer++;
							}else{
								us.setTotalAcceptCenter(us.getTotalAcceptCenter()+1);
								totalAcceptCenter++;
							}
							indexAccept++;
						}else{
							break;
						}
					}
					listStatistics.add(us);
					start.add(Calendar.DAY_OF_YEAR, 1);
				}
				
			//data in header table
			List<Object> listOther = new ArrayList<>();
			listOther.add(totalRegister);
			listOther.add(totalRequestFreelacer);
			listOther.add(totalRequestCenter);
			listOther.add(totalAcceptFreelacer);
			listOther.add(totalAcceptCenter);
			listOther.add(totalWithdrawlFreelacer);
			listOther.add(totalWithdrawlCenter);
			
			Comparator<CounselorStatistics> comparator = new Comparator<CounselorStatistics>() {
			    @Override
			    public int compare(CounselorStatistics left, CounselorStatistics right) {
			        return right.getId() - left.getId(); // use your logic
			    }
			};
			
			Collections.sort(listStatistics,comparator);
			//paging
			Integer startSub = 0;
			Integer endList = listStatistics.size();
			Integer endSub = size;
			
			if(dayDiff > size){
				startSub = (page - 1)*30;
				endSub = page*30;
				if(endSub > endList){
					endSub = endList;
				}
				listStatistics = listStatistics.subList(startSub, endSub);
			}
			
			PageCustom<CounselorStatistics> pageCustom = new PageCustom<CounselorStatistics>(listStatistics , dayDiff, page, size, listOther);
			return pageCustom;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	@Override
	public PageCustom<CounselorStatistics> getStatisticsCounselorByMonthly(List<User> listRegister, List<User> listAccept, List<User> listWithdrawl ,SearchStatistics s , Integer page, Integer size) {
		try {
			
			Integer totalRegister = 0;
			
			Integer totalRequestFreelacer = 0;
			Integer totalRequestCenter = 0;
			
			Integer totalAcceptFreelacer = 0;
			Integer totalAcceptCenter = 0;
			
			Integer totalWithdrawlFreelacer = 0;
			Integer totalWithdrawlCenter = 0;
			
			//count data
			List<CounselorStatistics> listStatistics = new ArrayList<>();
				int indexRegister = 0;
				int indexWithDrawl = 0;
				int indexAccept = 0;
				for (int i = s.getFromMonth(); i <= s.getToMonth(); i++) {
					CounselorStatistics us = new CounselorStatistics();
					us.setTitle(i+"월");
					us.setId(i);
					//calculate total regiter and total join
					for (int j = indexRegister; j < listRegister.size(); j++) {
						User user = listRegister.get(indexRegister);
						if((user.getCreateDate().getMonth()+1) == i){
							totalRegister++;
							if(user.getRoleId() == ApplicationDefine.USER_ROLE_COUNSELOR_FREELANCE){
								us.setTotalRequestFreelacer(us.getTotalRequestFreelacer()+1);
								totalRequestFreelacer++;
							}else{
								us.setTotalRequestCenter(us.getTotalRequestCenter()+1);
								totalRequestCenter++;
							}
							indexRegister++;
						}else{
							break;
						}
					}
					us.setTotalRegister(totalRegister);
					
					//calculate total withdrawl
					for (int j = indexWithDrawl; j < listWithdrawl.size(); j++) {
						User user = listWithdrawl.get(indexWithDrawl);
						if((user.getCreateDate().getMonth()+1) == i){
							if(user.getRoleId() == ApplicationDefine.USER_ROLE_COUNSELOR_FREELANCE){
								us.setTotalWithdrawlFreelacer(us.getTotalWithdrawlFreelacer()+1);
								totalWithdrawlFreelacer++;
							}else{
								us.setTotalWithdrawlCenter(us.getTotalWithdrawlCenter()+1);
								totalWithdrawlCenter++;
							}
							indexWithDrawl++;
						}else{
							break;
						}
					}
					
					//total accept
					for (int j = indexAccept; j < listAccept.size(); j++) {
						User user = listAccept.get(indexAccept);
						if((user.getCreateDate().getMonth()+1) == i){
							if(user.getRoleId() == ApplicationDefine.USER_ROLE_COUNSELOR_FREELANCE){
								us.setTotalAcceptFreelacer(us.getTotalAcceptFreelacer()+1);
								totalAcceptFreelacer++;
							}else{
								us.setTotalAcceptCenter(us.getTotalAcceptCenter()+1);
								totalAcceptCenter++;
							}
							indexAccept++;
						}else{
							break;
						}
					}
					
					
					listStatistics.add(us);
				}
				
			//data in header table
			List<Object> listOther = new ArrayList<>();
			listOther.add(totalRegister);
			listOther.add(totalRequestFreelacer);
			listOther.add(totalRequestCenter);
			listOther.add(totalAcceptFreelacer);
			listOther.add(totalAcceptCenter);
			listOther.add(totalWithdrawlFreelacer);
			listOther.add(totalWithdrawlCenter);
			
			Comparator<CounselorStatistics> comparator = new Comparator<CounselorStatistics>() {
			    @Override
			    public int compare(CounselorStatistics left, CounselorStatistics right) {
			        return right.getId() - left.getId(); // use your logic
			    }
			};
			
			Collections.sort(listStatistics,comparator);

			PageCustom<CounselorStatistics> pageCustom = new PageCustom<CounselorStatistics>(listStatistics , (long)1, page, size, listOther);
			return pageCustom;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	@Override
	public PageCustom<CounselorStatistics> getStatisticsCounselorByWeekly(List<User> listRegister, List<User> listAccept, List<User> listWithdrawl ,SearchStatistics s , Integer page, Integer size) {
		try {
			
			Integer totalRegister = 0;
			
			Integer totalRequestFreelacer = 0;
			Integer totalRequestCenter = 0;
			
			Integer totalAcceptFreelacer = 0;
			Integer totalAcceptCenter = 0;
			
			Integer totalWithdrawlFreelacer = 0;
			Integer totalWithdrawlCenter = 0;
			
			//count data
			List<CounselorStatistics> listStatistics = new ArrayList<>();
				int indexRegister = 0;
				int indexWithDrawl = 0;
				int indexAccept = 0;
				Calendar cal = Calendar.getInstance();
				for (int i = s.getFromWeek(); i <= s.getToWeek(); i++) {
					CounselorStatistics us = new CounselorStatistics();
					Calendar startWeek = Calendar.getInstance();
					startWeek.set(Calendar.WEEK_OF_YEAR, i);        
					startWeek.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY);
					Calendar endWeek = Calendar.getInstance();
					endWeek.set(Calendar.WEEK_OF_YEAR, i);        
					endWeek.set(Calendar.DAY_OF_WEEK, Calendar.SUNDAY);
					us.setTitle("W"+i+" ("+DataUtils.parseStringFromDate(startWeek.getTime(), "MM/dd")+" ~ "+DataUtils.parseStringFromDate(endWeek.getTime(), "MM/dd")+")");
					us.setId(i);
					//calculate total regiter and total join
					for (int j = indexRegister; j < listRegister.size(); j++) {
						User user = listRegister.get(indexRegister);
						cal.setTime(user.getCreateDate());
						if(cal.get(Calendar.WEEK_OF_YEAR) == i){
							totalRegister++;
							if(user.getRoleId() == ApplicationDefine.USER_ROLE_COUNSELOR_FREELANCE){
								us.setTotalRequestFreelacer(us.getTotalRequestFreelacer()+1);
								totalRequestFreelacer++;
							}else{
								us.setTotalRequestCenter(us.getTotalRequestCenter()+1);
								totalRequestCenter++;
							}
							indexRegister++;
						}else{
							break;
						}
					}
					us.setTotalRegister(totalRegister);
					
					//calculate total withdrawl
					for (int j = indexWithDrawl; j < listWithdrawl.size(); j++) {
						User user = listWithdrawl.get(indexWithDrawl);
						cal.setTime(user.getCreateDate());
						if(cal.get(Calendar.WEEK_OF_YEAR) == i){
							if(user.getRoleId() == ApplicationDefine.USER_ROLE_COUNSELOR_FREELANCE){
								us.setTotalWithdrawlFreelacer(us.getTotalWithdrawlFreelacer()+1);
								totalWithdrawlFreelacer++;
							}else{
								us.setTotalWithdrawlCenter(us.getTotalWithdrawlCenter()+1);
								totalWithdrawlCenter++;
							}
							indexWithDrawl++;
						}else{
							break;
						}
					}
					
					//caculate total accept
					for (int j = indexAccept; j < listAccept.size(); j++) {
						User user = listAccept.get(indexAccept);
						cal.setTime(user.getCreateDate());
						if(cal.get(Calendar.WEEK_OF_YEAR) == i){
							if(user.getRoleId() == ApplicationDefine.USER_ROLE_COUNSELOR_FREELANCE){
								us.setTotalAcceptFreelacer(us.getTotalAcceptFreelacer()+1);
								totalAcceptFreelacer++;
							}else{
								us.setTotalAcceptCenter(us.getTotalAcceptCenter()+1);
								totalAcceptCenter++;
							}
							indexAccept++;
						}else{
							break;
						}
					}
					listStatistics.add(us);
				}
				
			//data in header table
			List<Object> listOther = new ArrayList<>();
			listOther.add(totalRegister);
			listOther.add(totalRequestFreelacer);
			listOther.add(totalRequestCenter);
			listOther.add(totalAcceptFreelacer);
			listOther.add(totalAcceptCenter);
			listOther.add(totalWithdrawlFreelacer);
			listOther.add(totalWithdrawlCenter);
			
			Comparator<CounselorStatistics> comparator = new Comparator<CounselorStatistics>() {
			    @Override
			    public int compare(CounselorStatistics left, CounselorStatistics right) {
			        return right.getId() - left.getId(); // use your logic
			    }
			};
			
			Collections.sort(listStatistics,comparator);

			PageCustom<CounselorStatistics> pageCustom = new PageCustom<CounselorStatistics>(listStatistics , (long)1, page, size, listOther);
			return pageCustom;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public PageCustom<UserEntity> getAdminList(String typeSearch, String keyword, Integer page, Integer size) {
		try {
			List<UserEntity> list = new ArrayList<>();
			String sql = "SELECT u.id, u.username, u.fullname, u.day_of_birth, u.phone, u.create_date FROM user u WHERE u.role_id = 8 and u.status_active = 0 and u.is_delete = 0 ";
			String sql_count = "SELECT COUNT(*) FROM user u WHERE u.role_id = 8 and u.status_active = 0 and u.is_delete = 0 ";
			String str_wh_keyword = "";
			if (typeSearch.equals("nameAdmin")) {
				str_wh_keyword = " and u.fullname like :key ";
			} else {
				str_wh_keyword = " and u.username like :key ";
			}
			
			Query q = em.createNativeQuery(sql + str_wh_keyword + " ORDER BY u.create_date DESC limit " + (page-1)*size  + ", " + size);
			if (keyword != null) {
				q.setParameter("key", "%"+keyword+"%");
			}
			@SuppressWarnings("unchecked")
			List<Object[] > rss = q.getResultList();
			for (Object[] o : rss) {
				UserEntity u = new UserEntity();
				u.setId((Integer) o[0]);
				u.setUsername((String) o[1]);
				u.setFullname((String) o[2]);
				u.setDayOfBirth((Date) o[3]);
				u.setPhone((String) o[4]);
				u.setCreateDate((Date) o[5]); 
				list.add(u);
			}
			
			Query c = em.createNativeQuery(sql_count + str_wh_keyword);
			if (keyword != null) {
				c.setParameter("key", "%"+keyword+"%");
			}
			Long totalCount = Long.valueOf(c.getSingleResult().toString());
			if(totalCount == null) {
				totalCount = 0l;
			}
			PageCustom<UserEntity> pageCustom = new PageCustom<UserEntity>(list, totalCount, page, size);
			return pageCustom;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public Integer countUserExitsByUsername(String username) {
		return userJpaRepository.countUserExitsByUsername(username);
	}

	@Override
	public PageCustom<MemberInfo> getMembersInfoInCompany(Integer businessId, String typeSearch, String keyword , Integer subCompanyId, Integer yearSearch,String rsOrder, Integer page, Integer size) {
		try {
			String sql_select = " SELECT u.id, u.username, u.fullname, u.day_of_birth, u.phone, bs.manage_year, bs.business_sub_name, u.create_date ";
			String sql_count  = " SELECT COUNT(*)";
			String sql_from   = " FROM user u INNER JOIN business_sub bs ON u.business_sub_id = bs.id ";
			String sql_where  = " WHERE u.role_id = 5 and bs.business_id = :businessId and bs.manage_year = :manageYear ";
			
			String sql_where_sub = "";
			if (subCompanyId != 0) {
				sql_where_sub = " and u.business_sub_id = :subCompanyId ";
			}
			if (keyword != null) {
				if (typeSearch.equals("name_search")) {
					sql_where_sub = sql_where_sub + " and u.fullname LIKE :keyword ";
				} else {
					sql_where_sub = sql_where_sub + " and u.phone LIKE :keyword ";
				}
			}
			
			if (rsOrder.equals("name_order")) {
				sql_where_sub = sql_where_sub + " ORDER BY u.fullname ASC ";
			} else {
				sql_where_sub = sql_where_sub + " ORDER BY u.create_date ASC ";
			}
			Query q = em.createNativeQuery(sql_select + sql_from + sql_where + sql_where_sub + " limit " + (page-1)*size  + ", " + size);
			q.setParameter("businessId", businessId);
			q.setParameter("manageYear", yearSearch);
			if (subCompanyId != 0) {
				q.setParameter("subCompanyId", subCompanyId);
			}
			q.setParameter("businessId", businessId);
			if (keyword != null) {
				q.setParameter("keyword", "%"+keyword+"%");
			}
			@SuppressWarnings("unchecked")
			List<Object[] > rss = q.getResultList();
			List<MemberInfo> list = new ArrayList<>();
			for (Object[] i : rss) {
				MemberInfo m = new MemberInfo();
				m.setId((Integer) i[0]);
				m.setUsername((String) i[1]);
				m.setFullname((String) i[2]);
				m.setDayOfBirth((Date) i[3]);
				m.setPhone((String) i[4]);
				m.setManageYear((Integer) i[5]);
				m.setBusinessSubName((String) i[6]);
				m.setCreateDate((Date) i[7]);
				list.add(m);
			}
			
			Query c = em.createNativeQuery(sql_count + sql_from + sql_where + sql_where_sub );
			c.setParameter("businessId", businessId);
			c.setParameter("manageYear", yearSearch);
			if (subCompanyId != 0) {
				c.setParameter("subCompanyId", subCompanyId);
			}
			c.setParameter("businessId", businessId);
			if (keyword != null) {
				c.setParameter("keyword", "%"+keyword+"%");
			}
			
			Long totalCount = Long.valueOf(c.getSingleResult().toString());
			if(totalCount == null) {
				totalCount = 0l;
			}
			PageCustom<MemberInfo> pageCustom = new PageCustom<>(list, totalCount, page, size);
			
			return pageCustom;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public Integer totalMemberByBusinessId(Integer businessId) {
		return userJpaRepository.totalMemberByBusinessId(businessId);
	}

	@Override
	public CounselingCenterStatistics totalCounselingCenterStatistics(Integer counselingCenterId) {
		try {
			List<Object[]> rss = userJpaRepository.totalCounselingCenterStatistics(counselingCenterId);
			CounselingCenterStatistics c = new CounselingCenterStatistics();
			for (Object[] rs : rss) {
				c.setTotalCounselor_NotShowInApp(((BigInteger) rs[0]).intValue());
				c.setTotalCounselor_Inactive(((BigInteger) rs[1]).intValue());
				c.setTotalCounselor_normal(((BigInteger) rs[2]).intValue());
				c.setTotalCounseling(((BigInteger) rs[3]).intValue());
				c.setTotalCounseled(((BigInteger) rs[4]).intValue());
			}
			
			return c;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public boolean isDuplicatePhone(String phone) {
		return userJpaRepository.isDuplicatePhone(phone);
	}

	@Override
	public UserEntity findOneByEmailAndBirthDayAndPhone(String email, Date birthDay, String phone) {
		try {
			UserEntity u = userJpaRepository.findOneByEmailAndBirthDayAndPhone(email, birthDay, phone);
			return u;
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public List<User> getUserWithDrawlByDay(Date date) {
		try {
			List<User> beans = new ArrayList<>();
			for (UserEntity userEntity : userJpaRepository.getUserWithDrawlByDay(date)) {
				beans.add(userServiceMapper.mapUserEntityToUser(userEntity));
			}
			return beans;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
}
