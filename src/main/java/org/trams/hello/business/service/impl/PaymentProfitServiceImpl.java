/*
 * Created on 13 Apr 2017 ( Time 16:55:37 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.business.service.impl;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.persistence.EntityManager;
import javax.persistence.Query;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import org.trams.hello.bean.PaymentProfit;
import org.trams.hello.bean.jpa.PaymentProfitEntity;
import org.trams.hello.business.service.PaymentProfitService;
import org.trams.hello.business.service.mapping.PaymentProfitServiceMapper;
import org.trams.hello.data.repository.jpa.PaymentProfitJpaRepository;
import org.trams.hello.web.common.ApplicationDefine;
import org.trams.hello.web.common.utils.DataUtils;

/**
 * Implementation of PaymentProfitService
 */
@Component
@Transactional
public class PaymentProfitServiceImpl implements PaymentProfitService {

	@Resource
	private PaymentProfitJpaRepository paymentProfitJpaRepository;

	private static final Integer PAGE_SIZE = 15;

	@Resource
	private PaymentProfitServiceMapper paymentProfitServiceMapper;

	@Resource
	EntityManager em;

	@Override
	public PaymentProfit findById(Integer id) {
		PaymentProfitEntity paymentProfitEntity = paymentProfitJpaRepository.findOne(id);
		return paymentProfitServiceMapper.mapPaymentProfitEntityToPaymentProfit(paymentProfitEntity);
	}

	@Override
	public Page<PaymentProfitEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE, new Sort(new Order(Direction.DESC, "id")));
		return paymentProfitJpaRepository.findAll(request);
	}

	@Override
	public List<PaymentProfit> findAll() {
		Iterable<PaymentProfitEntity> entities = paymentProfitJpaRepository.findAll();
		List<PaymentProfit> beans = new ArrayList<PaymentProfit>();
		for (PaymentProfitEntity paymentProfitEntity : entities) {
			beans.add(paymentProfitServiceMapper.mapPaymentProfitEntityToPaymentProfit(paymentProfitEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * 
	 * @return Long
	 */
	public Long countTotal() {
		Long count = paymentProfitJpaRepository.count();
		return count;
	}

	@Override
	public PaymentProfit save(PaymentProfit paymentProfit) {
		return update(paymentProfit);
	}

	@Override
	public PaymentProfit create(PaymentProfit paymentProfit) {
		/*
		 * PaymentProfitEntity paymentProfitEntity =
		 * paymentProfitJpaRepository.findOne(paymentProfit.getId()); if(
		 * paymentProfitEntity != null ) { throw new
		 * IllegalStateException("already.exists"); }
		 * 
		 * paymentProfitEntity = new PaymentProfitEntity();
		 * paymentProfitServiceMapper.mapPaymentProfitToPaymentProfitEntity(
		 * paymentProfit, paymentProfitEntity); PaymentProfitEntity
		 * paymentProfitEntitySaved =
		 * paymentProfitJpaRepository.save(paymentProfitEntity); return
		 * paymentProfitServiceMapper.mapPaymentProfitEntityToPaymentProfit(
		 * paymentProfitEntitySaved);
		 */
		PaymentProfitEntity paymentProfitEntity = new PaymentProfitEntity();
		paymentProfitServiceMapper.mapPaymentProfitToPaymentProfitEntity(paymentProfit, paymentProfitEntity);
		PaymentProfitEntity paymentProfitEntitySaved = paymentProfitJpaRepository.save(paymentProfitEntity);
		return paymentProfitServiceMapper.mapPaymentProfitEntityToPaymentProfit(paymentProfitEntitySaved);
	}

	@Override
	public PaymentProfit update(PaymentProfit paymentProfit) {
		PaymentProfitEntity paymentProfitEntity = paymentProfitJpaRepository.findOne(paymentProfit.getId());
		paymentProfitServiceMapper.mapPaymentProfitToPaymentProfitEntity(paymentProfit, paymentProfitEntity);
		PaymentProfitEntity paymentProfitEntitySaved = paymentProfitJpaRepository.save(paymentProfitEntity);
		return paymentProfitServiceMapper.mapPaymentProfitEntityToPaymentProfit(paymentProfitEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		paymentProfitJpaRepository.delete(id);
	}

	public PaymentProfitJpaRepository getPaymentProfitJpaRepository() {
		return paymentProfitJpaRepository;
	}

	public void setPaymentProfitJpaRepository(PaymentProfitJpaRepository paymentProfitJpaRepository) {
		this.paymentProfitJpaRepository = paymentProfitJpaRepository;
	}

	public PaymentProfitServiceMapper getPaymentProfitServiceMapper() {
		return paymentProfitServiceMapper;
	}

	public void setPaymentProfitServiceMapper(PaymentProfitServiceMapper paymentProfitServiceMapper) {
		this.paymentProfitServiceMapper = paymentProfitServiceMapper;
	}

	@Override
	public Page<PaymentProfitEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page - 1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return paymentProfitJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public Page<PaymentProfitEntity> findByName(String name, Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page - 1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return paymentProfitJpaRepository.findByName(name, pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public Page<PaymentProfitEntity> filter(Map<String, Object> params) {
		int page = Integer.parseInt(params.get("page").toString());
		int size = Integer.parseInt(params.get("size").toString());

		PageRequest pageable = new PageRequest(page - 1, size,
				new Sort(new Order(Direction.fromString(String.valueOf(params.getOrDefault("direction", "DESC"))),
						"createDate")));

		Specification<PaymentProfitEntity> specification = new Specification<PaymentProfitEntity>() {
			@Override
			public Predicate toPredicate(Root<PaymentProfitEntity> root, CriteriaQuery<?> criteriaQuery,
					CriteriaBuilder criteriaBuilder) {

				List<Predicate> predicates = new ArrayList<>();

				if (params.get("id") != null) {
					Integer id = Integer.parseInt(params.get("id").toString());
					predicates.add(criteriaBuilder.equal(root.get("id"), id));
				}
				if (params.get("month") != null) {
					Integer month = Integer.parseInt(params.get("month").toString());
					predicates.add(criteriaBuilder.equal(root.get("month"), month));
				}
				if (params.get("year") != null) {
					Integer month = Integer.parseInt(params.get("year").toString());
					predicates.add(criteriaBuilder.equal(root.get("year"), month));
				}
				if (params.get("userId") != null) {
					Integer userId = Integer.parseInt(params.get("userId").toString());
					predicates.add(criteriaBuilder.equal(root.join("user").get("id"), userId));
				}
				if (params.get("type") != null) {
					Short type = (Short) params.get("type");
					predicates.add(criteriaBuilder.equal(root.get("type"), type));
				}

				if (predicates.isEmpty()) {
					return criteriaBuilder.isNotNull(root.get("id"));
				} else {
					return criteriaBuilder.and(predicates.toArray(new Predicate[] {}));
				}
			}
		};

		return paymentProfitJpaRepository.findAll(specification, pageable);
	}

	@Override
	public PaymentProfitEntity getTotalMoneyByMonth(int year, int month, Integer counselorId, Short type) {
		return paymentProfitJpaRepository.getTotalMoneyByMonth(year, month, counselorId, type);
	}

	@Override
	public Page<PaymentProfitEntity> listPagingByMonth(Integer year, Integer month, Short type, Integer page,
			Integer size) {
		try {
			PageRequest pageable = new PageRequest(page - 1, size, new Sort(new Order(Direction.DESC, "adminRefund")));
			return paymentProfitJpaRepository.listPagingByMonth(year, month, type, pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public void updateProfitCounselorEveryDay(Integer year, Integer month) {
		String select_column = "SELECT  P.id as profitId, C.id, U.fullname, "

				+ "(SELECT CASE WHEN SUM(coin) IS NULL THEN 0 ELSE SUM(coin) END " + "FROM counseling_session CS1 "
				+ "INNER JOIN payment_history P1 " + "ON P1.id = CS1.payment_id "
				+ "WHERE CS1.status = 2 AND P1.status = 1 AND CS1.counselor_id = C.id and P1.type_coin = 1 "
				+ "AND YEAR(P1.create_date) = " + year + " AND MONTH(P1.create_date) =" + month + ") as totalHelloCoin,"

				+ "(SELECT CASE WHEN SUM(coin) IS NULL THEN 0 ELSE SUM(coin) END " + "FROM counseling_session CS2 "
				+ "INNER JOIN payment_history P2 " + "ON P2.id = CS2.payment_id "
				+ "WHERE CS2.status = 2 AND P2.status = 1 AND CS2.counselor_id = C.id AND P2.type_coin = 3 "
				+ "AND YEAR(P2.create_date) = " + year + " and MONTH(P2.create_date) =" + month
				+ ") as totalCoinVoucher,"

				+ "C.profit_percent ";

		String from = "FROM counselor C " 
					+ "INNER JOIN user U ON C.id = U.id "	
					+ "LEFT JOIN payment_profit P ON P.user_id = C.id AND P.month = "+month+" AND P.year = "+year+" ";

		String where = "WHERE U.role_id = 2 AND U.status_active != 3 " + "HAVING (totalHelloCoin > 0 or totalCoinVoucher > 0)";
		System.out.println(select_column + from + where);
		try {
			Date current = new Date();
			Query q = em.createNativeQuery(select_column + from + where);
			@SuppressWarnings("unchecked")
			List<Object[]> reservation = q.getResultList();
			for (Object[] i : reservation) {
				PaymentProfit r = null;
				Integer id = (Integer) i[0];
				if(id == null){
					r = new PaymentProfit();
				}else{
					r = findById(id);
				}
				r.setId((Integer) i[0]);
				r.setUserId((Integer) i[1]);
				r.setName((String) i[2]);
				r.setMonth(month);
				r.setYear(year);
				Integer coin = DataUtils.roundInteger(((BigDecimal) i[3]).intValue() * (1- ApplicationDefine.TAX_VAT), 3);
				Integer voucher = DataUtils.roundInteger(((BigDecimal) i[4]).intValue() * (1- ApplicationDefine.TAX_VAT), 3);
				r.setCoin(coin);
				r.setVoucher(voucher);
				if(i[5] == null){
					r.setPercent(ApplicationDefine.COUNSELOR_PROFIT_PERCENT_DEFAULT);
				}else{
					r.setPercent((Float) i[5]);
				}
				
				Float profit = (r.getCoin()+r.getVoucher()) * (r.getPercent()/100);
				r.setProfit(profit.intValue());
				r.setTax(ApplicationDefine.TAX_PROFIT_COUNSELOR);		
				double minusRefund = DataUtils.roundFloorInteger(r.getProfit() * 0.03,1) + DataUtils.roundFloorInteger(r.getProfit() * 0.03 * 0.1,1);
				Integer adminRefund = DataUtils.roundFloorInteger(r.getProfit() - minusRefund,1);
				r.setAdminRefund(adminRefund);
				r.setStatus(ApplicationDefine.PaymentProfitStatus.PENDING.getCode());
				r.setType((short)1);
				r.setUpdateDate(current);
				if(id == null){
					r.setCreateDate(current);
					create(r);
				}else{
					update(r);
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

	}
	
	@Override
	public void updateProfitCounselorCenterEveryDay(Integer year, Integer month) {
		String select_column = "SELECT  P.id as profitId, C.id, U.fullname, "

				+ "(SELECT CASE WHEN SUM(coin) IS NULL THEN 0 ELSE SUM(coin) END "
				+ "FROM counseling_session CS1 "
				+ "INNER JOIN payment_history P1 ON P1.id = CS1.payment_id "
				+ "INNER JOIN counselor C1 ON C1.id = CS1.counselor_id "
				+ "INNER JOIN counseling_center CC1 ON CC1.id = C1.counselor_center_id "
				+ "WHERE CS1.status = 2 AND P1.status = 1 AND CC1.id = C.id and P1.type_coin = 1 "
				+ "AND YEAR(P1.create_date) = "+year+" AND MONTH(P1.create_date) = "+month+") as totalHelloCoin, "

				+ "(SELECT CASE WHEN SUM(coin) IS NULL THEN 0 ELSE SUM(coin) END "
				+ "FROM counseling_session CS1 "
				+ "INNER JOIN payment_history P1 ON P1.id = CS1.payment_id "
				+ "INNER JOIN counselor C1 ON C1.id = CS1.counselor_id "
				+ "INNER JOIN counseling_center CC1 ON CC1.id = C1.counselor_center_id "
				+ "WHERE CS1.status = 2 AND P1.status = 1 AND CC1.id = C.id and P1.type_coin = 2 "
				+ "AND YEAR(P1.create_date) = "+year+" AND MONTH(P1.create_date) = "+month+") as totalCoinVoucher, "

				+ "C.profit_percent ";

		String from = "FROM counseling_center C " 
		        + "INNER JOIN user U ON C.id = U.id "
				+ "LEFT JOIN payment_profit P ON (P.user_id = C.id AND P.year = "+year+" AND P.month = "+month+") ";

		String where = "HAVING (totalHelloCoin > 0 or totalCoinVoucher > 0)";
		
		try {
			Date current = new Date();
			Query q = em.createNativeQuery(select_column + from + where);
			System.out.println(">>>Update Profit Center "+month+"-"+year);
			System.out.println(select_column + from + where);
			@SuppressWarnings("unchecked")
			List<Object[]> reservation = q.getResultList();
			for (Object[] i : reservation) {
				PaymentProfit r = null;
				Integer id = (Integer) i[0];
				
				if(id == null){
					r = new PaymentProfit();
				}else{
					r = findById(id);
				}
				r.setId((Integer) i[0]);
				r.setUserId((Integer) i[1]);
				r.setName((String) i[2]);
				r.setMonth(month);
				r.setYear(year);
				Integer coin = ((BigDecimal) i[3]).intValue();
				Integer voucher = ((BigDecimal) i[4]).intValue();
				r.setCoin(coin - (int)(coin * ApplicationDefine.TAX_VAT));
				r.setVoucher(voucher - (int)(voucher * ApplicationDefine.TAX_VAT));
				if(i[5] == null){
					r.setPercent(ApplicationDefine.COUNSELOR_CENTER_PROFIT_PERCENT_DEFAULT);
				}else{
					r.setPercent((Float) i[5]);
				}
				Float profit = (r.getCoin()+r.getVoucher()) * (r.getPercent()/100);
				r.setProfit(profit.intValue());
				r.setTax(0f);
				r.setAdminRefund(r.getProfit());
				r.setStatus(ApplicationDefine.PaymentProfitStatus.PENDING.getCode());
				r.setType((short)2);
				r.setUpdateDate(current);
				if(id == null){
					r.setCreateDate(current);
					create(r);
				}else{
					update(r);
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

	}
	
	

}
