/*
 * Created on 23 thg 11 2016 ( Time 13:38:12 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.business.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.annotation.Resource;
import javax.persistence.EntityManager;
import javax.persistence.Query;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import org.trams.hello.bean.Inquiry;
import org.trams.hello.bean.PageCustom;
import org.trams.hello.bean.jpa.InquiryEntity;
import org.trams.hello.bean.web.admin.InquiryAdmin;
import org.trams.hello.business.service.InquiryService;
import org.trams.hello.business.service.mapping.InquiryServiceMapper;
import org.trams.hello.data.repository.jpa.InquiryJpaRepository;
import org.trams.hello.web.common.utils.DataUtils;
/**
 * Implementation of InquiryService
 */
@Component
@Transactional
public class InquiryServiceImpl implements InquiryService {

	@Resource
	private InquiryJpaRepository inquiryJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private InquiryServiceMapper inquiryServiceMapper;
	
	@Autowired
	private EntityManager em;
	
	@Override
	public Inquiry findById(Integer id) {
		InquiryEntity inquiryEntity = inquiryJpaRepository.findOne(id);
		return inquiryServiceMapper.mapInquiryEntityToInquiry(inquiryEntity);
	}

	@Override
	public Page<InquiryEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return inquiryJpaRepository.findAll(request);
	}

	@Override
	public List<Inquiry> findAll() {
		Iterable<InquiryEntity> entities = inquiryJpaRepository.findAll();
		List<Inquiry> beans = new ArrayList<Inquiry>();
		for(InquiryEntity inquiryEntity : entities) {
			beans.add(inquiryServiceMapper.mapInquiryEntityToInquiry(inquiryEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = inquiryJpaRepository.count();
		return count;
	}

	@Override
	public Inquiry save(Inquiry inquiry) {
		return update(inquiry) ;
	}

	@Override
	public Inquiry create(Inquiry inquiry) {
/*
		InquiryEntity inquiryEntity = inquiryJpaRepository.findOne(inquiry.getId());
		if( inquiryEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		inquiryEntity = new InquiryEntity();
		inquiryServiceMapper.mapInquiryToInquiryEntity(inquiry, inquiryEntity);
		InquiryEntity inquiryEntitySaved = inquiryJpaRepository.save(inquiryEntity);
		return inquiryServiceMapper.mapInquiryEntityToInquiry(inquiryEntitySaved);
*/
		InquiryEntity inquiryEntity = new InquiryEntity();
		inquiryServiceMapper.mapInquiryToInquiryEntity(inquiry, inquiryEntity);
		InquiryEntity inquiryEntitySaved = inquiryJpaRepository.save(inquiryEntity);
		return inquiryServiceMapper.mapInquiryEntityToInquiry(inquiryEntitySaved);
	}

	@Override
	public Inquiry update(Inquiry inquiry) {
		InquiryEntity inquiryEntity = inquiryJpaRepository.findOne(inquiry.getId());
		inquiryServiceMapper.mapInquiryToInquiryEntity(inquiry, inquiryEntity);
		InquiryEntity inquiryEntitySaved = inquiryJpaRepository.save(inquiryEntity);
		return inquiryServiceMapper.mapInquiryEntityToInquiry(inquiryEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		inquiryJpaRepository.delete(id);
	}

	public InquiryJpaRepository getInquiryJpaRepository() {
		return inquiryJpaRepository;
	}

	public void setInquiryJpaRepository(InquiryJpaRepository inquiryJpaRepository) {
		this.inquiryJpaRepository = inquiryJpaRepository;
	}

	public InquiryServiceMapper getInquiryServiceMapper() {
		return inquiryServiceMapper;
	}

	public void setInquiryServiceMapper(InquiryServiceMapper inquiryServiceMapper) {
		this.inquiryServiceMapper = inquiryServiceMapper;
	}

	@Override
	public Page<InquiryEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return inquiryJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public List<Integer> totalInquiry() {
		try {
			List<Object[]> list_object = inquiryJpaRepository.totalInquiry();
			List<Integer> list_integet = new ArrayList<>();
			if(list_object != null){
				Object[] ob = list_object.get(0);
				list_integet.add(DataUtils.parseInt(ob[0]));
				list_integet.add(DataUtils.parseInt(ob[1]));
			}
			return list_integet;
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public PageCustom<InquiryAdmin> listPagingByUser(Integer categoryId, String typeSearch, Integer type,
			String keyword, Integer page, Integer size) {
		try {
			String str_select = " SELECT i.id, i.question , i.answer, i.create_date, i.status, i.category_id, i.ask_email, c.category_name, u1.fullname, u.fullname as couselorName, u1.id as adminId ";
			String str_from   = " FROM inquiry i LEFT JOIN user u ON i.ask_user_id = u.id "
								+ " LEFT JOIN user u1 ON i.answer_user_id = u1.id "
								+ " INNER JOIN category c ON i.category_id = c.id ";
			String str_where 	= " WHERE i.type_user = "+type+" ";
			String select_count = " select count(*) ";
			String str_limit 	= " ORDER BY i.create_date DESC LIMIT " + (page-1)*size +"," + size ;
			String key = "%" + keyword + "%";
			if(categoryId != 0) {
				str_where = str_where + " and i.category_id = "+categoryId+"";
			}
			if (typeSearch.equals("content")) {
				str_where = str_where + " and i.question LIKE '"+key+"' ";
			} else if (typeSearch.equals("emailUser")) {
				str_where = str_where + " and i.ask_email LIKE '"+key+"' ";
			} else if (typeSearch.equals("couselorName")) {
				str_where = str_where + " and u.fullname LIKE '"+key+"' ";
			} else {
				str_where = str_where + " and u1.fullname LIKE '"+key+"' ";
			}
			
			System.out.println("select:" + str_select + str_from + str_where + str_limit);
			Query q = em.createNativeQuery(str_select + str_from + str_where + str_limit);
			@SuppressWarnings("unchecked")
			List<Object[]> rss = q.getResultList();
			List<InquiryAdmin> inList = new ArrayList<>();
			
			for (Object[] i : rss) {
				InquiryAdmin entity = new InquiryAdmin();
				entity.setId((Integer) i[0]);
				entity.setQuestion((String) i[1]);
				entity.setAnswer((String) i[2]);
				entity.setCreateDate((Date) i[3]);
				entity.setStatus((Integer) i[4]);
				entity.setCategoryId((Integer) i[5]);
				entity.setAskEmail((String) i[6]);
				entity.setCategoryName((String) i[7]);
				entity.setAnswerName((String) i[8]);
				entity.setCouselorName((String) i[9]);
				entity.setAdminId((Integer) i[10]);
				
				inList.add(entity);
			}
			Query c = em.createNativeQuery(select_count + str_from + str_where);
			Long totalCount = ((Number) c.getSingleResult()).longValue();
			PageCustom<InquiryAdmin> pageCustom = new PageCustom<>(inList, totalCount, page, size);
			return pageCustom;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	


}
