/*
 * Created on 22 Apr 2017 ( Time 11:48:46 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.business.service.mapping;

import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import org.trams.hello.bean.RequestUserPsychological;
import org.trams.hello.bean.jpa.CounselorEntity;
import org.trams.hello.bean.jpa.PaymentHistoryEntity;
import org.trams.hello.bean.jpa.RequestUserPsychologicalEntity;
import org.trams.hello.bean.jpa.UserEntity;

/**
 * Mapping between entity beans and display beans.
 */
@Component
public class RequestUserPsychologicalServiceMapper extends AbstractServiceMapper {

	/**
	 * ModelMapper : bean to bean mapping library.
	 */
	private ModelMapper modelMapper;
	
	/**
	 * Constructor.
	 */
	public RequestUserPsychologicalServiceMapper() {
		modelMapper = new ModelMapper();
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}

	/**
	 * Mapping from 'RequestUserPsychologicalEntity' to 'RequestUserPsychological'
	 * @param requestUserPsychologicalEntity
	 */
	public RequestUserPsychological mapRequestUserPsychologicalEntityToRequestUserPsychological(RequestUserPsychologicalEntity requestUserPsychologicalEntity) {
		if(requestUserPsychologicalEntity == null) {
			return null;
		}

		//--- Generic mapping 
		RequestUserPsychological requestUserPsychological = map(requestUserPsychologicalEntity, RequestUserPsychological.class);

		//--- Link mapping ( link to User )
		if(requestUserPsychologicalEntity.getUser() != null) {
			requestUserPsychological.setUserId(requestUserPsychologicalEntity.getUser().getId());
		}
		//--- Link mapping ( link to PaymentHistory )
		if(requestUserPsychologicalEntity.getPaymentHistory() != null) {
			requestUserPsychological.setPaymentId(requestUserPsychologicalEntity.getPaymentHistory().getId());
		}
		//--- Link mapping ( link to Counselor )
		if(requestUserPsychologicalEntity.getCounselor() != null) {
			requestUserPsychological.setCounselorId(requestUserPsychologicalEntity.getCounselor().getId());
		}
		return requestUserPsychological;
	}
	
	/**
	 * Mapping from 'RequestUserPsychological' to 'RequestUserPsychologicalEntity'
	 * @param requestUserPsychological
	 * @param requestUserPsychologicalEntity
	 */
	public void mapRequestUserPsychologicalToRequestUserPsychologicalEntity(RequestUserPsychological requestUserPsychological, RequestUserPsychologicalEntity requestUserPsychologicalEntity) {
		if(requestUserPsychological == null) {
			return;
		}

		//--- Generic mapping 
		map(requestUserPsychological, requestUserPsychologicalEntity);

		//--- Link mapping ( link : requestUserPsychological )
		if( hasLinkToUser(requestUserPsychological) ) {
			UserEntity user1 = new UserEntity();
			user1.setId( requestUserPsychological.getUserId() );
			requestUserPsychologicalEntity.setUser( user1 );
		} else {
			requestUserPsychologicalEntity.setUser( null );
		}

		//--- Link mapping ( link : requestUserPsychological )
		if( hasLinkToPaymentHistory(requestUserPsychological) ) {
			PaymentHistoryEntity paymentHistory2 = new PaymentHistoryEntity();
			paymentHistory2.setId( requestUserPsychological.getPaymentId() );
			requestUserPsychologicalEntity.setPaymentHistory( paymentHistory2 );
		} else {
			requestUserPsychologicalEntity.setPaymentHistory( null );
		}

		//--- Link mapping ( link : requestUserPsychological )
		if( hasLinkToCounselor(requestUserPsychological) ) {
			CounselorEntity counselor3 = new CounselorEntity();
			counselor3.setId( requestUserPsychological.getCounselorId() );
			requestUserPsychologicalEntity.setCounselor( counselor3 );
		} else {
			requestUserPsychologicalEntity.setCounselor( null );
		}

	}
	
	/**
	 * Verify that User id is valid.
	 * @param User User
	 * @return boolean
	 */
	private boolean hasLinkToUser(RequestUserPsychological requestUserPsychological) {
		if(requestUserPsychological.getUserId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that PaymentHistory id is valid.
	 * @param PaymentHistory PaymentHistory
	 * @return boolean
	 */
	private boolean hasLinkToPaymentHistory(RequestUserPsychological requestUserPsychological) {
		if(requestUserPsychological.getPaymentId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that Counselor id is valid.
	 * @param Counselor Counselor
	 * @return boolean
	 */
	private boolean hasLinkToCounselor(RequestUserPsychological requestUserPsychological) {
		if(requestUserPsychological.getCounselorId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected ModelMapper getModelMapper() {
		return modelMapper;
	}

	protected void setModelMapper(ModelMapper modelMapper) {
		this.modelMapper = modelMapper;
	}

}