/*
 * Created on 20 thg 1 2017 ( Time 10:09:40 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import org.trams.hello.bean.UserCertificateTemp;
import org.trams.hello.bean.jpa.UserCertificateTempEntity;
import org.trams.hello.business.service.UserCertificateTempService;
import org.trams.hello.business.service.mapping.UserCertificateTempServiceMapper;
import org.trams.hello.data.repository.jpa.UserCertificateTempJpaRepository;
/**
 * Implementation of UserCertificateTempService
 */
@Component
@Transactional
public class UserCertificateTempServiceImpl implements UserCertificateTempService {

	@Resource
	private UserCertificateTempJpaRepository userCertificateTempJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private UserCertificateTempServiceMapper userCertificateTempServiceMapper;
	
	@Override
	public UserCertificateTemp findById(Integer id) {
		UserCertificateTempEntity userCertificateTempEntity = userCertificateTempJpaRepository.findOne(id);
		return userCertificateTempServiceMapper.mapUserCertificateTempEntityToUserCertificateTemp(userCertificateTempEntity);
	}

	@Override
	public Page<UserCertificateTempEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return userCertificateTempJpaRepository.findAll(request);
	}

	@Override
	public List<UserCertificateTemp> findAll() {
		Iterable<UserCertificateTempEntity> entities = userCertificateTempJpaRepository.findAll();
		List<UserCertificateTemp> beans = new ArrayList<UserCertificateTemp>();
		for(UserCertificateTempEntity userCertificateTempEntity : entities) {
			beans.add(userCertificateTempServiceMapper.mapUserCertificateTempEntityToUserCertificateTemp(userCertificateTempEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = userCertificateTempJpaRepository.count();
		return count;
	}

	@Override
	public UserCertificateTemp save(UserCertificateTemp userCertificateTemp) {
		return update(userCertificateTemp) ;
	}

	@Override
	public UserCertificateTemp create(UserCertificateTemp userCertificateTemp) {
/*
		UserCertificateTempEntity userCertificateTempEntity = userCertificateTempJpaRepository.findOne(userCertificateTemp.getId());
		if( userCertificateTempEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		userCertificateTempEntity = new UserCertificateTempEntity();
		userCertificateTempServiceMapper.mapUserCertificateTempToUserCertificateTempEntity(userCertificateTemp, userCertificateTempEntity);
		UserCertificateTempEntity userCertificateTempEntitySaved = userCertificateTempJpaRepository.save(userCertificateTempEntity);
		return userCertificateTempServiceMapper.mapUserCertificateTempEntityToUserCertificateTemp(userCertificateTempEntitySaved);
*/
		UserCertificateTempEntity userCertificateTempEntity = new UserCertificateTempEntity();
		userCertificateTempServiceMapper.mapUserCertificateTempToUserCertificateTempEntity(userCertificateTemp, userCertificateTempEntity);
		UserCertificateTempEntity userCertificateTempEntitySaved = userCertificateTempJpaRepository.save(userCertificateTempEntity);
		return userCertificateTempServiceMapper.mapUserCertificateTempEntityToUserCertificateTemp(userCertificateTempEntitySaved);
	}

	@Override
	public UserCertificateTemp update(UserCertificateTemp userCertificateTemp) {
		UserCertificateTempEntity userCertificateTempEntity = userCertificateTempJpaRepository.findOne(userCertificateTemp.getId());
		userCertificateTempServiceMapper.mapUserCertificateTempToUserCertificateTempEntity(userCertificateTemp, userCertificateTempEntity);
		UserCertificateTempEntity userCertificateTempEntitySaved = userCertificateTempJpaRepository.save(userCertificateTempEntity);
		return userCertificateTempServiceMapper.mapUserCertificateTempEntityToUserCertificateTemp(userCertificateTempEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		userCertificateTempJpaRepository.delete(id);
	}

	public UserCertificateTempJpaRepository getUserCertificateTempJpaRepository() {
		return userCertificateTempJpaRepository;
	}

	public void setUserCertificateTempJpaRepository(UserCertificateTempJpaRepository userCertificateTempJpaRepository) {
		this.userCertificateTempJpaRepository = userCertificateTempJpaRepository;
	}

	public UserCertificateTempServiceMapper getUserCertificateTempServiceMapper() {
		return userCertificateTempServiceMapper;
	}

	public void setUserCertificateTempServiceMapper(UserCertificateTempServiceMapper userCertificateTempServiceMapper) {
		this.userCertificateTempServiceMapper = userCertificateTempServiceMapper;
	}

	@Override
	public Page<UserCertificateTempEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return userCertificateTempJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	

	@Override
	public Page<UserCertificateTempEntity> listPagingByUserId(Integer page, Integer size, Integer userId) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return userCertificateTempJpaRepository.listPagingByUserId(userId, pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	@Override
	public Page<UserCertificateTempEntity> findByName(String name, Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return userCertificateTempJpaRepository.findByName(name, pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public List<UserCertificateTempEntity> listByUserId(Integer userId) {
		try {
			return userCertificateTempJpaRepository.listByUserId(userId);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public void deleteByCounselorTempId(Integer counselorTempId) {
		try {
			userCertificateTempJpaRepository.deleteByCounselorTempId(counselorTempId);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

}
