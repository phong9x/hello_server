/*
 * Created on 15 thg 12 2016 ( Time 12:00:21 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.business.service.impl;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import org.trams.hello.bean.PromotionPage;
import org.trams.hello.bean.jpa.PromotionPageEntity;
import org.trams.hello.business.service.PromotionPageService;
import org.trams.hello.business.service.mapping.PromotionPageServiceMapper;
import org.trams.hello.data.repository.jpa.PromotionPageJpaRepository;
/**
 * Implementation of PromotionPageService
 */
@Component
@Transactional
public class PromotionPageServiceImpl implements PromotionPageService {

	@Resource
	private PromotionPageJpaRepository promotionPageJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private PromotionPageServiceMapper promotionPageServiceMapper;
	
	@Override
	public PromotionPage findById(Integer id) {
		PromotionPageEntity promotionPageEntity = promotionPageJpaRepository.findOne(id);
		return promotionPageServiceMapper.mapPromotionPageEntityToPromotionPage(promotionPageEntity);
	}

	@Override
	public Page<PromotionPageEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return promotionPageJpaRepository.findAll(request);
	}

	@Override
	public List<PromotionPage> findAll() {
		Iterable<PromotionPageEntity> entities = promotionPageJpaRepository.findAll();
		List<PromotionPage> beans = new ArrayList<PromotionPage>();
		for(PromotionPageEntity promotionPageEntity : entities) {
			beans.add(promotionPageServiceMapper.mapPromotionPageEntityToPromotionPage(promotionPageEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = promotionPageJpaRepository.count();
		return count;
	}

	@Override
	public PromotionPage save(PromotionPage promotionPage) {
		return update(promotionPage) ;
	}

	@Override
	public PromotionPage create(PromotionPage promotionPage) {
/*
		PromotionPageEntity promotionPageEntity = promotionPageJpaRepository.findOne(promotionPage.getId());
		if( promotionPageEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		promotionPageEntity = new PromotionPageEntity();
		promotionPageServiceMapper.mapPromotionPageToPromotionPageEntity(promotionPage, promotionPageEntity);
		PromotionPageEntity promotionPageEntitySaved = promotionPageJpaRepository.save(promotionPageEntity);
		return promotionPageServiceMapper.mapPromotionPageEntityToPromotionPage(promotionPageEntitySaved);
*/
		PromotionPageEntity promotionPageEntity = new PromotionPageEntity();
		promotionPageServiceMapper.mapPromotionPageToPromotionPageEntity(promotionPage, promotionPageEntity);
		PromotionPageEntity promotionPageEntitySaved = promotionPageJpaRepository.save(promotionPageEntity);
		return promotionPageServiceMapper.mapPromotionPageEntityToPromotionPage(promotionPageEntitySaved);
	}

	@Override
	public PromotionPage update(PromotionPage promotionPage) {
		PromotionPageEntity promotionPageEntity = promotionPageJpaRepository.findOne(promotionPage.getId());
		promotionPageServiceMapper.mapPromotionPageToPromotionPageEntity(promotionPage, promotionPageEntity);
		PromotionPageEntity promotionPageEntitySaved = promotionPageJpaRepository.save(promotionPageEntity);
		return promotionPageServiceMapper.mapPromotionPageEntityToPromotionPage(promotionPageEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		promotionPageJpaRepository.delete(id);
	}

	public PromotionPageJpaRepository getPromotionPageJpaRepository() {
		return promotionPageJpaRepository;
	}

	public void setPromotionPageJpaRepository(PromotionPageJpaRepository promotionPageJpaRepository) {
		this.promotionPageJpaRepository = promotionPageJpaRepository;
	}

	public PromotionPageServiceMapper getPromotionPageServiceMapper() {
		return promotionPageServiceMapper;
	}

	public void setPromotionPageServiceMapper(PromotionPageServiceMapper promotionPageServiceMapper) {
		this.promotionPageServiceMapper = promotionPageServiceMapper;
	}

	@Override
	public Page<PromotionPageEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return promotionPageJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public Page<PromotionPageEntity> listPagingRequest(String businessName, Integer page,Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return promotionPageJpaRepository.listPagingRequest("%"+businessName+"%", pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public Page<PromotionPageEntity> listPagingBy_StatusAndBussinessName(Short[] status, String businessName,
			Integer page,Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return promotionPageJpaRepository.listPagingBy_StatusAndBussinessName(status, "%"+businessName+"%", pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public Page<PromotionPageEntity> filter(Map<String, Object> params) {
		int page = Integer.parseInt(params.get("page").toString());
		int size = Integer.parseInt(params.get("size").toString());

		PageRequest pageable = new PageRequest(page - 1, size, new Sort(new Order(Direction.DESC, "createDate")));

		Specification<PromotionPageEntity> specification = new Specification<PromotionPageEntity>() {
			@Override
			public Predicate toPredicate(Root<PromotionPageEntity> root, CriteriaQuery<?> criteriaQuery, CriteriaBuilder criteriaBuilder) {

				List<Predicate> predicates = new ArrayList<>();

				if (params.get("id") != null) {
					Integer id = Integer.parseInt(params.get("id").toString());
					predicates.add(
							criteriaBuilder.equal(root.get("id"), id)
					);
				}
				if (params.get("businessId") != null) {
					Integer businessId = Integer.parseInt(params.get("businessId").toString());
					predicates.add(
							criteriaBuilder.equal(root.join("business").get("id"), businessId)
					);
				}

				if (predicates.isEmpty()) {
					return criteriaBuilder.isNotNull(root.get("id"));
				} else {
					return criteriaBuilder.and(predicates.toArray(new Predicate[] {}));
				}
			}
		};

		return promotionPageJpaRepository.findAll(specification, pageable);
	}

	@Override
	public List<PromotionPageEntity> getPromotionPageByBussinessId(Integer businessId) {
		try {
			PageRequest pageable = new PageRequest(0, 1, new Sort(new Order(Direction.DESC, "createDate")));
			return promotionPageJpaRepository.listPagingBy_StatusAndBussinessId(businessId, pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public void deletePromotionPageBy_BussinessId(Integer businessId) {
		try {
			promotionPageJpaRepository.deletePromotionPageBy_BussinessId(businessId);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@Override
	public List<PromotionPageEntity> listAIMMEDPromotionPage() {
		try {
			return promotionPageJpaRepository.listAIMMEDPromotionPage();
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}


}
