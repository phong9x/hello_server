/*
 * Created on 6 thg 1 2017 ( Time 17:05:04 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import org.trams.hello.bean.UserEducation;
import org.trams.hello.bean.jpa.UserEducationEntity;
import org.trams.hello.business.service.UserEducationService;
import org.trams.hello.business.service.mapping.UserEducationServiceMapper;
import org.trams.hello.data.repository.jpa.UserEducationJpaRepository;
/**
 * Implementation of UserEducationService
 */
@Component
@Transactional
public class UserEducationServiceImpl implements UserEducationService {

	@Resource
	private UserEducationJpaRepository userEducationJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private UserEducationServiceMapper userEducationServiceMapper;
	
	@Override
	public UserEducation findById(Integer id) {
		UserEducationEntity userEducationEntity = userEducationJpaRepository.findOne(id);
		return userEducationServiceMapper.mapUserEducationEntityToUserEducation(userEducationEntity);
	}

	@Override
	public Page<UserEducationEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return userEducationJpaRepository.findAll(request);
	}

	@Override
	public List<UserEducation> findAll() {
		Iterable<UserEducationEntity> entities = userEducationJpaRepository.findAll();
		List<UserEducation> beans = new ArrayList<UserEducation>();
		for(UserEducationEntity userEducationEntity : entities) {
			beans.add(userEducationServiceMapper.mapUserEducationEntityToUserEducation(userEducationEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = userEducationJpaRepository.count();
		return count;
	}

	@Override
	public UserEducation save(UserEducation userEducation) {
		return update(userEducation) ;
	}

	@Override
	public UserEducation create(UserEducation userEducation) {
/*
		UserEducationEntity userEducationEntity = userEducationJpaRepository.findOne(userEducation.getId());
		if( userEducationEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		userEducationEntity = new UserEducationEntity();
		userEducationServiceMapper.mapUserEducationToUserEducationEntity(userEducation, userEducationEntity);
		UserEducationEntity userEducationEntitySaved = userEducationJpaRepository.save(userEducationEntity);
		return userEducationServiceMapper.mapUserEducationEntityToUserEducation(userEducationEntitySaved);
*/
		UserEducationEntity userEducationEntity = new UserEducationEntity();
		userEducationServiceMapper.mapUserEducationToUserEducationEntity(userEducation, userEducationEntity);
		UserEducationEntity userEducationEntitySaved = userEducationJpaRepository.save(userEducationEntity);
		return userEducationServiceMapper.mapUserEducationEntityToUserEducation(userEducationEntitySaved);
	}

	@Override
	public UserEducation update(UserEducation userEducation) {
		UserEducationEntity userEducationEntity = userEducationJpaRepository.findOne(userEducation.getId());
		userEducationServiceMapper.mapUserEducationToUserEducationEntity(userEducation, userEducationEntity);
		UserEducationEntity userEducationEntitySaved = userEducationJpaRepository.save(userEducationEntity);
		return userEducationServiceMapper.mapUserEducationEntityToUserEducation(userEducationEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		userEducationJpaRepository.delete(id);
	}

	public UserEducationJpaRepository getUserEducationJpaRepository() {
		return userEducationJpaRepository;
	}

	public void setUserEducationJpaRepository(UserEducationJpaRepository userEducationJpaRepository) {
		this.userEducationJpaRepository = userEducationJpaRepository;
	}

	public UserEducationServiceMapper getUserEducationServiceMapper() {
		return userEducationServiceMapper;
	}

	public void setUserEducationServiceMapper(UserEducationServiceMapper userEducationServiceMapper) {
		this.userEducationServiceMapper = userEducationServiceMapper;
	}

	@Override
	public Page<UserEducationEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return userEducationJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	

	@Override
	public Page<UserEducationEntity> listPagingByUserId(Integer page, Integer size, Integer userId) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return userEducationJpaRepository.listPagingByUserId(userId, pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public void deleteByUserId(Integer userId) {
		try {
			userEducationJpaRepository.deleteByUserId(userId);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@Override
	public int countByUser(Integer userId) {
		return userEducationJpaRepository.countByUser(userId);
	}

	@Override
	public UserEducationEntity findByUserId(Integer id) {
		return userEducationJpaRepository.findByUserId(id);
	}

	@Override
	public UserEducation findByUser(Integer id) {
		UserEducationEntity userEducationEntity = userEducationJpaRepository.findByUserId(id);
		return userEducationServiceMapper.mapUserEducationEntityToUserEducation(userEducationEntity);
	}

	@Override
	public List<UserEducationEntity> listPagingByUserId(Integer userId) {
		try {
			return userEducationJpaRepository.listPagingByUserId(userId);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

}
