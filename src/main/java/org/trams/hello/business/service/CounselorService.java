/*
 * Created on 23 thg 11 2016 ( Time 13:38:12 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.business.service;

import java.util.List;

import org.springframework.data.domain.Page;
import org.trams.hello.bean.Counselor;
import org.trams.hello.bean.CounselorRanking;
import org.trams.hello.bean.PageCustom;
import org.trams.hello.bean.ProfitCenterReport;
import org.trams.hello.bean.jpa.CounselorEntity;
import org.trams.hello.bean.web.counselingCenter.CounselorInfo;
import org.trams.hello.bean.web.counselor.SuggestionCounselor;
import org.trams.hello.web.bean.search.SearchProfitCenter;
import org.trams.hello.web.bean.search.SearchStatistics;

/**
 * Business Service Interface for entity Counselor.
 */
public interface CounselorService { 

	/**
	 * Loads an entity from the database using its Primary Key
	 * @param id
	 * @return entity
	 */
	Counselor findById( Integer id  ) ;
	
	CounselorEntity findByOne(Integer id);
	/** 
	 * Loads all entities.
	 * @return all entities
	 */
	List<Counselor> findAll();
	
	/**
	 * Loads entities in page number.
	 * @return entities
	 */

	Page<CounselorEntity> findAll(Integer page);

	/**
	 * Count all entities
	 * @return Long
	 */
	Long countTotal();
	

	/**
	 * Saves the given entity in the database (create or update)
	 * @param entity
	 * @return entity
	 */
	Counselor save(Counselor entity);

	/**
	 * Updates the given entity in the database
	 * @param entity
	 * @return
	 */
	Counselor update(Counselor entity);

	/**
	 * Creates the given entity in the database
	 * @param entity
	 * @return
	 */
	Counselor create(Counselor entity);
	
	/**
	 * Deletes an entity using its Primary Key
	 * @param id
	 */
	void delete( Integer id );

	Page<CounselorEntity> listPagingByStatus(Short status, Integer page,Integer size);
	
	void update_isDelete(Integer id);

	Page<CounselorEntity> listPagingBy_NickNameOrIntroduceAndStatus(String key,  Short[] status, Short actived, Integer page,Integer size);

	Page<CounselorEntity> listPagingBy_CounlorFieldAndStatus(Integer[] counselor_field, Short actived, Short[] status, Integer page,Integer size);
	
	Page<CounselorEntity> listPagingBy_CounlorFieldAndNickNameAndIntroduceAndStatus(Integer[] counselor_field, String key, Short actived,  Short[] status,  Integer page,Integer size);
	
	List<Integer> totalCounselorHome(Integer hour, Short[] status);
	
	Page<CounselorEntity> filter(Integer[] role, Integer counselorCenterId, Short[] actived, Integer[] age,
			Short[] statusActive, Short[] aimmedRecommend, String type, String key, Integer[] counselField, String orderBy, Integer page, Integer size);
	
	Page<CounselorEntity> listPagingCounselorNotActive(Integer page,Integer size);
	
	Page<CounselorEntity> filter(Integer[] role, Integer centerId, Short[] status, String key, String type, Integer page, Integer size);
	
	List<SuggestionCounselor> counselorsByCategorySelected(String categoryIds, Short actived);
	
	Page<CounselorEntity> listSuggetPagingBy_CounlorFieldAndStatus(Integer page, Integer size);
	
	Integer totalCounlingByCounselorId(Integer counselorId);

	void calculateProfit();
	
	Page<CounselorEntity> listPagingByStatusAndActived(Short[] status, Short actived, Integer page, Integer size);
	
	Page<CounselorEntity> listPagingCounselorNormal(Integer page, Integer size);
	
	PageCustom<CounselorRanking> filterCounselorStaticStatistics(SearchStatistics s, Integer page, Integer size, String orderBy);

	PageCustom<CounselorInfo> listCounselorInFo(Integer counselingCenterId, String keyword, Integer status_counselor_Normal, Integer status_counselor_banned, Integer status_counselor_display, String typeSearch, String typeOrder, Integer page,Integer size);

	PageCustom<CounselorRanking> filterCounselorCenterStatistics(SearchStatistics s, Integer page, Integer size, String orderBy);
	
	PageCustom<ProfitCenterReport> filterProfitCenterStatistics(SearchProfitCenter s,Integer page,Integer size);
	
	Integer getStatusRealTimeCounseling(Integer counselorId);
}
