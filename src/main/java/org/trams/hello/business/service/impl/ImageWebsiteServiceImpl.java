/*
 * Created on 23 thg 11 2016 ( Time 13:38:12 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import org.trams.hello.bean.ImageWebsite;
import org.trams.hello.bean.jpa.ImageWebsiteEntity;
import org.trams.hello.business.service.ImageWebsiteService;
import org.trams.hello.business.service.mapping.ImageWebsiteServiceMapper;
import org.trams.hello.data.repository.jpa.ImageWebsiteJpaRepository;
/**
 * Implementation of ImageWebsiteService
 */
@Component
@Transactional
public class ImageWebsiteServiceImpl implements ImageWebsiteService {

	@Resource
	private ImageWebsiteJpaRepository imageWebsiteJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private ImageWebsiteServiceMapper imageWebsiteServiceMapper;
	
	@Override
	public ImageWebsite findById(Integer id) {
		ImageWebsiteEntity imageWebsiteEntity = imageWebsiteJpaRepository.findOne(id);
		return imageWebsiteServiceMapper.mapImageWebsiteEntityToImageWebsite(imageWebsiteEntity);
	}

	@Override
	public Page<ImageWebsiteEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return imageWebsiteJpaRepository.findAll(request);
	}

	@Override
	public List<ImageWebsite> findAll() {
		Iterable<ImageWebsiteEntity> entities = imageWebsiteJpaRepository.findAll();
		List<ImageWebsite> beans = new ArrayList<ImageWebsite>();
		for(ImageWebsiteEntity imageWebsiteEntity : entities) {
			beans.add(imageWebsiteServiceMapper.mapImageWebsiteEntityToImageWebsite(imageWebsiteEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = imageWebsiteJpaRepository.count();
		return count;
	}

	@Override
	public ImageWebsite save(ImageWebsite imageWebsite) {
		return update(imageWebsite) ;
	}

	@Override
	public ImageWebsite create(ImageWebsite imageWebsite) {
/*
		ImageWebsiteEntity imageWebsiteEntity = imageWebsiteJpaRepository.findOne(imageWebsite.getId());
		if( imageWebsiteEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		imageWebsiteEntity = new ImageWebsiteEntity();
		imageWebsiteServiceMapper.mapImageWebsiteToImageWebsiteEntity(imageWebsite, imageWebsiteEntity);
		ImageWebsiteEntity imageWebsiteEntitySaved = imageWebsiteJpaRepository.save(imageWebsiteEntity);
		return imageWebsiteServiceMapper.mapImageWebsiteEntityToImageWebsite(imageWebsiteEntitySaved);
*/
		ImageWebsiteEntity imageWebsiteEntity = new ImageWebsiteEntity();
		imageWebsiteServiceMapper.mapImageWebsiteToImageWebsiteEntity(imageWebsite, imageWebsiteEntity);
		ImageWebsiteEntity imageWebsiteEntitySaved = imageWebsiteJpaRepository.save(imageWebsiteEntity);
		return imageWebsiteServiceMapper.mapImageWebsiteEntityToImageWebsite(imageWebsiteEntitySaved);
	}

	@Override
	public ImageWebsite update(ImageWebsite imageWebsite) {
		ImageWebsiteEntity imageWebsiteEntity = imageWebsiteJpaRepository.findOne(imageWebsite.getId());
		imageWebsiteServiceMapper.mapImageWebsiteToImageWebsiteEntity(imageWebsite, imageWebsiteEntity);
		ImageWebsiteEntity imageWebsiteEntitySaved = imageWebsiteJpaRepository.save(imageWebsiteEntity);
		return imageWebsiteServiceMapper.mapImageWebsiteEntityToImageWebsite(imageWebsiteEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		imageWebsiteJpaRepository.delete(id);
	}

	public ImageWebsiteJpaRepository getImageWebsiteJpaRepository() {
		return imageWebsiteJpaRepository;
	}

	public void setImageWebsiteJpaRepository(ImageWebsiteJpaRepository imageWebsiteJpaRepository) {
		this.imageWebsiteJpaRepository = imageWebsiteJpaRepository;
	}

	public ImageWebsiteServiceMapper getImageWebsiteServiceMapper() {
		return imageWebsiteServiceMapper;
	}

	public void setImageWebsiteServiceMapper(ImageWebsiteServiceMapper imageWebsiteServiceMapper) {
		this.imageWebsiteServiceMapper = imageWebsiteServiceMapper;
	}

	@Override
	public Page<ImageWebsiteEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return imageWebsiteJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}
	
	@Override
	public List<ImageWebsite> list(Short type) {
		try {
			List<ImageWebsite> list = new ArrayList<>();
			List<ImageWebsiteEntity> entities = imageWebsiteJpaRepository.list(type);
			for (ImageWebsiteEntity imageWebsiteEntity : entities) {
				list.add(imageWebsiteServiceMapper.mapImageWebsiteEntityToImageWebsite(imageWebsiteEntity));
			}
			
			return list;
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public List<ImageWebsite> listByTypeAndOrderNumber(Short type) {
		try {
			List<ImageWebsite> list = new ArrayList<>();
			List<ImageWebsiteEntity> entities = imageWebsiteJpaRepository.listByTypeAndOrderNumber(type);
			for (ImageWebsiteEntity imageWebsiteEntity : entities) {
				list.add(imageWebsiteServiceMapper.mapImageWebsiteEntityToImageWebsite(imageWebsiteEntity));
			}
			
			return list;
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public void deleteByType(Short type) {
		try {
			imageWebsiteJpaRepository.deleteByType(type);
		} catch (Exception e) {
			e.printStackTrace();
		}
		
	}
	
	


}
