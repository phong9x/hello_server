/*
 * Created on 23 thg 11 2016 ( Time 13:38:12 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.business.service.impl;

import java.math.BigInteger;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.TreeMap;
import java.util.concurrent.TimeUnit;

import javax.annotation.Resource;
import javax.persistence.EntityManager;
import javax.persistence.Query;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.JoinType;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.apache.commons.lang.time.DateFormatUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import org.trams.hello.bean.CounselingSession;
import org.trams.hello.bean.CounselingStatistics;
import org.trams.hello.bean.LoginStatistics;
import org.trams.hello.bean.PageCustom;
import org.trams.hello.bean.ProfitData;
import org.trams.hello.bean.api.MyReservation;
import org.trams.hello.bean.api.ReservationTime;
import org.trams.hello.bean.api.ReservedAndCounselingType;
import org.trams.hello.bean.jpa.CounselingSessionEntity;
import org.trams.hello.bean.jpa.ReservationEntity;
import org.trams.hello.bean.web.counselingCenter.CounselorSummary;
import org.trams.hello.bean.web.counselor.UserCounselingSession;
import org.trams.hello.business.service.CounselingSessionService;
import org.trams.hello.business.service.PaymentHistoryService;
import org.trams.hello.business.service.mapping.CounselingSessionServiceMapper;
import org.trams.hello.data.repository.jpa.CounselingSessionJpaRepository;
import org.trams.hello.web.bean.search.SearchProfitBusiness;
import org.trams.hello.web.bean.search.SearchProfitCounselor;
import org.trams.hello.web.bean.search.SearchProfitCounselorCenter;
import org.trams.hello.web.bean.search.SearchStatistics;
import org.trams.hello.web.common.ApplicationDefine;
import org.trams.hello.web.common.utils.DataUtils;

/**
 * Implementation of CounselingSessionService
 */
@Component
@Transactional
public class CounselingSessionServiceImpl implements CounselingSessionService {

	@Resource
	private CounselingSessionJpaRepository counselingSessionJpaRepository;

	private static final Integer PAGE_SIZE = 15;

	@Resource
	private CounselingSessionServiceMapper counselingSessionServiceMapper;

	@Resource
	private PaymentHistoryService paymentHistoryService;

	@Autowired
	private EntityManager em;

	@Override
	public CounselingSession findById(Integer id) {
		CounselingSessionEntity counselingSessionEntity = counselingSessionJpaRepository.findOne(id);
		return counselingSessionServiceMapper.mapCounselingSessionEntityToCounselingSession(counselingSessionEntity);
	}

	@Override
	public CounselingSessionEntity findOne(Integer id) {
		return counselingSessionJpaRepository.findOne(id);
	}

	@Override
	public Page<CounselingSessionEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE, new Sort(new Order(Direction.DESC, "id")));
		return counselingSessionJpaRepository.findAll(request);
	}

	@Override
	public List<CounselingSession> findAll() {
		Iterable<CounselingSessionEntity> entities = counselingSessionJpaRepository.findAll();
		List<CounselingSession> beans = new ArrayList<CounselingSession>();
		for (CounselingSessionEntity counselingSessionEntity : entities) {
			beans.add(counselingSessionServiceMapper
					.mapCounselingSessionEntityToCounselingSession(counselingSessionEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * 
	 * @return Long
	 */
	public Long countTotal() {
		Long count = counselingSessionJpaRepository.count();
		return count;
	}

	@Override
	public CounselingSession save(CounselingSession counselingSession) {
		return update(counselingSession);
	}

	@Override
	public CounselingSession create(CounselingSession counselingSession) {
		/*
		 * CounselingSessionEntity counselingSessionEntity =
		 * counselingSessionJpaRepository.findOne(counselingSession.getId());
		 * if( counselingSessionEntity != null ) { throw new
		 * IllegalStateException("already.exists"); }
		 * 
		 * counselingSessionEntity = new CounselingSessionEntity();
		 * counselingSessionServiceMapper.
		 * mapCounselingSessionToCounselingSessionEntity(counselingSession,
		 * counselingSessionEntity); CounselingSessionEntity
		 * counselingSessionEntitySaved =
		 * counselingSessionJpaRepository.save(counselingSessionEntity); return
		 * counselingSessionServiceMapper.
		 * mapCounselingSessionEntityToCounselingSession(
		 * counselingSessionEntitySaved);
		 */
		CounselingSessionEntity counselingSessionEntity = new CounselingSessionEntity();
		counselingSessionServiceMapper.mapCounselingSessionToCounselingSessionEntity(counselingSession,
				counselingSessionEntity);
		CounselingSessionEntity counselingSessionEntitySaved = counselingSessionJpaRepository
				.save(counselingSessionEntity);
		return counselingSessionServiceMapper
				.mapCounselingSessionEntityToCounselingSession(counselingSessionEntitySaved);
	}

	@Override
	public CounselingSession update(CounselingSession counselingSession) {
		CounselingSessionEntity counselingSessionEntity = counselingSessionJpaRepository
				.findOne(counselingSession.getId());
		counselingSessionServiceMapper.mapCounselingSessionToCounselingSessionEntity(counselingSession,
				counselingSessionEntity);
		CounselingSessionEntity counselingSessionEntitySaved = counselingSessionJpaRepository
				.save(counselingSessionEntity);
		return counselingSessionServiceMapper
				.mapCounselingSessionEntityToCounselingSession(counselingSessionEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		counselingSessionJpaRepository.delete(id);
	}

	@Override
	public CounselingSessionEntity saveOrUpdate(CounselingSessionEntity counselingSessionEntity) {
		return counselingSessionJpaRepository.save(counselingSessionEntity);
	}

	public CounselingSessionJpaRepository getCounselingSessionJpaRepository() {
		return counselingSessionJpaRepository;
	}

	public void setCounselingSessionJpaRepository(CounselingSessionJpaRepository counselingSessionJpaRepository) {
		this.counselingSessionJpaRepository = counselingSessionJpaRepository;
	}

	public CounselingSessionServiceMapper getCounselingSessionServiceMapper() {
		return counselingSessionServiceMapper;
	}

	public void setCounselingSessionServiceMapper(CounselingSessionServiceMapper counselingSessionServiceMapper) {
		this.counselingSessionServiceMapper = counselingSessionServiceMapper;
	}

	@Override
	public Page<CounselingSessionEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page - 1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return counselingSessionJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public void update_isDelete(Integer id) {
		try {
			counselingSessionJpaRepository.update_isDelete(id);
		} catch (Exception e) {
			System.out.println(e);
		}
	}

	@Override
	public Integer countSatisfactionEvaluation(Integer userId, Integer counselorId) {
		try {
			return counselingSessionJpaRepository.countSatisfactionEvaluation(userId, counselorId);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Integer countCounselingSession(Integer userId) {
		try {
			return counselingSessionJpaRepository.countCounselingSession(userId);
		} catch (Exception e) {
			System.out.println(e);
			return 0;
		}
	}

	@Override
	public Integer countCounselingSessionHaveCounselYet(Integer userId, Date date) {

		try {
			return counselingSessionJpaRepository.countCounselingSessionHaveCounselYet(userId, date);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Integer countCounselingSessionOfCounselor(Integer counselorId, Short status) {
		try {
			return counselingSessionJpaRepository.countCounselingSessionOfCounselor(counselorId, status);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Page<CounselingSessionEntity> filter(Map<String, Object> params) {
		int page = Integer.parseInt(params.get("page").toString());
		int size = Integer.parseInt(params.get("size").toString());

		PageRequest pageable = new PageRequest(page - 1, size,
				new Sort(new Order(Direction.fromString(params.getOrDefault("direction", "DESC").toString()),
						params.getOrDefault("sorts", "createDate").toString())));

		Specification<CounselingSessionEntity> specification = new Specification<CounselingSessionEntity>() {
			@Override
			public Predicate toPredicate(Root<CounselingSessionEntity> root, CriteriaQuery<?> criteriaQuery,
					CriteriaBuilder criteriaBuilder) {

				root.join("counselor", JoinType.INNER).join("user", JoinType.INNER);

				List<Predicate> predicates = new ArrayList<>();

				if (params.get("id") != null) {
					Integer id = Integer.parseInt(params.get("id").toString());
					predicates.add(criteriaBuilder.equal(root.get("id"), id));
				}
				if (params.get("startTime") != null) {
					//System.out.println("params.get('startTime') != null");
					Date startTime = (Date) params.get("startTime");
					//System.out.println(DateFormatUtils.format(startTime, "yyyyMMdd HH:mm:ss"));
					predicates.add(criteriaBuilder.equal(root.get("startTime"), startTime));
				}
				if (params.get("userId") != null) {
					Integer userId = Integer.parseInt(params.get("userId").toString());
					predicates.add(criteriaBuilder.equal(root.join("user").get("id"), userId));
				}
				if (params.get("actived") != null) {
					Short actived = Short.parseShort((params.get("actived").toString()));
					predicates.add(criteriaBuilder.equal(root.join("counselor").get("actived"), actived));
				}
				if (params.get("counselorId") != null) {
					Integer counselorId = Integer.parseInt(params.get("counselorId").toString());
					predicates.add(criteriaBuilder.equal(root.join("counselor").get("id"), counselorId));
				}
				if (params.get("statuses") != null) {
					Short[] statuses = (Short[]) params.get("statuses");
					predicates.add(criteriaBuilder.isTrue(root.get("status").in(statuses)));
				}
				if (params.get("roomId") != null) {
					String roomId = String.valueOf(params.get("roomId"));
					predicates.add(criteriaBuilder.equal(root.get("roomId"), roomId));
				}
				if (params.get("rooms") != null) {
					predicates.add(criteriaBuilder.isNull(root.get("roomId")));
				}
				if (params.get("scheduledTime") != null) {
					Date scheduledTime = (Date) params.get("scheduledTime");
					predicates.add(criteriaBuilder.lessThanOrEqualTo(root.get("startTime"), scheduledTime));
				}
				if (params.get("counselTypes") != null) {
					Short[] counselTypes = (Short[]) params.get("counselTypes");
					predicates.add(criteriaBuilder.isTrue(root.get("counselType").in(counselTypes)));
				}
				if (params.get("paymentTypes") != null) {
					Short[] paymentTypes = (Short[]) params.get("paymentTypes");
					predicates.add(criteriaBuilder
							.isTrue(root.join("paymentHistory", JoinType.LEFT).get("typeCoin").in(paymentTypes)));
				}
				if (params.get("fullname") != null) {
					String fullname = String.valueOf(params.get("fullname"));
					if (fullname.trim().length() > 0) {
						predicates.add(criteriaBuilder.equal(root.join("user").get("fullname"), fullname));
					}
				}
				if (params.get("fromTime") != null) {
					DateFormat format = new SimpleDateFormat("yyyy/MM/dd");
					try {
						Date fromTime = format.parse(String.valueOf(params.get("fromTime")) + " 00:00:00");
						predicates.add(criteriaBuilder.greaterThanOrEqualTo(root.get("startTime"), fromTime));
					} catch (ParseException e) {
						e.printStackTrace();
					}
				}
				
				if (params.get("fromNow") != null) {
					DateFormat format = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
					try {
						Date fromNow = format.parse(String.valueOf(params.get("fromNow")));
						predicates.add(criteriaBuilder.greaterThanOrEqualTo(root.get("startTime"), fromNow));
					} catch (ParseException e) {
						e.printStackTrace();
					}
				}
				
				if (params.get("toTime") != null) {
					DateFormat format = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
					try {
						Date toTime = format.parse(String.valueOf(params.get("toTime")) + " 23:59:59");
						predicates.add(criteriaBuilder.lessThanOrEqualTo(root.get("endTime"), toTime));
					} catch (ParseException e) {
						e.printStackTrace();
					}
				}
				if (params.get("forMain") != null) {
					Calendar calendar = Calendar.getInstance();
					predicates.add(criteriaBuilder.greaterThanOrEqualTo(root.get("endTime"), calendar.getTime()));
//					calendar.add(Calendar.HOUR, 6);
//					predicates.add(criteriaBuilder.lessThanOrEqualTo(root.get("startTime"), calendar.getTime()));
				}
				if (params.get("notFinished") != null) {
					predicates
							.add(criteriaBuilder
									.or(
											// cancel status
											criteriaBuilder
													.equal(root.get("status"),
															ApplicationDefine.CounselingSession_Status.RESERVATION_CANCEL
																	.getCode()),
											// not finished yet
											criteriaBuilder.and(
													// not counsel status
													criteriaBuilder.equal(root.get("status"),
															ApplicationDefine.CounselingSessionStatus.NOT_COUNSELED
																	.getCode()),
											// endtime ge now
											criteriaBuilder.greaterThanOrEqualTo(root.get("endTime"), new Date()))));
				}

				if (predicates.isEmpty()) {
					return criteriaBuilder.isNotNull(root.get("id"));
				} else {
					return criteriaBuilder.and(predicates.toArray(new Predicate[] {}));
				}
			}
		};
		
		return counselingSessionJpaRepository.findAll(specification, pageable);
	}

	@Override
	public long count(Map<String, Object> params) {
		Specification<CounselingSessionEntity> specification = new Specification<CounselingSessionEntity>() {
			@Override
			public Predicate toPredicate(Root<CounselingSessionEntity> root, CriteriaQuery<?> criteriaQuery,
					CriteriaBuilder criteriaBuilder) {

				root.join("counselor", JoinType.INNER).join("user", JoinType.INNER);

				List<Predicate> predicates = new ArrayList<>();

				if (params.get("id") != null) {
					Integer id = Integer.parseInt(params.get("id").toString());
					predicates.add(criteriaBuilder.equal(root.get("id"), id));
				}
				if (params.get("startTime") != null) {
					Date startTime = (Date) params.get("startTime");
					predicates.add(criteriaBuilder.equal(root.get("startTime"), startTime));
				}
				if (params.get("userId") != null) {
					Integer userId = Integer.parseInt(params.get("userId").toString());
					predicates.add(criteriaBuilder.equal(root.join("user").get("id"), userId));
				}
				if (params.get("counselorId") != null) {
					Integer counselorId = Integer.parseInt(params.get("counselorId").toString());
					predicates.add(criteriaBuilder.equal(root.join("counselor").get("id"), counselorId));
				}
				if (params.get("statuses") != null) {
					Short[] statuses = (Short[]) params.get("statuses");
					predicates.add(criteriaBuilder.isTrue(root.get("status").in(statuses)));
				}
				if (params.get("roomId") != null) {
					String roomId = String.valueOf(params.get("roomId"));
					predicates.add(criteriaBuilder.equal(root.get("roomId"), roomId));
				}
				if (params.get("rooms") != null) {
					predicates.add(criteriaBuilder.isNull(root.get("roomId")));
				}
				if (params.get("scheduledTime") != null) {
					Date scheduledTime = (Date) params.get("scheduledTime");
					predicates.add(criteriaBuilder.lessThanOrEqualTo(root.get("startTime"), scheduledTime));
				}
				if (params.get("counselTypes") != null) {
					Short[] counselTypes = (Short[]) params.get("counselTypes");
					predicates.add(criteriaBuilder.isTrue(root.get("counselType").in(counselTypes)));
				}
				if (params.get("paymentTypes") != null) {
					Short[] paymentTypes = (Short[]) params.get("paymentTypes");
					predicates.add(criteriaBuilder
							.isTrue(root.join("paymentHistory", JoinType.LEFT).get("typeCoin").in(paymentTypes)));
				}
				if (params.get("fullname") != null) {
					String fullname = String.valueOf(params.get("fullname"));
					if (fullname.trim().length() > 0) {
						predicates.add(criteriaBuilder.equal(root.join("user").get("fullname"), fullname));
					}
				}
				if (params.get("fromTime") != null) {
					DateFormat format = new SimpleDateFormat("yyyy/MM/dd");
					try {
						Date fromTime = format.parse(String.valueOf(params.get("fromTime")) + " 00:00:00");
						predicates.add(criteriaBuilder.greaterThanOrEqualTo(root.get("startTime"), fromTime));
					} catch (ParseException e) {
						e.printStackTrace();
					}
				}
				if (params.get("fromNow") != null) {
					DateFormat format = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
					try {
						Date fromNow = format.parse(String.valueOf(params.get("fromNow")));
						predicates.add(criteriaBuilder.greaterThanOrEqualTo(root.get("startTime"), fromNow));
					} catch (ParseException e) {
						e.printStackTrace();
					}
				}
				if (params.get("toTime") != null) {
					DateFormat format = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
					try {
						Date toTime = format.parse(String.valueOf(params.get("toTime")) + " 23:59:59");
						predicates.add(criteriaBuilder.lessThanOrEqualTo(root.get("endTime"), toTime));
					} catch (ParseException e) {
						e.printStackTrace();
					}
				}
				if (params.get("notFinished") != null) {
					predicates
							.add(criteriaBuilder
									.or(
											// not finished yet
											criteriaBuilder.and(
													// not counsel status
													criteriaBuilder.equal(root.get("status"),
															ApplicationDefine.CounselingSessionStatus.NOT_COUNSELED
																	.getCode()),
											// endtime ge now
											criteriaBuilder.greaterThanOrEqualTo(root.get("endTime"), new Date()))));
				}

				if (predicates.isEmpty()) {
					return criteriaBuilder.isNotNull(root.get("id"));
				} else {
					return criteriaBuilder.and(predicates.toArray(new Predicate[] {}));
				}
			}
		};

		return counselingSessionJpaRepository.count(specification);
	}

	@Override
	public PageCustom<ReservationEntity> filterReservation(Date startTime, Date endTime, Short[] userType,
			Integer businessId, Integer yearContract, Integer subBusineesId, String[] os, Short[] status,
			Short[] paymentType, String type, String key, String orderBy, Integer page, Integer size) {

		try {
			String str_where = "";
			Calendar cal = Calendar.getInstance();
			Calendar now = Calendar.getInstance();
			str_where += " and cs.start_time >= " + "'" + now.get(Calendar.YEAR) + "-" + (now.get(Calendar.MONTH) + 1)
					+ "-" + now.get(Calendar.DATE) + "'";
			if (startTime != null) {
				cal.setTime(startTime);
				str_where += " and cs.create_date > " + "'" + cal.get(Calendar.YEAR) + "-"
						+ (cal.get(Calendar.MONTH) + 1) + "-" + cal.get(Calendar.DATE) + "'";
			}

			if (endTime != null) {
				cal.setTime(endTime);
				str_where += " and cs.create_date <= " + "'" + cal.get(Calendar.YEAR) + "-"
						+ (cal.get(Calendar.MONTH) + 1) + "-" + cal.get(Calendar.DATE) + " 23:59:59'";
			}

			if (userType.length == 1) {
				if (userType[0] == 0) {
					str_where += " and (u1.role_id = 1 or u1.role_id = 5)";
				} else if (userType[0] == 1) {
					str_where += " and (u1.role_id = 6 or u1.role_id = 7)";
				}
			}

			if (businessId > 0) {
				str_where += " and b.id = " + businessId;
				if (yearContract > 0) {
					str_where += " and sb.year_manager =" + yearContract;
				}
				if (subBusineesId > 0) {
					str_where += " and sb.id = " + subBusineesId;
				}
			}

			if (status.length == 1) {
				str_where += " and cs.status = " + status[0];
			} else {
				str_where += " and (cs.status = 0 or cs.status = 1 )";
			}

			if (os.equals("")) {
				str_where += " and u1.os_name = " + os[0];
			}

			if (status.length == 1) {
				str_where += " and cs.status = " + status[0];
			}

			if (paymentType.length == 1) {
				str_where += " and ph.type_coin = " + paymentType[0];
			}

			if (type != null & key != null) {
				if (type.equals("reservationName")) {
					str_where += " and u1.fullname like '%" + key + "%'";
				} else if (type.equals("counselorName")) {
					str_where += " and u2.fullname like '%" + key + "%'";
				}
			}
			String order = " order by ";
			if (orderBy.equals("reservationName")) {
				order += "u1.fullname ASC";
			} else if (orderBy.equals("counselorName")) {
				order += "u2.fullname ASC";
			} else {
				order += "cs.start_time DESC";
			}
			String select_atribute = " select cs.id, u1.fullname as username,u1.role_id, b.business_name as businessName, sb.year_manager, sb.business_name as subBusinessname, u2.fullname as counselorName, cs.create_date, cs.start_time, cs.status, ph.type_coin ";
			String select_count = "select count(*) ";
			String str_clause = "from (((((counseling_session cs inner join user u1 on u1.id = cs.user_id) "
					+ "inner join counselor c on c.id = cs.counselor_id  ) inner join user u2 on c.id = u2.id) "
					+ "left join payment_history ph on cs.payment_id = ph.id) "
					+ "left join business sb on sb.id = u1.id) left join business b on b.id = sb.parent_business_id "
					+ "where ph.type_payment =2 and cs.is_delete = 0 " + str_where + order;

			Query q = em.createNativeQuery(select_atribute + str_clause + " limit " + (page - 1) + ", " + size);
			System.out.println(select_atribute + str_clause + " limit " + (page - 1) + ", " + size);
			@SuppressWarnings("unchecked")
			List<Object[]> reservation = q.getResultList();
			List<ReservationEntity> list = new ArrayList<>();
			for (Object[] i : reservation) {
				ReservationEntity r = new ReservationEntity();
				r.setId((Integer) i[0]);
				r.setReservationName((String) i[1]);
				r.setReservationRole((Integer) i[2]);
				r.setBussiness((String) i[3]);
				r.setYearContract((Integer) i[4]);
				r.setSubBussiness((String) i[5]);
				r.setCounselorName((String) i[6]);
				r.setCreateDate((Date) i[7]);
				r.setStartTime((Date) i[8]);
				r.setStatus((Short) i[9]);
				r.setTypeCoin((Short) i[10]);
				list.add(r);
			}
			Query c = em.createNativeQuery(select_count + str_clause);
			Object o = c.getSingleResult();
			Long totalCount = ((Number) c.getSingleResult()).longValue();
			PageCustom<ReservationEntity> pageCustom = new PageCustom<>(list, totalCount, page, size);
			return pageCustom;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	@Override
	public PageCustom<ReservationEntity> filterCounseling(String startTime, String endTime, Short[] userType,
			Integer businessId, Integer yearContract, Integer subBusineesId, Short[] status, Short[] paymentId,
			String type, String key, String orderBy, Integer page, Integer size) {
		try {
			String str_where = "";
			if (startTime != null) {
				str_where += " and DATE_FORMAT(cs.start_time,'%Y/%m/%d') >= '" + startTime + "' ";
			}

			if (endTime != null) {
				str_where += " and DATE_FORMAT(cs.start_time,'%Y/%m/%d') <= '" + endTime + "' ";
			}

			if (userType.length == 1) {
				if (userType[0] == 0) {
					str_where += " and u1.role_id = 1 ";
				} else if (userType[0] == 1) {
					str_where += " and u1.role_id = 5 ";
					if (businessId > 0) {
						str_where += " and b.id = " + businessId;
						if (yearContract > 0) {
							str_where += " and sb.manage_year =" + yearContract;
						}
						if (subBusineesId > 0) {
							str_where += " and sb.id = " + subBusineesId;
						}
					}
				}
			}

			if (status.length > 0) {
				List<Short> list_status = new ArrayList<>();
				for (Short i : status) {
					if (i == 4) {
						str_where += " and TIMESTAMPDIFF(MINUTE,cs.start_time,cs.entry_user_time) >= 15 ";
					} else {
						list_status.add(i);
					}
				}
				if (list_status.size() > 0) {
					status = list_status.toArray(new Short[list_status.size()]);
					String str_status = Arrays.toString(status);
					str_status = str_status.replace("[", "(");
					str_status = str_status.replace("]", ")");
					str_where += " and cs.status in " + str_status;
				}

			} else {
				str_where += " and cs.status in (2,3)";
			}

			if (paymentId.length == 1) {
				str_where += " and ph.type_coin = " + paymentId[0];
			}

			if (type != null & key != null) {
				if (type.equals("reservationName")) {
					str_where += " and u1.fullname like '%" + key + "%'";
				} else if (type.equals("counselorName")) {
					str_where += " and u2.fullname like '%" + key + "%'";
				}
			}
			String order = " order by ";
			if (orderBy.equals("memberName")) {
				order += "u1.fullname ASC";
			} else if (orderBy.equals("counselorName")) {
				order += "u2.fullname ASC";
			} else {
				order += "cs.start_time DESC";
			}
			String select_atribute = " select cs.id, u1.fullname as username,u1.role_id, b.business_name as businessName, sb.manage_year, sb.business_sub_name as subBusinessname, u2.fullname as counselorName, cs.start_time, cs.end_time, cs.status, ph.type_coin,"
					+ " cs.entry_counselor_time, cs.entry_user_time, cs.exit_counselor_time, cs.exit_user_time ";
			String select_count = "select count(*) ";
			String str_clause = "from (((((counseling_session cs inner join user u1 on u1.id = cs.user_id) "
					+ "inner join counselor c on c.id = cs.counselor_id  ) inner join user u2 on c.id = u2.id) "
					+ "left join payment_history ph on cs.payment_id = ph.id) "
					+ "left join business_sub sb on sb.id = u1.business_sub_id) left join business b on b.id = sb.business_id "
					+ "where ph.type_payment =2  and  cs.is_delete = 0 " + str_where + order;

			Query q = em.createNativeQuery(
					select_atribute + str_clause + " limit " + size + " OFFSET " + (page - 1) * size);
			@SuppressWarnings("unchecked")
			List<Object[]> reservation = q.getResultList();
			List<ReservationEntity> list = new ArrayList<>();
			for (Object[] i : reservation) {
				ReservationEntity r = new ReservationEntity();
				r.setId((Integer) i[0]);
				r.setReservationName((String) i[1]);
				r.setReservationRole((Integer) i[2]);
				r.setBussiness((String) i[3]);
				r.setYearContract((Integer) i[4]);
				r.setSubBussiness((String) i[5]);
				r.setCounselorName((String) i[6]);
				r.setStartTime((Date) i[7]);
				r.setEndTime((Date) i[8]);
				r.setStatus((Short) i[9]);
				r.setTypeCoin((Short) i[10]);
				r.setEntryCounselorTime((Date) i[11]);
				r.setEntryUserTime((Date) i[12]);
				r.setExitCounselorTime((Date) i[13]);
				r.setExitUserTime((Date) i[14]);
				list.add(r);
			}
			Query c = em.createNativeQuery(select_count + str_clause);
			Object o = c.getSingleResult();
			Long totalCount = ((Number) c.getSingleResult()).longValue();
			PageCustom<ReservationEntity> pageCustom = new PageCustom<>(list, totalCount, page, size);
			return pageCustom;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	@Override
	public List<CounselingSession> findEarliestCounselingTime(Integer userId) {
		List<CounselingSessionEntity> entities = counselingSessionJpaRepository.findEarliestCounselingTime(userId);
		List<CounselingSession> beans = new ArrayList<>();
		for (CounselingSessionEntity counselingSessionEntity : entities) {
			beans.add(counselingSessionServiceMapper
					.mapCounselingSessionEntityToCounselingSession(counselingSessionEntity));
		}
		return beans;
	}

	@Override
	public List<MyReservation> counselingSessionEntitiesByUserId(Integer userId) {
		try {
			List<MyReservation> list = new ArrayList<>();
			String str_clause = "select * from ("
					+ " (select  co.thumbnail_url, u.fullname, c.start_time , c.end_time, c.status , c.id , co.points, co.likes , c.payment_id , co.id AS a, uq.counseling_session_id "
					+ " from counseling_session c JOIN counselor co on c.counselor_id = co.id JOIN user u on co.id = u.id LEFT JOIN user_questionaire uq on c.id = uq.counseling_session_id  "
					+ " WHERE c.status = 1 and c.is_delete = 0 and c.user_id = " + userId
					+ " and c.end_time >= NOW() ) "
					+ " union all ( select  co1.thumbnail_url, u1.fullname, c1.start_time , c1.end_time, c1.status , c1.id , co1.points, co1.likes , c1.payment_id, co1.id AS a , uq1.counseling_session_id "
					+ " from counseling_session c1 " + " JOIN counselor co1 on c1.counselor_id = co1.id "
					+ " JOIN user u1 on co1.id = u1.id "
					+ " LEFT JOIN user_questionaire uq1 on c1.id = uq1.counseling_session_id "
					+ " WHERE c1.status = 0 and c1.is_delete = 0 and c1.user_id = " + userId
					+ " and DATEDIFF(NOW(),c1.cancel_metting_time) <= 7 )) x ORDER BY  x.status DESC, x.end_time DESC ";

			Query q = em.createNativeQuery(str_clause);
			@SuppressWarnings("unchecked")
			List<Object[]> results = q.getResultList();
			for (Object[] i : results) {
				MyReservation m = new MyReservation();
				m.setThumbnailUrlCounselor((String) i[0]);
				m.setFullNameCounselor((String) i[1]);
				m.setStartTimeCounseling((Date) i[2]);
				m.setEndTimeCounseling((Date) i[3]);
				if (((Short) i[4]) == 0) {
					m.setIsCancelCounseling(1);
				} else {
					m.setIsCancelCounseling(0);
				}
				m.setId((Integer) i[5]);
				m.setPointsCounselor((Float) i[6]);
				m.setPointsConvertCounselor(m.getPointsCounselor());
				m.setLikesCounselor((Integer) i[7]);
				m.setPaymentId((Integer) i[8]);
				m.setCounselorId((Integer) i[9]);
				if ((Integer) i[10] != null) {
					m.setStatusEvaluationOfSatisfaction(1);
				} else {
					m.setStatusEvaluationOfSatisfaction(0);
				}
				list.add(m);
			}
			return list;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public MyReservation myReservationByCounselingSessionId(Integer counselingSessionId, Integer userId) {
		try {
			String str_clause = "select co.thumbnail_url, u.fullname, c.start_time , c.end_time, c.status , c.id , co.points, co.likes , c.payment_id, co.id AS a , uq.counseling_session_id "
					+ "from counseling_session c " + "JOIN counselor co on c.counselor_id = co.id "
					+ "JOIN user u on co.id = u.id "
					+ "LEFT JOIN user_questionaire uq on c.id = uq.counseling_session_id " + "WHERE c.user_id ="
					+ userId + " and c.is_delete = 0 and c.id =" + counselingSessionId + " ";

			MyReservation myReservation = new MyReservation();
			Query q = em.createNativeQuery(str_clause);
			Object[] results = (Object[]) q.getSingleResult();
			myReservation.setThumbnailUrlCounselor((String) results[0]);
			myReservation.setFullNameCounselor((String) results[1]);
			myReservation.setStartTimeCounseling((Date) results[2]);
			myReservation.setEndTimeCounseling((Date) results[3]);
			if (((Short) results[4]) == 0) {
				myReservation.setIsCancelCounseling(1);
			} else {
				myReservation.setIsCancelCounseling(0);
			}
			myReservation.setId((Integer) results[5]);
			myReservation.setPointsCounselor((Float) results[6]);
			myReservation.setPointsConvertCounselor(myReservation.getPointsCounselor());
			myReservation.setLikesCounselor((Integer) results[7]);
			myReservation.setPaymentId((Integer) results[8]);
			myReservation.setCounselorId((Integer) results[9]);
			if ((Integer) results[10] != null) {
				myReservation.setStatusEvaluationOfSatisfaction(1);
			} else {
				myReservation.setStatusEvaluationOfSatisfaction(0);
			}

			return myReservation;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public List<MyReservation> counselingSessionHistoryByUserId(Integer page, Integer size, Integer userId) {
		try {
			if (page > 0) {
				page = page - 1;
			}
			List<MyReservation> list = new ArrayList<>();
			String str_clause = "select co1.thumbnail_url, u1.fullname, c1.start_time , c1.end_time, c1.status , c1.id , uq.point, co1.likes , c1.payment_id, co1.id as a1, uq.counseling_session_id "
					+ "from counseling_session c1 " + "JOIN counselor co1 on c1.counselor_id = co1.id "
					+ "JOIN user u1 on co1.id = u1.id "
					+ "LEFT JOIN user_questionaire uq on c1.id = uq.counseling_session_id "
					+ "WHERE c1.status IN (2,3,4) and c1.is_delete = 0 and c1.user_id =" + userId
					+ " order by c1.end_time DESC limit " + (page * size) + "," + size;

			Query q = em.createNativeQuery(str_clause);
			@SuppressWarnings("unchecked")
			List<Object[]> results = q.getResultList();
			for (Object[] i : results) {
				MyReservation m = new MyReservation();
				m.setThumbnailUrlCounselor((String) i[0]);
				m.setFullNameCounselor((String) i[1]);
				m.setStartTimeCounseling((Date) i[2]);
				m.setEndTimeCounseling((Date) i[3]);
				if (((Short) i[4]) == 0) {
					m.setIsCancelCounseling(1);
				} else {
					m.setIsCancelCounseling(0);
				}
				m.setId((Integer) i[5]);
				if ((Float) i[6] == null) {
					m.setPointsCounselor(0f);
				} else {
					m.setPointsCounselor((Float) i[6]);
				}

				m.setPointsConvertCounselor(m.getPointsCounselor() * 2);
				m.setLikesCounselor((Integer) i[7]);
				m.setPaymentId((Integer) i[8]);
				m.setCounselorId((Integer) i[9]);
				if ((Integer) i[10] != null) {
					m.setStatusEvaluationOfSatisfaction(1);
				} else {
					m.setStatusEvaluationOfSatisfaction(0);
				}
				list.add(m);
			}
			return list;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public Integer totalCompletedCounselingHistoryByUser(Integer userId) {
		Integer total = counselingSessionJpaRepository.totalCompletedCounselingHistoryByUser(userId);
		if (total == null) {
			total = 0;
		}
		return total;
	}

	@Override
	public Integer[] getYearCompletedCounseling(Integer userId) {
		return counselingSessionJpaRepository.getYearCompletedCounseling(userId);
	}

	@Override
	public TreeMap<Float, ReservedAndCounselingType> listStartTimeCounselingSSByDay(Date dayConvert, Integer counselorId) {
		List<Object[]> entities = counselingSessionJpaRepository.listStartTimeCounselingSSByDay(dayConvert, counselorId);
		TreeMap<Float, ReservedAndCounselingType> maps = new TreeMap<>();
		for (Object[] objects : entities) {
			Date fromDate = (Date) objects[0];
			Date toDate = (Date) objects[2];
			
			ReservedAndCounselingType r = new ReservedAndCounselingType();
			r.setTypeCounseling(((float)((Short) objects[1]))/100);
			r.setToDate(DataUtils.dateToFloat(toDate));
			
			maps.put(DataUtils.dateToFloat(fromDate), r);
		}
		return maps;
	}
	
	@Override
	public List<ReservationTime> getReservedList(Date dayConvert, Integer counselorId) {
		List<Object[]> entities = counselingSessionJpaRepository.getReservedList(dayConvert, counselorId);
		List<ReservationTime> list = new ArrayList<>();
		for (Object[] objects : entities) {
			Date fromDate = (Date) objects[0];
			Date toDate = (Date) objects[1];

			ReservationTime r = new ReservationTime();
			r.setFromDate(DataUtils.dateToFloat(fromDate));
			r.setToDate(DataUtils.dateToFloat(toDate));
			
			list.add(r);
		}
		return list;
	}

	
	@Override
	public List<UserCounselingSession> listCounselingSSInAWeek(Integer counselorId) {
		try {
			List<Object[]> rs = counselingSessionJpaRepository.listCounselingSSInAWeek(counselorId);
			List<UserCounselingSession> list = new ArrayList<>();
			for (Object[] obj : rs) {
				UserCounselingSession u = new UserCounselingSession();
				u.setFullName((String) obj[0]);
				u.setEmail((String) obj[1]);
				u.setUserId((Integer) obj[2]);
				list.add(u);
			}
			return list;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public List<UserCounselingSession> listCounselingSessionByCounselorId(Integer counselorId) {
		try {
			List<Object[]> rs = counselingSessionJpaRepository.listCounselingSessionByCounselorId(counselorId);
			List<UserCounselingSession> list = new ArrayList<>();
			for (Object[] obj : rs) {
				UserCounselingSession u = new UserCounselingSession();
				u.setFullName((String) obj[0]);
				u.setEmail((String) obj[1]);
				u.setUserId((Integer) obj[2]);
				list.add(u);
			}
			return list;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public CounselingSession findByIdAnhUserId(Integer userId, Integer revertionId) {
		try {
			CounselingSessionEntity counselingSessionEntity = counselingSessionJpaRepository.findByIdAnhUserId(userId,
					revertionId);
			return counselingSessionServiceMapper
					.mapCounselingSessionEntityToCounselingSession(counselingSessionEntity);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}

	}

	@Override
	public int countBy(Date start, Date end, Integer counselorId) {
		try {
			return counselingSessionJpaRepository.countBy(start, end, counselorId);
		} catch (Exception e) {
			e.printStackTrace();
			return 0;
		}
	}
	
	@Override
	public int countByNow(Date now, Integer counselorId) {
		try {
			return counselingSessionJpaRepository.countByNow(now, counselorId);
		} catch (Exception e) {
			e.printStackTrace();
			return 0;
		}
	}

	@Override
	public List<CounselingSessionEntity> listNotificaionByMinutes(Integer year, Integer month, Integer day,
			Integer hour, Integer minute) {
		try {
			return counselingSessionJpaRepository.listNotificaionByMinutes(year, month, day, hour, minute);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public List<CounselingSessionEntity> listNotificaionByHour(Integer year, Integer month, Integer day, Integer hour,
			Integer minute) {
		try {
			return counselingSessionJpaRepository.listNotificaionByHour(year, month, day, hour, minute);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public List<Object[]> listRequiredSatisfaction(Integer year, Integer month, Integer day, Integer hour,
			Integer minute) {
		try {
			return counselingSessionJpaRepository.listRequiredSatisfaction(year, month, day, hour, minute);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public List<Long> listTimeByDate(Integer couselorId, Date date) {
		List<BigInteger> rs = counselingSessionJpaRepository.listTimeByDate(couselorId, date);
		List<Long> list = new ArrayList<>();
		for (int i = 0; i < rs.size(); i++) {
			list.add(rs.get(i).longValue());
		}
		return list;
	}

	@Override
	public Integer countTotalCouseling(Date startTime, Date endTime, Integer couselorId) {
		Integer totalCo = counselingSessionJpaRepository.countTotalCouseling(startTime, endTime, couselorId);
		if (totalCo == null) {
			totalCo = 0;
		}
		return totalCo;
	}

	@Override
	public void updateCounselingFinished() {
		try {
			counselingSessionJpaRepository.updateCounselingFinished();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@Override
	public void updateCounselingNotFinished() {
		try {
			counselingSessionJpaRepository.updateCounselingNotFinished();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@Override
	public CounselingSessionEntity findOneByRoomId(String roomId) {
		return counselingSessionJpaRepository.findByRoomId(roomId);
	}

	@Override
	public Float totalPointByCounselor(Integer counselorId) {
		Float total = counselingSessionJpaRepository.totalPointByCounselor(counselorId);
		if (total == null) {
			total = 0f;
		}
		return total;
	}

	@Override
	public PageCustom<ProfitData> filterProfitDataCounselor(SearchProfitCounselor s, Integer page, Integer size) {
		
			String select_column ="SELECT CS.id,CU.fullname, CU.role_id, P.type_coin, P.create_date, P.coin, U.fullname as username, CU.username as counselorUsername, C.id as counselorId ";
			
			String select_count ="SELECT COUNT(*) ";
			
			String select_total_coin = "SELECT CASE WHEN SUM(P.coin) is null THEN 0 ELSE SUM(P.coin) END ";
			
			String from ="FROM counseling_session CS "
					+ "INNER JOIN counselor C ON CS.counselor_id = C.id "
					+ "INNER JOIN user U ON CS.user_id = U.id "
					+ "INNER JOIN user CU ON C.id = CU.id "
					+ "INNER JOIN payment_history P ON P.id = CS.payment_id ";
			
			String where = "WHERE CS.status = 2 AND P.status = 1 AND CU.role_id = "+ApplicationDefine.USER_ROLE_COUNSELOR_FREELANCE;
			
			if(s.getStartTime() != null){
				where += " AND DATE_FORMAT(P.create_date, '%Y-%m-%d') >= '" + s.getStartTime() + "'";
			}
			
			if(s.getEndTime() != null){
				where += " AND DATE_FORMAT(P.create_date, '%Y-%m-%d') <= '" + s.getEndTime() + "'";
			}
			
			if(!s.getUseVoucher().equals(s.getUseHelloCoin())){
				if(s.getUseHelloCoin()){
					where += " AND P.type_coin = "+ ApplicationDefine.Payment_TypeCoin.Coin.getCode();
				}else{
					where += " AND P.type_coin = "+ ApplicationDefine.Payment_TypeCoin.Voucher.getCode();
				}
			}
			
			
			if(s.getCommon().getType() != null && s.getCommon().getKeyWord() != null){
				if(s.getCommon().getType().contains("user_name")){
					where +=" AND U.fullname LIKE '%"+s.getCommon().getKeyWord()+"%' ";
				}else if(s.getCommon().getType().contains("counselor_name")){
					where +=" AND CU.fullname = '"+s.getCommon().getKeyWord()+"' ";
				}else{
					where +=" AND CU.username like '"+s.getCommon().getKeyWord()+"' ";
				}
			}
			
			String order = " ORDER BY create_date DESC ";
			
			Integer offset = DataUtils.getOffset(s.getCommon().getPage(), size);
			String limit = " LIMIT " + offset + ", " + size;
			
			try {
				Query q = em.createNativeQuery(select_column + from + where + order + limit);
				@SuppressWarnings("unchecked")
				List<Object[]> reservation = q.getResultList();
				List<ProfitData> list = new ArrayList<>();
				for (Object[] i : reservation) {
					ProfitData r = new ProfitData();
					r.setCounselingId((Integer) i[0]);
					r.setCounselorName((String) i[1]);
					Integer role = (Integer)i[2];
					if(role == 2){
						r.setCounselorType((short)2);
					}else{
						r.setCounselorType((short)3);
					}
					r.setTypeCoin((Short)i[3]);
					r.setDatePayment((Date) i[4]);
					r.setMoney((Integer) i[5]);
					r.setUserName((String) i[6]);
					r.setCounselorUserName((String) i[7]);
					r.setCounselorId((Integer) i[8]);
					list.add(r);
				}
				Query c = em.createNativeQuery(select_count + from + where);
				Long totalCount = ((Number) c.getSingleResult()).longValue();
				Query d = em.createNativeQuery(select_total_coin + from + where);
				Long totalCoin = ((Number) d.getSingleResult()).longValue();
				List<Object> other = new ArrayList<>();
				other.add(totalCoin);
				PageCustom<ProfitData> pageCustom = new PageCustom<ProfitData>(list, totalCount, page, size, other);
				return pageCustom;
			} catch (Exception e) {
				e.printStackTrace();
			}
			return null;
	}
	
	@Override
	public PageCustom<ProfitData> filterProfitDataCounselorCenter(SearchProfitCounselorCenter s, Integer page, Integer size) {
		
			String select_column ="SELECT CS.id,CU.fullname, CU.role_id, P.type_coin, P.create_date, P.coin, U.fullname as username, CC.center_name, CU.username as counselorUsername, C.id as counselorId ";
			
			String select_count ="SELECT COUNT(*) ";
			
			String select_total_coin = "SELECT CASE WHEN SUM(P.coin) is null THEN 0 ELSE SUM(P.coin) END ";
			
			String from ="FROM counseling_session CS "
					+ "INNER JOIN counselor C ON CS.counselor_id = C.id "
					+ "INNER JOIN counseling_center CC ON CC.id = C.counselor_center_id "
					+ "INNER JOIN user U ON CS.user_id = U.id "
					+ "INNER JOIN user CU ON C.id = CU.id "
					+ "INNER JOIN payment_history P ON P.id = CS.payment_id ";
			
			String where = "WHERE CS.status = 2 AND P.status = 1 ";
			
			if(s.getStartTime() != null){
				where += " AND DATE_FORMAT(P.create_date, '%Y-%m-%d') >= '" + s.getStartTime() + "'";
			}
			
			if(s.getEndTime() != null){
				where += " AND DATE_FORMAT(P.create_date, '%Y-%m-%d') <= '" + s.getEndTime() + "'";
			}
			
			if(s.getCounselingCenterId() != null){
				where += " AND CC.id ="+s.getCounselingCenterId();
			}
			
			if(!s.getUseVoucher().equals(s.getUseHelloCoin())){
				if(s.getUseHelloCoin()){
					where += " AND P.type_coin = "+ ApplicationDefine.Payment_TypeCoin.Coin.getCode();
				}else{
					where += " AND P.type_coin = "+ ApplicationDefine.Payment_TypeCoin.Voucher.getCode();
				}
			}
			
			
			if(s.getCommon().getType() != null && s.getCommon().getKeyWord() != null){
				if(s.getCommon().getType().contains("user_name")){
					where +=" AND U.fullname LIKE '%"+s.getCommon().getKeyWord()+"%' ";
				}else if(s.getCommon().getType().contains("counselor_name")){
					where +=" AND CU.fullname LIKE '%"+s.getCommon().getKeyWord()+"%' ";
				}else{
					where +=" AND CU.username LIKE '%"+s.getCommon().getKeyWord()+"%' ";
				}
			}
			
			String order = " order by create_date DESC ";
			
			Integer offset = DataUtils.getOffset(s.getCommon().getPage(), size);
			String limit = " LIMIT " + offset + ", " + size;
			
			try {
				Query q = em.createNativeQuery(select_column + from + where + order + limit);
				@SuppressWarnings("unchecked")
				List<Object[]> reservation = q.getResultList();
				List<ProfitData> list = new ArrayList<>();
				for (Object[] i : reservation) {
					ProfitData r = new ProfitData();
					r.setCounselingId((Integer) i[0]);
					r.setCounselorName((String) i[1]);
					Integer role = (Integer)i[2];
					if(role == 2){
						r.setCounselorType((short)2);
					}else{
						r.setCounselorType((short)3);
					}
					r.setTypeCoin((Short)i[3]);
					r.setDatePayment((Date) i[4]);
					r.setMoney((Integer) i[5]);
					r.setUserName((String) i[6]);
					r.setCenterName((String) i[7]);
					r.setCounselorUserName((String) i[8]);
					r.setCounselingId((Integer) i[9]);
					list.add(r);
				}
				
				Query c = em.createNativeQuery(select_count + from + where);
				Long totalCount = ((Number) c.getSingleResult()).longValue();
				Query d = em.createNativeQuery(select_total_coin + from + where);
				Long totalCoin = ((Number) d.getSingleResult()).longValue();
				List<Object> other = new ArrayList<>();
				other.add(totalCoin);
				PageCustom<ProfitData> pageCustom = new PageCustom<ProfitData>(list, totalCount, page, size, other);
				return pageCustom;
			} catch (Exception e) {
				e.printStackTrace();
			}
			return null;
	}
	
	@Override
	public PageCustom<ProfitData> filterProfitDataBusiness(SearchProfitBusiness s, Integer page, Integer size) {
		
			String select_column ="SELECT B.business_name, BS.manage_year, BS.business_sub_name, U.fullname, U.id , P.create_date, P.coin ";
			
			String select_count ="SELECT COUNT(*) ";
			
			String select_total_coin = "SELECT CASE WHEN SUM(P.coin) is null THEN 0 ELSE SUM(P.coin) END ";
			
			String from ="FROM counseling_session CS "
					+ "INNER JOIN user U ON CS.user_id = U.id "
					+ "INNER JOIN payment_history P ON P.id = CS.payment_id "
					+ "INNER JOIN business_sub BS ON BS.id = U.business_sub_id "
					+ "INNER JOIN business B ON B.id = BS.business_id ";
					
			
			String where = "WHERE CS.status = 2 AND P.status = 1 AND U.role_id = "+ApplicationDefine.USER_ROLE_MEMBER_BUSSINESS +" AND P.type_coin="+ ApplicationDefine.Payment_TypeCoin.Voucher.getCode();
			
			if(s.getBusinessId() != null){
				where +=" AND B.id = "+ s.getBusinessId();
			}
			
			if(s.getBusinessSubId() != null){
				where +=" AND BS.id = "+ s.getBusinessSubId();
			}
			
			if(s.getManageYear() != null){
				where +=" AND BS.manage_year = "+ s.getManageYear();
			}
			
			if(s.getCommon().getKeyWord() != null){
					where +=" AND U.fullname like '%"+s.getCommon().getKeyWord()+"%' ";
			}
			
			String order = " ORDER BY create_date DESC ";
			
			Integer offset = DataUtils.getOffset(s.getCommon().getPage(), size);
			String limit = " LIMIT " + offset + ", " + size;
			
			try {
				Query q = em.createNativeQuery(select_column + from + where + order + limit);
				@SuppressWarnings("unchecked")
				List<Object[]> reservation = q.getResultList();
				List<ProfitData> list = new ArrayList<>();
				for (Object[] i : reservation) {
					ProfitData r = new ProfitData();
					r.setBusinessName((String)i[0]);
					r.setManageYear((Integer) i[1]);
					r.setBusinessSubName((String) i[2]);
					r.setUserName((String) i[3]);
					r.setUserId((Integer) i[4]);
					r.setVoucherNumber(1);
					r.setDatePayment((Date) i[5]);
					r.setMoney((Integer) i[6]);
					list.add(r);
				}
				Query c = em.createNativeQuery(select_count + from + where);
				Long totalCount = ((Number) c.getSingleResult()).longValue();
				Query d = em.createNativeQuery(select_total_coin + from + where);
				Long totalCoin = ((Number) d.getSingleResult()).longValue();
				List<Object> other = new ArrayList<>();
				other.add(totalCoin);
				PageCustom<ProfitData> pageCustom = new PageCustom<ProfitData>(list, totalCount, page, size, other);
				return pageCustom;
			} catch (Exception e) {
				e.printStackTrace();
			}
			return null;
	}

	@Override
	public PageCustom<CounselingStatistics> filterStatistics(SearchStatistics s, Integer page, Integer size) {
		try {
			String WHERE = "";
			String SUB_QUERY1 = "";
			String SUB_QUERY2 = "";
			if(s.isAndroid() != s.isIos()){
				if(s.isAndroid()){
					WHERE += " AND type_os = 'android' ";
				}
				if(s.isIos()){
					WHERE += " AND type_os = 'ios' ";
				}
			}
			
			if(s.getCenterId() != null){
				WHERE += " AND cl.counselor_center_id = "+ s.getCenterId()+" ";
			}
			
			if (s.getType().equals("weekly")) {
				SUB_QUERY1 +="SELECT WEEK(c.create_date) as title, COUNT(c.status !=0) as totalReverstation, 0 as totalCounseling ";
				SUB_QUERY1 +="FROM counseling_session c INNER JOIN counselor cl ON cl.id = c.counselor_id ";
				SUB_QUERY1 +="WHERE WEEK(c.create_date) >= " + s.getFromWeek() + " AND WEEK(c.create_date) <= " + s.getToWeek() + " ";
				SUB_QUERY1 +="AND YEAR(c.create_date)= " + s.getYearWeekly()+" ";
				SUB_QUERY1 +="AND c.counsel_type = 2 AND c.status !=0 ";
				SUB_QUERY1 +=WHERE;
				SUB_QUERY1 +="GROUP BY title";
				
				SUB_QUERY2 +="SELECT WEEK(c.exit_counselor_time) as title, 0 as totalReverstation, COUNT(c.status !=0) as totalCounseling ";
				SUB_QUERY2 +="FROM counseling_session c INNER JOIN counselor cl ON cl.id = c.counselor_id ";
				SUB_QUERY2 +="WHERE WEEK(c.exit_counselor_time) >= " + s.getFromWeek() + " AND WEEK(c.exit_counselor_time) <= " + s.getToWeek() + " ";
				SUB_QUERY2 +="AND YEAR(c.exit_counselor_time)= " + s.getYearWeekly()+" ";
				SUB_QUERY2 +=WHERE;
				SUB_QUERY2 +="GROUP BY title";
				
				
			} else if (s.getType().equals("monthly")) {
				SUB_QUERY1 +="SELECT MONTH(c.create_date) as title, COUNT(c.status !=0) as totalReverstation, 0 as totalCounseling ";
				SUB_QUERY1 +="FROM counseling_session c INNER JOIN counselor cl ON cl.id = c.counselor_id ";
				SUB_QUERY1 +="WHERE MONTH(c.create_date) >= " + s.getFromMonth() + " AND MONTH(c.create_date) <= " + s.getToMonth()+ " ";
				SUB_QUERY1 +="AND YEAR(c.create_date)= " + s.getYearMonthly()+" ";
				SUB_QUERY1 +="AND c.counsel_type = 2 AND c.status !=0 ";
				SUB_QUERY1 +=WHERE;
				SUB_QUERY1 +="GROUP BY title";
				
				SUB_QUERY2 +="SELECT MONTH(c.exit_counselor_time) as title, 0 as totalReverstation, COUNT(c.status !=0) as totalCounseling ";
				SUB_QUERY2 +="FROM counseling_session c INNER JOIN counselor cl ON cl.id = c.counselor_id ";
				SUB_QUERY2 +="WHERE MONTH(c.exit_counselor_time) >= " + s.getFromMonth() + " AND MONTH(c.exit_counselor_time) <= " + s.getToMonth()+ " ";
				SUB_QUERY2 +="AND YEAR(c.exit_counselor_time)= " + s.getYearMonthly()+" ";
				SUB_QUERY2 +=WHERE;
				SUB_QUERY2 +="GROUP BY title";
				
				
			} else {
				SUB_QUERY1 +="SELECT DATE(c.create_date) as title, COUNT(*) as totalReverstation, 0 as totalCounseling ";
				SUB_QUERY1 +="FROM counseling_session c INNER JOIN counselor cl ON cl.id = c.counselor_id ";
				SUB_QUERY1 +="WHERE DATE_FORMAT(c.create_date,'%Y/%m/%d') >= '" + s.getStartDate() + "' AND DATE_FORMAT(c.create_date,'%Y/%m/%d') <= '" + s.getEndDate()+"' ";
				SUB_QUERY1 +="AND c.counsel_type = 2 AND c.status !=0 ";
				SUB_QUERY1 +=WHERE;
				SUB_QUERY1 +="GROUP BY title";
				
				SUB_QUERY2 +="SELECT DATE(c.exit_counselor_time) as title, 0 as totalReverstation, COUNT(c.status !=0) as totalCounseling ";
				SUB_QUERY2 +="FROM counseling_session c INNER JOIN counselor cl ON cl.id = c.counselor_id ";
				SUB_QUERY2 +="WHERE DATE_FORMAT(c.exit_counselor_time,'%Y/%m/%d') >= '" + s.getStartDate() + "' AND DATE_FORMAT(c.exit_counselor_time,'%Y/%m/%d') <= '" + s.getEndDate()+"' ";
				SUB_QUERY2 +=WHERE;
				SUB_QUERY2 +="GROUP BY title";
			}
			
			
			
			String SELECT = "SELECT t.title, SUM(t.totalReverstation), SUM(t.totalCounseling) "
						+ "FROM( ";
				SELECT 	+="("+SUB_QUERY1+")";
				SELECT 	+="UNION";
				SELECT 	+="("+SUB_QUERY2+")) t ";
				SELECT 	+="GROUP BY t.title ORDER BY t.title DESC";
				
			List<CounselingStatistics> listPage = new ArrayList<>();
			Integer totalReverstation = 0;
			Integer totalCounseling = 0;
			System.out.println(SELECT);
			@SuppressWarnings("unused")
			Query q = em.createNativeQuery(SELECT);
			List<Object[]> listObject = q.getResultList();
			Integer index = 0;
			Calendar cal = Calendar.getInstance();
			
			if (s.getType().equals("weekly")) {
				//get data by week
				for (int i = s.getToWeek(); i >= s.getFromWeek(); i--) {

					Calendar startWeek = Calendar.getInstance();
					startWeek.set(Calendar.WEEK_OF_YEAR, i);
					startWeek.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY);
					Calendar endWeek = Calendar.getInstance();
					endWeek.set(Calendar.WEEK_OF_YEAR, i+1);
					endWeek.set(Calendar.DAY_OF_WEEK, Calendar.SUNDAY);
					CounselingStatistics c = new CounselingStatistics();
					c.setTitle("W" + i + " (" + DataUtils.parseStringFromDate(startWeek.getTime(), "yyyy-MM-dd") + " ~ "
							+ DataUtils.parseStringFromDate(endWeek.getTime(), "yyyy-MM-dd") + ")");
					c.setTotalCounseling(0);
					c.setTotalReservation(0);
					
					for (int j = index; j < listObject.size(); j++) {
						Object[] ob = listObject.get(j);
						Integer week =Integer.valueOf(ob[0].toString());
						if (week == i) {
							c.setTotalReservation(Integer.valueOf(ob[1].toString()));
							c.setTotalCounseling(Integer.valueOf(ob[2].toString()));
							
							totalCounseling += c.getTotalCounseling();
							totalReverstation += c.getTotalReservation(); 
							
							index++;
						} else {
							break;
						}

					}
					listPage.add(c);
				}

			} else if (s.getType().equals("monthly")) {
				//get data by month
				for (int i = s.getToMonth(); i >= s.getFromMonth(); i--) {

					CounselingStatistics c = new CounselingStatistics();
					if (i < 10) {
						c.setTitle(s.getYearMonthly() + "-0" + i);
					} else {
						c.setTitle(s.getYearMonthly() + "-" + i);
					}
					c.setTotalCounseling(0);
					c.setTotalReservation(0);

					for (int j = index; j < listObject.size(); j++) {
						Object[] ob = listObject.get(j);
						Integer month =Integer.valueOf(ob[0].toString());
						if (month == i) {
							c.setTotalReservation(Integer.valueOf(ob[1].toString()));
							c.setTotalCounseling(Integer.valueOf(ob[2].toString()));
							
							totalCounseling += c.getTotalCounseling();
							totalReverstation += c.getTotalReservation(); 
							
							index++;
						} else {
							
							break;
						}

					}
					listPage.add(c);
				}

			} else {
				//get data by date
				Calendar start = Calendar.getInstance();
				Calendar end = Calendar.getInstance();
				
				if(s.getStartDate() == null){
					start.setTime(new Date());
				}else{
					Date date = DataUtils.convertToDate(s.getStartDate(), "yyyy/MM/dd");
					start.setTime(date);
				}
				
				if(s.getStartDate() == null){
					start.setTime(new Date());
				}else{
					Date date = DataUtils.convertToDate(s.getEndDate(), "yyyy/MM/dd");
					end.setTime(date);
				}
				long dayDiff = DataUtils.daysBetween(start, end);
				
				for (long i = dayDiff; i >= 0; i--) {
					CounselingStatistics c = new CounselingStatistics();
					c.setTitle(DataUtils.parseStringFromDate(end.getTime(), "yyyy-MM-dd"));
					c.setTotalCounseling(0);
					c.setTotalReservation(0);
					
					for (int j = index; j < listObject.size(); j++) {
						
						Object[] ob = listObject.get(j);
						cal.setTime((Date) ob[0]);
						if (DataUtils.daysBetween(end, cal) == 0) {
							c.setTotalReservation(Integer.valueOf(ob[1].toString()));
							c.setTotalCounseling(Integer.valueOf(ob[2].toString()));
							
							totalCounseling += c.getTotalCounseling();
							totalReverstation += c.getTotalReservation(); 
							
							
							index++;
						} else {
							break;
						}
					}
					listPage.add(c);
					end.add(Calendar.DATE, -1);
				}

			}

			List<Object> listOther = new ArrayList<>();
			listOther.add(totalReverstation);
			listOther.add(totalCounseling);

			return new PageCustom<CounselingStatistics>(listPage, Long.valueOf(listPage.size()), page, size, listOther);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	@Override
	public PageCustom<CounselingStatistics> filterStatisticsByWeek(SearchStatistics s) {
		try {
			String WHERE = "";
			String SUB_QUERY1 = "";
			String SUB_QUERY2 = "";
			if(s.isAndroid() != s.isIos()){
				if(s.isAndroid()){
					WHERE += " AND type_os = 'android' ";
				}
				if(s.isIos()){
					WHERE += " AND type_os = 'ios' ";
				}
			}
			if(s.getCenterId() != null){
				WHERE += " AND cl.counselor_center_id = "+ s.getCenterId()+" ";
			}
			SUB_QUERY1 +="SELECT DAYOFWEEK(c.create_date) as title, COUNT(c.status !=0) as totalReverstation, 0 as totalCounseling ";
			SUB_QUERY1 +="FROM counseling_session c INNER JOIN counselor cl ON cl.id = c.counselor_id ";
			SUB_QUERY1 +="WHERE DATE_FORMAT(c.create_date,'%Y/%m/%d') >= '" + s.getStartDate() + "' AND DATE_FORMAT(c.create_date,'%Y/%m/%d') <= '" + s.getEndDate()+"' ";
			SUB_QUERY1 +="AND c.counsel_type = 2 AND c.status !=0 ";
			SUB_QUERY1 +=WHERE;
			SUB_QUERY1 +="GROUP BY title";
			
			SUB_QUERY2 +="SELECT DAYOFWEEK(c.exit_counselor_time) as title, 0 as totalReverstation, COUNT(c.status !=0) as totalCounseling ";
			SUB_QUERY2 +="FROM counseling_session c INNER JOIN counselor cl ON cl.id = c.counselor_id ";
			SUB_QUERY2 +="WHERE DATE_FORMAT(c.exit_counselor_time,'%Y/%m/%d') >= '" + s.getStartDate() + "' AND DATE_FORMAT(c.exit_counselor_time,'%Y/%m/%d') <= '" + s.getEndDate()+"' ";
			SUB_QUERY2 +=WHERE;
			SUB_QUERY2 +="GROUP BY title";
			
			String SELECT = "SELECT t.title, SUM(t.totalReverstation), SUM(t.totalCounseling) "
						+ "FROM( ";
				SELECT 	+="("+SUB_QUERY1+")";
				SELECT 	+="UNION";
				SELECT 	+="("+SUB_QUERY2+")) t ";
				SELECT 	+="GROUP BY t.title ORDER BY t.title ASC";
				
			List<CounselingStatistics> listPage = new ArrayList<>();
			Integer totalReverstation = 0;
			Integer totalCounseling = 0;
			
			System.out.println(SELECT);
			@SuppressWarnings("unused")
			Query q = em.createNativeQuery(SELECT);
			List<Object[]> listObject = q.getResultList();
			
			Integer index = 0;
			Calendar cal = Calendar.getInstance();

			for (int i = 1; i <= 7; i++) {
				CounselingStatistics c = new CounselingStatistics();
				cal.set(Calendar.DAY_OF_WEEK, i);
				c.setTitle(new SimpleDateFormat("EEEE", Locale.KOREAN).format(cal.getTime()).substring(0, 1));
				c.setTotalCounseling(0);
				c.setTotalReservation(0);
				
				for (int j = index; j < listObject.size(); j++) {
					
					Object[] ob = listObject.get(j);
					Integer dayOfWeek = DataUtils.parseInt(ob[0]);
					if (i == dayOfWeek) {
						
						c.setTotalReservation(Integer.valueOf(ob[1].toString()));
						c.setTotalCounseling(Integer.valueOf(ob[2].toString()));
						
						totalCounseling += c.getTotalCounseling();
						totalReverstation += c.getTotalReservation(); 
						
						
						index++;
					} else {
						break;
					}
				}
				
				listPage.add(c);
			}
			List<Object> listOther = new ArrayList<>();
			listOther.add(totalReverstation);
			listOther.add(totalCounseling);

			return new PageCustom<CounselingStatistics>(listPage, Long.valueOf(listPage.size()), 1, Integer.MAX_VALUE, listOther);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	@Override
	public PageCustom<CounselingStatistics> filterStatisticsByHour(SearchStatistics s) {
		try {
			String WHERE = "";
			String SUB_QUERY1 = "";
			String SUB_QUERY2 = "";
			
			if(s.isAndroid() != s.isIos()){
				if(s.isAndroid()){
					WHERE += " AND type_os = 'android' ";
				}
				if(s.isIos()){
					WHERE += " AND type_os = 'ios' ";
				}
			}
			
			if(s.getCenterId() != null){
				WHERE += " AND cl.counselor_center_id = "+ s.getCenterId()+" ";
			}
			
			SUB_QUERY1 +="SELECT HOUR(c.create_date) as title, COUNT(c.status !=0) as totalReverstation, 0 as totalCounseling ";
			SUB_QUERY1 +="FROM counseling_session c INNER JOIN counselor cl ON cl.id = c.counselor_id ";
			SUB_QUERY1 +="WHERE DATE_FORMAT(c.create_date,'%Y/%m/%d') = '" + s.getStartDate() + "' ";
			SUB_QUERY1 +="AND c.counsel_type = 2 AND c.status !=0 ";
			SUB_QUERY1 +=WHERE;
			SUB_QUERY1 +="GROUP BY HOUR(c.create_date)";
			
			SUB_QUERY2 +="SELECT HOUR(c.exit_counselor_time) as title, 0 as totalReverstation, COUNT(c.status !=0) as totalCounseling ";
			SUB_QUERY2 +="FROM counseling_session c INNER JOIN counselor cl ON cl.id = c.counselor_id ";
			SUB_QUERY2 +="WHERE DATE_FORMAT(c.exit_counselor_time,'%Y/%m/%d') = '" + s.getStartDate() + "' ";
			SUB_QUERY2 +=WHERE;
			SUB_QUERY2 +="GROUP BY HOUR(c.exit_counselor_time)";
			
			String SELECT = "SELECT t.title, SUM(t.totalReverstation), SUM(t.totalCounseling) "
						+ "FROM( ";
				SELECT 	+="("+SUB_QUERY1+")";
				SELECT 	+="UNION";
				SELECT 	+="("+SUB_QUERY2+")) t ";
				SELECT 	+="GROUP BY t.title ORDER BY t.title ASC";
				
			List<CounselingStatistics> listPage = new ArrayList<>();
			Integer totalReverstation = 0;
			Integer totalCounseling = 0;
			
			@SuppressWarnings("unused")
			Query q = em.createNativeQuery(SELECT);
			List<Object[]> listObject = q.getResultList();
			
			Integer index = 0;
			
			for (int i = 0; i < 24; i++) {
				CounselingStatistics c = new CounselingStatistics();
				c.setTitle(String.format("%02d", i)+":00 ~ " + String.format("%02d", i+1)+":00");
				c.setTotalCounseling(0);
				c.setTotalReservation(0);
				
				for (int j = index; j < listObject.size(); j++) {
					
					Object[] ob = listObject.get(j);
					Integer hour = Integer.valueOf(ob[0].toString());
					if (hour == i) {
						c.setTotalReservation(Integer.valueOf(ob[1].toString()));
						c.setTotalCounseling(Integer.valueOf(ob[2].toString()));
						
						totalCounseling += c.getTotalCounseling();
						totalReverstation += c.getTotalReservation(); 
						
						index++;
					} else {
						break;
					}
				}
				listPage.add(c);
			}
			List<Object> listOther = new ArrayList<>();
			listOther.add(totalReverstation);
			listOther.add(totalCounseling);

			return new PageCustom<CounselingStatistics>(listPage, Long.valueOf(listPage.size()), 1, Integer.MAX_VALUE, listOther);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public PageCustom<LoginStatistics> filterStatisticsByMember(SearchStatistics s) {
		try {
			String ATTRIBUTE = "";
			if (s.getType().equals("weekly")) {
				ATTRIBUTE = "WEEK(c.exit_counselor_time)";
			} else if (s.getType().equals("monthly")) {
				ATTRIBUTE = "MONTH(c.exit_counselor_time)";
			} else {
				ATTRIBUTE = "DATE(c.exit_counselor_time)";
			}
			String SELECT = "SELECT " + ATTRIBUTE + ", "
					+ "COUNT(c.user_id) as totalReservation, "
					+ "COUNT(CASE WHEN u.gender = 1 THEN 1 ELSE NULL END) as male, "
					+ "COUNT(CASE WHEN u.gender = 0 THEN 1 ELSE NULL END) as female, "
					+ "COUNT(CASE WHEN (YEAR(now()) - YEAR(u.day_of_birth)) <= 20 THEN 1 ELSE NULL END) as age1,"
					+ "COUNT(CASE WHEN (YEAR(now()) - YEAR(u.day_of_birth)) >20 AND (YEAR(now()) - YEAR(u.day_of_birth)) <= 30 THEN 1 ELSE NULL END) as age2, "
					+ "COUNT(CASE WHEN (YEAR(now()) - YEAR(u.day_of_birth)) >30 AND (YEAR(now()) - YEAR(u.day_of_birth)) <= 40 THEN 1 ELSE NULL END) as age3,"
					+ "COUNT(CASE WHEN (YEAR(now()) - YEAR(u.day_of_birth)) >40 AND (YEAR(now()) - YEAR(u.day_of_birth)) <= 50 THEN 1 ELSE NULL END) as age4,"
					+ "COUNT(CASE WHEN (YEAR(now()) - YEAR(u.day_of_birth)) >= 50 THEN 1 ELSE NULL END) as age6,"
					+ "COUNT(CASE WHEN u.role_id = 1 THEN 1 ELSE NULL END) as normal, "
					+ "COUNT(CASE WHEN u.role_id = 5 THEN 1 ELSE NULL END) as business ";
			
			String FROM = "FROM counseling_session c "
						+ "INNER JOIN user u on c.user_id = u.id ";
			
			String WHERE = "WHERE 1=1 ";
			
			if (s.getType().equals("weekly")) {
				WHERE += " AND WEEK(c.exit_counselor_time) >= " + s.getFromWeek() + " AND WEEK(c.exit_counselor_time) <= " + s.getToWeek() + " ";
				WHERE += " AND YEAR(c.exit_counselor_time)=" + s.getYearWeekly();
			} else if (s.getType().equals("monthly")) {
				WHERE += " AND MONTH(c.exit_counselor_time) >= " + s.getFromMonth() + " AND MONTH(c.exit_counselor_time) <= " + s.getToMonth()+ " ";
				WHERE += " AND YEAR(c.exit_counselor_time)=" + s.getYearMonthly()+" ";
			} else {
				WHERE += " AND DATE_FORMAT(c.exit_counselor_time,'%Y/%m/%d') >= '" + s.getStartDate() + "' AND DATE_FORMAT(c.exit_counselor_time,'%Y/%m/%d') <= '" + s.getEndDate()+"' ";
			}
			
			if(s.isAndroid() != s.isIos()){
				if(s.isAndroid()){
					WHERE += " AND type_os = 'android' ";
				}
				if(s.isIos()){
					WHERE += " AND type_os = 'ios' ";
				}
			}
			
			String GROUP_BY = " GROUP BY " + ATTRIBUTE + " ";
			String ORDER_BY = " ORDER BY " + ATTRIBUTE + " DESC";
			List<LoginStatistics> listPage = new ArrayList<>();
			Integer totalReservartion= 0;
			Integer totalMale = 0;
			Integer totalFemale = 0;
			Integer totalAge10 = 0;
			Integer totalAge20 = 0;
			Integer totalAge30 = 0;
			Integer totalAge40 = 0;
			Integer totalAge50 = 0;
			Integer totalMemberNormal = 0;
			Integer totalMemberBusiness = 0;

			System.out.println(SELECT + FROM + WHERE + GROUP_BY +ORDER_BY);
			@SuppressWarnings("unused")
			Query q = em.createNativeQuery(SELECT + FROM + WHERE + GROUP_BY+ ORDER_BY);
			List<Object[]> listObject = q.getResultList();
			Integer index = 0;
			Calendar cal = Calendar.getInstance();
			
			if (s.getType().equals("weekly")) {
				//get data by week
				for (int i = s.getToWeek(); i >= s.getFromWeek(); i--) {

					Calendar startWeek = Calendar.getInstance();
					startWeek.set(Calendar.WEEK_OF_YEAR, i);
					startWeek.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY);
					Calendar endWeek = Calendar.getInstance();
					endWeek.set(Calendar.WEEK_OF_YEAR, i+1);
					endWeek.set(Calendar.DAY_OF_WEEK, Calendar.SUNDAY);
					LoginStatistics l = new LoginStatistics();
					l.setTitle("W" + i + " (" + DataUtils.parseStringFromDate(startWeek.getTime(), "yyyy-MM-dd") + " ~ "
							+ DataUtils.parseStringFromDate(endWeek.getTime(), "yyyy-MM-dd") + ")");
					l.setTotalReservation(0);
					l.setTotalMale(0);
					l.setTotalFemale(0);
					l.setTotalAge10(0);
					l.setTotalAge20(0);
					l.setTotalAge30(0);
					l.setTotalAge40(0);
					l.setTotalAge50(0);
					l.setTotalMemberNormal(0);
					l.setTotalMemberBusiness(0);
					
					for (int j = index; j < listObject.size(); j++) {
						Object[] ob = listObject.get(j);
						Integer week =Integer.valueOf(ob[0].toString());
						if (week == i) {
							l.setTotalReservation(Integer.valueOf(ob[1].toString()));
							l.setTotalMale(Integer.valueOf(ob[2].toString()));
							l.setTotalFemale(Integer.valueOf(ob[3].toString()));
							l.setTotalAge10(Integer.valueOf(ob[4].toString()));
							l.setTotalAge20(Integer.valueOf(ob[5].toString()));
							l.setTotalAge30(Integer.valueOf(ob[6].toString()));
							l.setTotalAge40(Integer.valueOf(ob[7].toString()));
							l.setTotalAge50(Integer.valueOf(ob[8].toString()));
							l.setTotalMemberNormal(Integer.valueOf(ob[9].toString()));
							l.setTotalMemberBusiness(Integer.valueOf(ob[10].toString()));
							
							totalReservartion +=	l.getTotalReservation();
							totalMale += l.getTotalMale();
							totalFemale += l.getTotalFemale();
							totalAge10 += l.getTotalAge10();
							totalAge20 += l.getTotalAge20();
							totalAge30 += l.getTotalAge30();
							totalAge40 += l.getTotalAge40();
							totalAge50 += l.getTotalAge50();
							totalMemberNormal += l.getTotalMemberNormal();
							totalMemberBusiness += l.getTotalMemberBusiness();
							
							index++;
						} else {
							
							break;
						}

					}
					listPage.add(l);
				}

			} else if (s.getType().equals("monthly")) {
				//get data by month
				for (int i = s.getToMonth(); i >= s.getFromMonth(); i--) {

					LoginStatistics l = new LoginStatistics();
					if (i < 10) {
						l.setTitle(s.getYearMonthly() + "-0" + i);
					} else {
						l.setTitle(s.getYearMonthly() + "-" + i);
					}
					l.setTotalReservation(0);
					l.setTotalMale(0);
					l.setTotalFemale(0);
					l.setTotalAge10(0);
					l.setTotalAge20(0);
					l.setTotalAge30(0);
					l.setTotalAge40(0);
					l.setTotalAge50(0);
					l.setTotalMemberNormal(0);
					l.setTotalMemberBusiness(0);

					for (int j = index; j < listObject.size(); j++) {
						Object[] ob = listObject.get(j);
						Integer month =Integer.valueOf(ob[0].toString());
						if (month == i) {
							l.setTotalReservation(Integer.valueOf(ob[1].toString()));
							l.setTotalMale(Integer.valueOf(ob[2].toString()));
							l.setTotalFemale(Integer.valueOf(ob[3].toString()));
							l.setTotalAge10(Integer.valueOf(ob[4].toString()));
							l.setTotalAge20(Integer.valueOf(ob[5].toString()));
							l.setTotalAge30(Integer.valueOf(ob[6].toString()));
							l.setTotalAge40(Integer.valueOf(ob[7].toString()));
							l.setTotalAge50(Integer.valueOf(ob[8].toString()));
							l.setTotalMemberNormal(Integer.valueOf(ob[9].toString()));
							l.setTotalMemberBusiness(Integer.valueOf(ob[10].toString()));
							
							totalReservartion +=	l.getTotalReservation();
							totalMale += l.getTotalMale();
							totalFemale += l.getTotalFemale();
							totalAge10 += l.getTotalAge10();
							totalAge20 += l.getTotalAge20();
							totalAge30 += l.getTotalAge30();
							totalAge40 += l.getTotalAge40();
							totalAge50 += l.getTotalAge50();
							totalMemberNormal += l.getTotalMemberNormal();
							totalMemberBusiness += l.getTotalMemberBusiness();
							
							index++;
						} else {
							
							break;
						}

					}
					listPage.add(l);
				}

			} else {
				//get data by date
				Calendar start = Calendar.getInstance();
				Calendar end = Calendar.getInstance();
				
				if(s.getStartDate() == null){
					start.setTime(new Date());
				}else{
					Date date = DataUtils.convertToDate(s.getStartDate(), "yyyy/MM/dd");
					start.setTime(date);
				}
				
				if(s.getStartDate() == null){
					start.setTime(new Date());
				}else{
					Date date = DataUtils.convertToDate(s.getEndDate(), "yyyy/MM/dd");
					end.setTime(date);
				}
				long dayDiff = DataUtils.daysBetween(start, end);
				
				for (long i = dayDiff; i >= 0; i--) {
					LoginStatistics l = new LoginStatistics();
					l.setTitle(DataUtils.parseStringFromDate(end.getTime(), "yyyy-MM-dd"));
					l.setTotalReservation(0);
					l.setTotalMale(0);
					l.setTotalFemale(0);
					l.setTotalAge10(0);
					l.setTotalAge20(0);
					l.setTotalAge30(0);
					l.setTotalAge40(0);
					l.setTotalAge50(0);
					l.setTotalMemberNormal(0);
					l.setTotalMemberBusiness(0);
					
					for (int j = index; j < listObject.size(); j++) {
						
						Object[] ob = listObject.get(j);
						cal.setTime((Date) ob[0]);
						if (DataUtils.daysBetween(end, cal) == 0) {
							l.setTotalReservation(Integer.valueOf(ob[1].toString()));
							l.setTotalMale(Integer.valueOf(ob[2].toString()));
							l.setTotalFemale(Integer.valueOf(ob[3].toString()));
							l.setTotalAge10(Integer.valueOf(ob[4].toString()));
							l.setTotalAge20(Integer.valueOf(ob[5].toString()));
							l.setTotalAge30(Integer.valueOf(ob[6].toString()));
							l.setTotalAge40(Integer.valueOf(ob[7].toString()));
							l.setTotalAge50(Integer.valueOf(ob[8].toString()));
							l.setTotalMemberNormal(Integer.valueOf(ob[9].toString()));
							l.setTotalMemberBusiness(Integer.valueOf(ob[10].toString()));
							
							totalReservartion +=l.getTotalReservation();
							totalMale += l.getTotalMale();
							totalFemale += l.getTotalFemale();
							totalAge10 += l.getTotalAge10();
							totalAge20 += l.getTotalAge20();
							totalAge30 += l.getTotalAge30();
							totalAge40 += l.getTotalAge40();
							totalAge50 += l.getTotalAge50();
							totalMemberNormal += l.getTotalMemberNormal();
							totalMemberBusiness += l.getTotalMemberBusiness();
							
							
							index++;
						} else {
							break;
						}
					}
					listPage.add(l);
					end.add(Calendar.DATE, -1);
				}

			}

			List<Object> listOther = new ArrayList<>();
			listOther.add(totalReservartion);
			listOther.add(totalMale);
			listOther.add(totalFemale);
			listOther.add(totalAge10);
			listOther.add(totalAge20);
			listOther.add(totalAge30);
			listOther.add(totalAge40);
			listOther.add(totalAge50);
			listOther.add(totalMemberNormal);
			listOther.add(totalMemberBusiness);

			return new PageCustom<>(listPage, Long.valueOf(listPage.size()), 1, Integer.MAX_VALUE, listOther);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
		
	}

	@Override
	public Integer totalCounselingByCounselingCenterId(String date, Integer counselingId) {
		try {
			return counselingSessionJpaRepository.totalCounselingByCounselingCenterId(date, counselingId);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public Integer totalCounseledsByCounselingCenterId(String date, Integer counselingId) {
		try {
			return counselingSessionJpaRepository.totalCounseledsByCounselingCenterId(date, counselingId);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public PageCustom<CounselorSummary> listCounselorSummary(Integer counselingCenterId, String keyword,
			String startSearch, String endSearch, Integer type_payment_coin, Integer type_payment_voucher,
			String typeSearch, String typeOrder, Integer page, Integer size) {
		try {
			String sql_select 	= " SELECT cl.id, c.thumbnail_url, counselorInfo.fullname AS counselorName, memberInfo.fullname AS memberName , cl.entry_counselor_time, "
					+ " cl.entry_user_time, cl.exit_counselor_time, cl.exit_user_time, p.type_coin, cl.point ";
			String sql_count 	= " SELECT COUNT(*) ";
			String sql_from 	= " FROM counseling_session cl INNER JOIN counselor c ON cl.counselor_id = c.id INNER JOIN user counselorInfo ON c.id = counselorInfo.id INNER JOIN user memberInfo ON cl.user_id = memberInfo.id INNER JOIN payment_history p ON cl.payment_id = p.id ";
			String sql_where 	= " WHERE c.counselor_center_id = :counselingCenterId and counselorInfo.role_id = 3 and p.type_payment = 2 ";
			
			String sql_where_sub_type_payment = "";
			String sql_where_sub = "";
			if (type_payment_coin == 1) {
				if (sql_where_sub_type_payment.equals("")) {
					sql_where_sub_type_payment = sql_where_sub_type_payment + " (p.type_coin = 1) ";
				} else {
					sql_where_sub_type_payment = sql_where_sub_type_payment + " or (p.type_coin = 1) ";
				}
			}
			if (type_payment_voucher == 1) {
				if (sql_where_sub_type_payment.equals("")) {
					sql_where_sub_type_payment = sql_where_sub_type_payment + " p.type_coin = 3 "; 
				} else {
					sql_where_sub_type_payment = sql_where_sub_type_payment + " or (p.type_coin = 3) ";
				}
			}
			
			if (sql_where_sub_type_payment.isEmpty()) {
				sql_where_sub_type_payment = " p.type_coin IN(1,3) ";
			}
			
			if(startSearch != null) {
				sql_where_sub = sql_where_sub + " and DATE(cl.start_time) >= :startSearch ";
			} 
			if (endSearch != null) {
				sql_where_sub = sql_where_sub + " and DATE(cl.start_time) <= :endSearch ";
			}
			
			if (keyword != null) {
				if(typeSearch.equals("counselorName")) {
					sql_where_sub = sql_where_sub + " and counselorInfo.fullname LIKE :key ";
				} else {
					sql_where_sub = sql_where_sub + " and memberInfo.fullname LIKE :key ";
				}
			}
			
			if (typeOrder.equals("ord_endTime")) {
				sql_where_sub = sql_where_sub + " ORDER BY cl.end_time DESC ";
			} else if (typeOrder.equals("ord_point")) {
				sql_where_sub = sql_where_sub + " ORDER BY cl.point DESC ";
			} else if (typeOrder.equals("ord_counselorName")) {
				sql_where_sub = sql_where_sub + " ORDER BY counselorInfo.fullname ASC ";
			}else {
				sql_where_sub = sql_where_sub + " ORDER BY memberInfo.fullname ASC  ";
			}
			Query q = em.createNativeQuery(sql_select + sql_from + sql_where + " and ("+ sql_where_sub_type_payment+")" +  sql_where_sub + " limit " + (page-1)*size  + ", " + size);
			q.setParameter("counselingCenterId", counselingCenterId);
			if (keyword != null) {
				q.setParameter("key", "%"+keyword+"%");
			}
			if(startSearch != null) {
				q.setParameter("startSearch", startSearch);
			}
			if (endSearch != null) {
				q.setParameter("endSearch", endSearch);
			}
			
			@SuppressWarnings("unchecked")
			List<Object[] > rss = q.getResultList();
			List<CounselorSummary> list = new ArrayList<>();
			for (Object[] i : rss) {
				CounselorSummary c = new CounselorSummary();
				c.setId((Integer) i[0]);
				c.setThumb((String) i[1]);
				c.setNameCounselor((String) i[2]);
				c.setNameMember((String) i[3]);
				Short typePayment = (Short) i[8];
				if (typePayment == 1) {
					c.setTypePayment("헬로코인 사용");
				} else {
					c.setTypePayment("상담권 사용");
				}
				c.setPoints((Float) i[9]);
				
				Date entry_counselor_time = (Date) i[4];
				Date entry_user_time = (Date) i[5];
				Date exit_counselor_time = (Date) i[6];
				Date exit_user_time = (Date) i[7];
				
				if (entry_counselor_time != null && entry_user_time != null && exit_counselor_time != null && exit_user_time != null) {
					if (entry_counselor_time.after(entry_user_time)) {
						c.setStartTimeCounseling(entry_counselor_time);
					} else {
						c.setStartTimeCounseling(entry_user_time);
					}
					
					if (exit_counselor_time.after(exit_user_time)) {
						c.setEndTimeCounseling(exit_user_time);
					} else {
						c.setEndTimeCounseling(exit_counselor_time);
					}
					long timeCounseling = c.getEndTimeCounseling().getTime() - c.getStartTimeCounseling().getTime();
				    String hms = String.format("%02d분%02d초", TimeUnit.MILLISECONDS.toHours(timeCounseling),
				            TimeUnit.MILLISECONDS.toMinutes(timeCounseling) - TimeUnit.HOURS.toMinutes(TimeUnit.MILLISECONDS.toHours(timeCounseling)));
					c.setTimeCounseling(hms);
				} else {
					if (entry_counselor_time != null && entry_user_time != null) {
						if (entry_counselor_time.after(entry_user_time)) {
							c.setStartTimeCounseling(entry_counselor_time);
						} else {
							c.setStartTimeCounseling(entry_user_time);
						}
					} else if (entry_counselor_time != null) {
						c.setStartTimeCounseling(entry_counselor_time);
					} else {
						c.setStartTimeCounseling(entry_user_time);
					}
					
					
					if (exit_counselor_time != null && exit_user_time != null) {
						if (exit_counselor_time.after(exit_user_time)) {
							c.setEndTimeCounseling(exit_user_time);
						} else {
							c.setEndTimeCounseling(exit_counselor_time);
						}
					} else if (exit_counselor_time != null) {
						c.setEndTimeCounseling(exit_counselor_time);
					} else {
						c.setEndTimeCounseling(exit_counselor_time);
					}
					c.setTimeCounseling("00분00초");
				}
				
				list.add(c);
			}
					
			Query t = em.createNativeQuery(sql_count + sql_from + sql_where + " and ("+ sql_where_sub_type_payment+")" + sql_where_sub);
			t.setParameter("counselingCenterId", counselingCenterId);
			if (keyword != null) {
				t.setParameter("key", "%"+keyword+"%");
			}
			if(startSearch != null) {
				t.setParameter("startSearch",startSearch);
			}
			if (endSearch != null) {
				t.setParameter("endSearch",endSearch);
			}
			Long total = ((BigInteger) t.getSingleResult()).longValue();
			PageCustom<CounselorSummary> pageCustom = new PageCustom<>(list, total, page, size);
			
			return pageCustom;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	@Override
	public CounselingSessionEntity findOneByPreRoomId(String roomId) {
		return counselingSessionJpaRepository.findByPreRoomId(roomId);
	}

	@Override
	public List<CounselingSessionEntity> listCounselingSessionByFromAndToDate(Integer totalMinuteFromDate, Integer totalMinuteToDate, Date now, Integer counselor) {
		SimpleDateFormat s = new SimpleDateFormat("yyyy-MM-dd");
		return counselingSessionJpaRepository.listCounselingSessionByFromAndToDate(totalMinuteFromDate, totalMinuteToDate, s.format(now), counselor);
	}
	
	@Override
	public Integer getNewestCounselingSessionNotStatisficEvolution(Integer userId, Integer counselorId) {
		try {
			String query ="SELECT cs.id FROM counseling_session cs "
					+ "LEFT JOIN user_questionaire uq ON (cs.id = uq.counseling_session_id AND uq.type = 1) "
					+ "WHERE cs.status in (2,3) AND uq.id is null AND cs.user_id = "+userId+" "
					+ "AND cs.counselor_id = "+ counselorId+" "
					+ "ORDER BY cs.create_date DESC limit 1";
			Query q = em.createNativeQuery(query);
			
			if(q.getSingleResult() == null){
				return null;
			}else{
				return Integer.valueOf(String.valueOf(q.getSingleResult()));
			}
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	@Override
	public Integer countInProgressCounseling(Integer counselorId) {
		return counselingSessionJpaRepository.countInProgressCounseling(counselorId, new Date());
	}

	@Override
	public Date getLatestCounselingEndTime(Integer counselorId) {
		return counselingSessionJpaRepository.getLatestCounselingEndTime(counselorId);
	}

	@Override
	public Date getClosestCounselingStartTime(Integer counselorId) {
		return counselingSessionJpaRepository.getClosestCounselingStartTime(counselorId);
	}
}
