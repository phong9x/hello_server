/*
 * Created on 26 May 2017 ( Time 13:08:52 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.business.service.mapping;

import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import org.trams.hello.bean.Notification;
import org.trams.hello.bean.jpa.NotificationEntity;
import org.trams.hello.bean.jpa.UserEntity;

/**
 * Mapping between entity beans and display beans.
 */
@Component
public class NotificationServiceMapper extends AbstractServiceMapper {

	/**
	 * ModelMapper : bean to bean mapping library.
	 */
	private ModelMapper modelMapper;
	
	/**
	 * Constructor.
	 */
	public NotificationServiceMapper() {
		modelMapper = new ModelMapper();
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}

	/**
	 * Mapping from 'NotificationEntity' to 'Notification'
	 * @param notificationEntity
	 */
	public Notification mapNotificationEntityToNotification(NotificationEntity notificationEntity) {
		if(notificationEntity == null) {
			return null;
		}

		//--- Generic mapping 
		Notification notification = map(notificationEntity, Notification.class);

		//--- Link mapping ( link to User )
		if(notificationEntity.getUser() != null) {
			notification.setUserId(notificationEntity.getUser().getId());
		}
		return notification;
	}
	
	/**
	 * Mapping from 'Notification' to 'NotificationEntity'
	 * @param notification
	 * @param notificationEntity
	 */
	public void mapNotificationToNotificationEntity(Notification notification, NotificationEntity notificationEntity) {
		if(notification == null) {
			return;
		}

		//--- Generic mapping 
		map(notification, notificationEntity);

		//--- Link mapping ( link : notification )
		if( hasLinkToUser(notification) ) {
			UserEntity user1 = new UserEntity();
			user1.setId( notification.getUserId() );
			notificationEntity.setUser( user1 );
		} else {
			notificationEntity.setUser( null );
		}

	}
	
	/**
	 * Verify that User id is valid.
	 * @param User User
	 * @return boolean
	 */
	private boolean hasLinkToUser(Notification notification) {
		if(notification.getUserId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected ModelMapper getModelMapper() {
		return modelMapper;
	}

	protected void setModelMapper(ModelMapper modelMapper) {
		this.modelMapper = modelMapper;
	}

}