/*
 * Created on 15 Mar 2017 ( Time 17:07:52 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.business.service.mapping;

import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import org.trams.hello.bean.PasswordHistory;
import org.trams.hello.bean.jpa.PasswordHistoryEntity;
import org.trams.hello.bean.jpa.UserEntity;

/**
 * Mapping between entity beans and display beans.
 */
@Component
public class PasswordHistoryServiceMapper extends AbstractServiceMapper {

	/**
	 * ModelMapper : bean to bean mapping library.
	 */
	private ModelMapper modelMapper;
	
	/**
	 * Constructor.
	 */
	public PasswordHistoryServiceMapper() {
		modelMapper = new ModelMapper();
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}

	/**
	 * Mapping from 'PasswordHistoryEntity' to 'PasswordHistory'
	 * @param passwordHistoryEntity
	 */
	public PasswordHistory mapPasswordHistoryEntityToPasswordHistory(PasswordHistoryEntity passwordHistoryEntity) {
		if(passwordHistoryEntity == null) {
			return null;
		}

		//--- Generic mapping 
		PasswordHistory passwordHistory = map(passwordHistoryEntity, PasswordHistory.class);

		//--- Link mapping ( link to User )
		if(passwordHistoryEntity.getUser() != null) {
			passwordHistory.setUserId(passwordHistoryEntity.getUser().getId());
		}
		return passwordHistory;
	}
	
	/**
	 * Mapping from 'PasswordHistory' to 'PasswordHistoryEntity'
	 * @param passwordHistory
	 * @param passwordHistoryEntity
	 */
	public void mapPasswordHistoryToPasswordHistoryEntity(PasswordHistory passwordHistory, PasswordHistoryEntity passwordHistoryEntity) {
		if(passwordHistory == null) {
			return;
		}

		//--- Generic mapping 
		map(passwordHistory, passwordHistoryEntity);

		//--- Link mapping ( link : passwordHistory )
		if( hasLinkToUser(passwordHistory) ) {
			UserEntity user1 = new UserEntity();
			user1.setId( passwordHistory.getUserId() );
			passwordHistoryEntity.setUser( user1 );
		} else {
			passwordHistoryEntity.setUser( null );
		}

	}
	
	/**
	 * Verify that User id is valid.
	 * @param User User
	 * @return boolean
	 */
	private boolean hasLinkToUser(PasswordHistory passwordHistory) {
		if(passwordHistory.getUserId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected ModelMapper getModelMapper() {
		return modelMapper;
	}

	protected void setModelMapper(ModelMapper modelMapper) {
		this.modelMapper = modelMapper;
	}

}