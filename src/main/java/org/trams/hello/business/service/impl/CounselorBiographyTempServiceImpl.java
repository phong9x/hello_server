/*
 * Created on 20 thg 1 2017 ( Time 11:28:18 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import org.trams.hello.bean.CounselorBiographyTemp;
import org.trams.hello.bean.jpa.CounselorBiographyTempEntity;
import org.trams.hello.business.service.CounselorBiographyTempService;
import org.trams.hello.business.service.mapping.CounselorBiographyTempServiceMapper;
import org.trams.hello.data.repository.jpa.CounselorBiographyTempJpaRepository;
/**
 * Implementation of CounselorBiographyTempService
 */
@Component
@Transactional
public class CounselorBiographyTempServiceImpl implements CounselorBiographyTempService {

	@Resource
	private CounselorBiographyTempJpaRepository counselorBiographyTempJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private CounselorBiographyTempServiceMapper counselorBiographyTempServiceMapper;
	
	@Override
	public CounselorBiographyTemp findById(Integer id) {
		CounselorBiographyTempEntity counselorBiographyTempEntity = counselorBiographyTempJpaRepository.findOne(id);
		return counselorBiographyTempServiceMapper.mapCounselorBiographyTempEntityToCounselorBiographyTemp(counselorBiographyTempEntity);
	}

	@Override
	public Page<CounselorBiographyTempEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return counselorBiographyTempJpaRepository.findAll(request);
	}

	@Override
	public List<CounselorBiographyTemp> findAll() {
		Iterable<CounselorBiographyTempEntity> entities = counselorBiographyTempJpaRepository.findAll();
		List<CounselorBiographyTemp> beans = new ArrayList<CounselorBiographyTemp>();
		for(CounselorBiographyTempEntity counselorBiographyTempEntity : entities) {
			beans.add(counselorBiographyTempServiceMapper.mapCounselorBiographyTempEntityToCounselorBiographyTemp(counselorBiographyTempEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = counselorBiographyTempJpaRepository.count();
		return count;
	}

	@Override
	public CounselorBiographyTemp save(CounselorBiographyTemp counselorBiographyTemp) {
		return update(counselorBiographyTemp) ;
	}

	@Override
	public CounselorBiographyTemp create(CounselorBiographyTemp counselorBiographyTemp) {
/*
		CounselorBiographyTempEntity counselorBiographyTempEntity = counselorBiographyTempJpaRepository.findOne(counselorBiographyTemp.getId());
		if( counselorBiographyTempEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		counselorBiographyTempEntity = new CounselorBiographyTempEntity();
		counselorBiographyTempServiceMapper.mapCounselorBiographyTempToCounselorBiographyTempEntity(counselorBiographyTemp, counselorBiographyTempEntity);
		CounselorBiographyTempEntity counselorBiographyTempEntitySaved = counselorBiographyTempJpaRepository.save(counselorBiographyTempEntity);
		return counselorBiographyTempServiceMapper.mapCounselorBiographyTempEntityToCounselorBiographyTemp(counselorBiographyTempEntitySaved);
*/
		CounselorBiographyTempEntity counselorBiographyTempEntity = new CounselorBiographyTempEntity();
		counselorBiographyTempServiceMapper.mapCounselorBiographyTempToCounselorBiographyTempEntity(counselorBiographyTemp, counselorBiographyTempEntity);
		CounselorBiographyTempEntity counselorBiographyTempEntitySaved = counselorBiographyTempJpaRepository.save(counselorBiographyTempEntity);
		return counselorBiographyTempServiceMapper.mapCounselorBiographyTempEntityToCounselorBiographyTemp(counselorBiographyTempEntitySaved);
	}

	@Override
	public CounselorBiographyTemp update(CounselorBiographyTemp counselorBiographyTemp) {
		CounselorBiographyTempEntity counselorBiographyTempEntity = counselorBiographyTempJpaRepository.findOne(counselorBiographyTemp.getId());
		counselorBiographyTempServiceMapper.mapCounselorBiographyTempToCounselorBiographyTempEntity(counselorBiographyTemp, counselorBiographyTempEntity);
		CounselorBiographyTempEntity counselorBiographyTempEntitySaved = counselorBiographyTempJpaRepository.save(counselorBiographyTempEntity);
		return counselorBiographyTempServiceMapper.mapCounselorBiographyTempEntityToCounselorBiographyTemp(counselorBiographyTempEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		counselorBiographyTempJpaRepository.delete(id);
	}

	public CounselorBiographyTempJpaRepository getCounselorBiographyTempJpaRepository() {
		return counselorBiographyTempJpaRepository;
	}

	public void setCounselorBiographyTempJpaRepository(CounselorBiographyTempJpaRepository counselorBiographyTempJpaRepository) {
		this.counselorBiographyTempJpaRepository = counselorBiographyTempJpaRepository;
	}

	public CounselorBiographyTempServiceMapper getCounselorBiographyTempServiceMapper() {
		return counselorBiographyTempServiceMapper;
	}

	public void setCounselorBiographyTempServiceMapper(CounselorBiographyTempServiceMapper counselorBiographyTempServiceMapper) {
		this.counselorBiographyTempServiceMapper = counselorBiographyTempServiceMapper;
	}

	@Override
	public Page<CounselorBiographyTempEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return counselorBiographyTempJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public Page<CounselorBiographyTempEntity> listPagingByUserId(Integer counselorId, Integer page,Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return counselorBiographyTempJpaRepository.listPagingByUserId(counselorId, pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public List<CounselorBiographyTempEntity> listByUserId(Integer counselorId) {
		try {
			return counselorBiographyTempJpaRepository.listByUserId(counselorId);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public void deleteByUserId(Integer counselorTempId) {
		try {
			counselorBiographyTempJpaRepository.deleteByUserId(counselorTempId);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	


}
