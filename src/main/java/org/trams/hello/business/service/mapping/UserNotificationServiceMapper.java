/*
 * Created on 26 May 2017 ( Time 13:08:52 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.business.service.mapping;

import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import org.trams.hello.bean.UserNotification;
import org.trams.hello.bean.jpa.NotificationEntity;
import org.trams.hello.bean.jpa.UserEntity;
import org.trams.hello.bean.jpa.UserNotificationEntity;

/**
 * Mapping between entity beans and display beans.
 */
@Component
public class UserNotificationServiceMapper extends AbstractServiceMapper {

	/**
	 * ModelMapper : bean to bean mapping library.
	 */
	private ModelMapper modelMapper;
	
	/**
	 * Constructor.
	 */
	public UserNotificationServiceMapper() {
		modelMapper = new ModelMapper();
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}

	/**
	 * Mapping from 'UserNotificationEntity' to 'UserNotification'
	 * @param userNotificationEntity
	 */
	public UserNotification mapUserNotificationEntityToUserNotification(UserNotificationEntity userNotificationEntity) {
		if(userNotificationEntity == null) {
			return null;
		}

		//--- Generic mapping 
		UserNotification userNotification = map(userNotificationEntity, UserNotification.class);

		//--- Link mapping ( link to User )
		if(userNotificationEntity.getUser() != null) {
			userNotification.setUserId(userNotificationEntity.getUser().getId());
		}
		//--- Link mapping ( link to Notification )
		if(userNotificationEntity.getNotification() != null) {
			userNotification.setNotificationId(userNotificationEntity.getNotification().getId());
		}
		return userNotification;
	}
	
	/**
	 * Mapping from 'UserNotification' to 'UserNotificationEntity'
	 * @param userNotification
	 * @param userNotificationEntity
	 */
	public void mapUserNotificationToUserNotificationEntity(UserNotification userNotification, UserNotificationEntity userNotificationEntity) {
		if(userNotification == null) {
			return;
		}

		//--- Generic mapping 
		map(userNotification, userNotificationEntity);

		//--- Link mapping ( link : userNotification )
		if( hasLinkToUser(userNotification) ) {
			UserEntity user1 = new UserEntity();
			user1.setId( userNotification.getUserId() );
			userNotificationEntity.setUser( user1 );
		} else {
			userNotificationEntity.setUser( null );
		}

		//--- Link mapping ( link : userNotification )
		if( hasLinkToNotification(userNotification) ) {
			NotificationEntity notification2 = new NotificationEntity();
			notification2.setId( userNotification.getNotificationId() );
			userNotificationEntity.setNotification( notification2 );
		} else {
			userNotificationEntity.setNotification( null );
		}

	}
	
	/**
	 * Verify that User id is valid.
	 * @param User User
	 * @return boolean
	 */
	private boolean hasLinkToUser(UserNotification userNotification) {
		if(userNotification.getUserId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that Notification id is valid.
	 * @param Notification Notification
	 * @return boolean
	 */
	private boolean hasLinkToNotification(UserNotification userNotification) {
		if(userNotification.getNotificationId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected ModelMapper getModelMapper() {
		return modelMapper;
	}

	protected void setModelMapper(ModelMapper modelMapper) {
		this.modelMapper = modelMapper;
	}

}