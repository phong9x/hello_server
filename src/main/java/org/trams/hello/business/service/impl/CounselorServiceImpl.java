/*
 * Created on 23 thg 11 2016 ( Time 13:38:12 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.business.service.impl;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.persistence.EntityManager;
import javax.persistence.Query;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.apache.commons.lang.ArrayUtils;
import org.apache.commons.lang.time.DateFormatUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import org.trams.hello.bean.Counselor;
import org.trams.hello.bean.CounselorRanking;
import org.trams.hello.bean.PageCustom;
import org.trams.hello.bean.ProfitCenterReport;
import org.trams.hello.bean.jpa.CounselingCenterEntity;
import org.trams.hello.bean.jpa.CounselingSessionEntity;
import org.trams.hello.bean.jpa.CounselorEntity;
import org.trams.hello.bean.jpa.CounselorScheduleSettingEntity;
import org.trams.hello.bean.jpa.PaymentHistoryEntity;
import org.trams.hello.bean.jpa.PaymentProfitEntity;
import org.trams.hello.bean.web.counselingCenter.CounselorInfo;
import org.trams.hello.bean.web.counselor.SuggestionCounselor;
import org.trams.hello.business.service.CounselingSessionService;
import org.trams.hello.business.service.CounselorScheduleSettingService;
import org.trams.hello.business.service.CounselorService;
import org.trams.hello.business.service.mapping.CounselorServiceMapper;
import org.trams.hello.data.repository.jpa.CounselingSessionJpaRepository;
import org.trams.hello.data.repository.jpa.CounselorFieldJpaRepository;
import org.trams.hello.data.repository.jpa.CounselorJpaRepository;
import org.trams.hello.data.repository.jpa.PaymentProfitJpaRepository;
import org.trams.hello.web.bean.search.SearchProfitCenter;
import org.trams.hello.web.bean.search.SearchStatistics;
import org.trams.hello.web.common.ApplicationDefine;
import org.trams.hello.web.common.utils.DataUtils;

/**
 * Implementation of CounselorService
 */
@Component
@Transactional
public class CounselorServiceImpl implements CounselorService {

	private static final Integer PAGE_SIZE = 15;

	@Resource
	private CounselorJpaRepository counselorJpaRepository;
	@Resource
	private CounselorFieldJpaRepository counselorFieldJpaRepository;
	@Resource
	private CounselorServiceMapper counselorServiceMapper;
	@Resource
	private CounselingSessionJpaRepository counselingSessionJpaRepository;
	@Resource
	private PaymentProfitJpaRepository paymentProfitJpaRepository;
	
	@Resource
	private CounselorScheduleSettingService counselorScheduleSettingService;
	@Resource
	private CounselingSessionService counselingSessionService;
	
	@Autowired
	private EntityManager em;
	@Override
	public Counselor findById(Integer id) {
		CounselorEntity counselorEntity = counselorJpaRepository.findOne(id);
		return counselorServiceMapper.mapCounselorEntityToCounselor(counselorEntity);
	}

	@Override
	public CounselorEntity findByOne(Integer id) {
		return counselorJpaRepository.findOne(id);
	}

	@Override
	public Page<CounselorEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE, new Sort(new Order(Direction.DESC, "id")));
		return counselorJpaRepository.findAll(request);
	}

	@Override
	public List<Counselor> findAll() {
		Iterable<CounselorEntity> entities = counselorJpaRepository.findAll();
		List<Counselor> beans = new ArrayList<Counselor>();
		for (CounselorEntity counselorEntity : entities) {
			beans.add(counselorServiceMapper.mapCounselorEntityToCounselor(counselorEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * 
	 * @return Long
	 */
	public Long countTotal() {
		Long count = counselorJpaRepository.count();
		return count;
	}

	@Override
	public Counselor save(Counselor counselor) {
		return update(counselor);
	}

	@Override
	public Counselor create(Counselor counselor) {
		/*
		 * CounselorEntity counselorEntity =
		 * counselorJpaRepository.findOne(counselor.getId()); if(
		 * counselorEntity != null ) { throw new
		 * IllegalStateException("already.exists"); }
		 * 
		 * counselorEntity = new CounselorEntity();
		 * counselorServiceMapper.mapCounselorToCounselorEntity(counselor,
		 * counselorEntity); CounselorEntity counselorEntitySaved =
		 * counselorJpaRepository.save(counselorEntity); return
		 * counselorServiceMapper.mapCounselorEntityToCounselor(
		 * counselorEntitySaved);
		 */
		CounselorEntity counselorEntity = new CounselorEntity();
		counselorServiceMapper.mapCounselorToCounselorEntity(counselor, counselorEntity);
		CounselorEntity counselorEntitySaved = counselorJpaRepository.save(counselorEntity);
		return counselorServiceMapper.mapCounselorEntityToCounselor(counselorEntitySaved);
	}

	@Override
	public Counselor update(Counselor counselor) {
		CounselorEntity counselorEntity = counselorJpaRepository.findOne(counselor.getId());
		counselorServiceMapper.mapCounselorToCounselorEntity(counselor, counselorEntity);
		CounselorEntity counselorEntitySaved = counselorJpaRepository.save(counselorEntity);
		return counselorServiceMapper.mapCounselorEntityToCounselor(counselorEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		counselorJpaRepository.delete(id);
	}

	public CounselorJpaRepository getCounselorJpaRepository() {
		return counselorJpaRepository;
	}

	public void setCounselorJpaRepository(CounselorJpaRepository counselorJpaRepository) {
		this.counselorJpaRepository = counselorJpaRepository;
	}

	public CounselorServiceMapper getCounselorServiceMapper() {
		return counselorServiceMapper;
	}

	public void setCounselorServiceMapper(CounselorServiceMapper counselorServiceMapper) {
		this.counselorServiceMapper = counselorServiceMapper;
	}

	@Override
	public Page<CounselorEntity> listPagingByStatus(Short status,Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page - 1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return counselorJpaRepository.listPagingByStatus(status, pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public void update_isDelete(Integer id) {
		try {
			counselorJpaRepository.update_isDelete(id);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@Override
	public Page<CounselorEntity> listPagingBy_NickNameOrIntroduceAndStatus(String key, Short[] status, Short actived, Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page - 1, size, new Sort(new Order(Direction.DESC, "level")));
			return counselorJpaRepository.listPagingBy_NickNameOrIntroduceAndStatus("%" + key + "%", status, actived, pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public Page<CounselorEntity> listPagingBy_CounlorFieldAndStatus(Integer[] counselor_field, Short actived, Short[] status, Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page - 1, size, new Sort(new Order(Direction.DESC, "level")));
			return counselorJpaRepository.listPagingBy_CounlorFieldAndStatus(counselor_field, actived, status, pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	@Override
	public Page<CounselorEntity> listSuggetPagingBy_CounlorFieldAndStatus(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page - 1, size, new Sort(new Order(Direction.DESC, "level")));
			return counselorJpaRepository.listSuggetPagingBy_CounlorFieldAndStatus(pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public Page<CounselorEntity> listPagingBy_CounlorFieldAndNickNameAndIntroduceAndStatus(Integer[] counselor_field, String key, Short actived, Short[] status,
			Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page - 1, size, new Sort(new Order(Direction.DESC, "level")));
			return counselorJpaRepository.listPagingBy_CounlorFieldAndNickNameAndIntroduceAndStatus(counselor_field,
					"%" + key + "%", actived, status, pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public List<Integer> totalCounselorHome(Integer hour, Short[] status) {
		try {
			List<Object[]> list_result = counselorJpaRepository.toalCounselorHome("%"+hour+";%", "%;"+hour+"%", status);
			List<Integer> list = new ArrayList<>();
			Object[] ob = list_result.get(0);
			for (Object i : ob) {
				list.add(DataUtils.parseInt(i));
			}
			return list;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public Page<CounselorEntity> filter(Integer[] role, Integer counselorCenterId, Short[] actived, Integer[] age,
			Short[] statusActive, Short[] aimmedRecommend, String type, String key, Integer[] counselorFieldId,
			String orderBy, Integer page, Integer size) {
		Specification<CounselorEntity> spec = new Specification<CounselorEntity>() {
			@Override
			public Predicate toPredicate(Root<CounselorEntity> root, CriteriaQuery<?> query, CriteriaBuilder cb) {
				List<Predicate> predicates = new ArrayList<>();

				if (role.length > 0 && role.length < 2) {
					predicates.add(cb.isTrue(root.get("user").get("userRole").get("id").in(role)));
				}
				
				if(counselorCenterId != null){
					List<Predicate> list_role = new ArrayList<>();
					if(ArrayUtils.contains(role, ApplicationDefine.USER_ROLE_MEMBER_BUSSINESS)){
						Predicate predicate1 = cb.equal(root.get("counselorCenter").get("id"), counselorCenterId);
						Predicate predicate2 = cb.equal(root.get("user").get("userRole").get("id"), ApplicationDefine.USER_ROLE_COUNSELOR_IN_CENTER);
						Predicate andPre = cb.and(predicate1, predicate2);
						list_role.add(andPre);
					}
					if(ArrayUtils.contains(role, ApplicationDefine.USER_ROLE_COUNSELOR_FREELANCE)){
						Predicate predicate = cb.equal(root.get("user").get("userRole").get("id"), ApplicationDefine.USER_ROLE_COUNSELOR_FREELANCE);
						list_role.add(predicate);
					}
					Predicate predicateRole = cb.or(list_role.toArray(new Predicate[] {}));
					predicates.add(predicateRole);
				}else if(role.length > 0){
					predicates.add(cb.isTrue(root.get("user").get("userRole").get("id").in(role)));
				}
				
				if (actived.length > 0) {
					predicates.add(cb.isTrue(root.get("actived").in(actived)));
				}
				
				if (aimmedRecommend.length > 0 ) {
					predicates.add(cb.isTrue(root.get("aimmedRecommend").in(aimmedRecommend)));
				}
				
				if (age.length > 0) {
					Predicate predicateAge = null;
					List<Predicate> list_predicate = new ArrayList<>();
					Calendar c =Calendar.getInstance();
					for (Integer i : age) {
						Integer startYear = c.get(Calendar.YEAR);
						Integer endYear = c.get(Calendar.YEAR);
						if(i ==1){
							startYear =startYear - 20;
							Predicate predicate = cb.greaterThanOrEqualTo(cb.function("year", Integer.class, root.get("user").get("dayOfBirth")),startYear );
							list_predicate.add(predicate);
						}else if (i == 5){
							endYear = endYear - 50;
							Predicate predicate = cb.lessThanOrEqualTo(cb.function("year", Integer.class, root.get("user").get("dayOfBirth")),endYear );
							list_predicate.add(predicate);
						}else{
							i++;
							startYear = startYear -(i*10);
							endYear = endYear -(i*10 - 10);
							Predicate predicate1 = cb.greaterThanOrEqualTo(cb.function("year", Integer.class, root.get("user").get("dayOfBirth")),startYear );
							Predicate predicate2 = cb.lessThan(cb.function("year", Integer.class, root.get("user").get("dayOfBirth")),endYear );
							Predicate andPre = cb.and(predicate1, predicate2);
							list_predicate.add(andPre);
						}
					}
					predicateAge = cb.or(list_predicate.toArray(new Predicate[] {}));
					predicates.add(predicateAge);
				}

				if (statusActive.length > 0) {
					Predicate predicateStatus = null;
					List<Predicate> list_predicate = new ArrayList<>();
					if(ArrayUtils.contains(statusActive, (short)0)){
						Predicate predicate1 = cb.equal(root.get("user").get("statusActive"), ApplicationDefine.UserStatusActive.NORMAL.getCode());
						Predicate predicate2 = cb.equal(root.get("actived"), ApplicationDefine.Counselor_Actived.ON.getCode());
						Predicate predicate3 = cb.equal(root.get("status"), ApplicationDefine.Counselor_Status.NormalDisplay.getCode());
						Predicate andPre = cb.and((cb.and(predicate1, predicate2)),predicate3);
						list_predicate.add(andPre);
					}
					if(ArrayUtils.contains(statusActive, (short)1)){
						Predicate predicate1 =cb.equal(root.get("user").get("statusActive"), ApplicationDefine.UserStatusActive.BANNED.getCode());
						list_predicate.add(predicate1);
						
					}
					if(ArrayUtils.contains(statusActive, (short)2)){
						Predicate predicate1 = cb.equal(root.get("user").get("statusActive"), ApplicationDefine.UserStatusActive.NORMAL.getCode());
						Predicate predicate2 = cb.equal(root.get("status"), ApplicationDefine.Counselor_Status.NormalNotDisplay.getCode());
						Predicate predicate3 = cb.equal(root.get("actived"), ApplicationDefine.Counselor_Actived.OFF.getCode());
						Predicate predicate4 = cb.equal(root.get("status"), ApplicationDefine.Counselor_Status.NormalDisplay.getCode());
						Predicate orPre = cb.and(predicate1,cb.or(predicate2,cb.and(predicate4,predicate3)));
						list_predicate.add(orPre);
					}
					if(ArrayUtils.contains(statusActive, (short)3)){
						Predicate predicate1 = cb.equal(root.get("user").get("statusActive"), ApplicationDefine.UserStatusActive.WITHDRAWAL.getCode());
						list_predicate.add(predicate1);
						
					}
					predicateStatus = cb.or(list_predicate.toArray(new Predicate[] {}));
					predicates.add(predicateStatus);
				}else{
					Short[] statusActive = new Short[2];
					statusActive[0] = ApplicationDefine.Counselor_Status.NormalDisplay.getCode();
					statusActive[1] = ApplicationDefine.Counselor_Status.NormalNotDisplay.getCode();
					//statusActive[2] = ApplicationDefine.Counselor_Status.Reserve.getCode();
					//statusActive[3] = ApplicationDefine.Counselor_Status.WaitingRequestProfile.getCode();
					predicates.add(cb.isTrue(root.get("status").in(statusActive)));
				}

				if (counselorFieldId.length > 0 && counselorFieldId.length < 15) {
					Predicate predicate = null;
					Integer[] counselorFields = counselorFieldJpaRepository.getCounselorIdBy_CouselorFieldId(counselorFieldId);
					predicate = cb.isTrue(root.get("id").in(counselorFields));
					predicates.add(predicate);
				}

				if (key != null) {
					if (type.equals("id")) {
						Predicate predicate = cb.like(root.get("user").get("username"), key);
						predicates.add(predicate);
					} else if (type.equals("counselor_name")) {
						Predicate predicate = cb.like(root.get("user").get("fullname"), key);
						predicates.add(predicate);
					}
				}
				return cb.and(predicates.toArray(new Predicate[] {}));
			}

		};
		Order oder = new Order(Direction.DESC, orderBy);
		if(orderBy.equals("user.fullname")){
			 oder = new Order(Direction.ASC, orderBy);
		}
		
		PageRequest pageable = new PageRequest(page - 1, size, new Sort(oder));
		return counselorJpaRepository.findAll(spec, pageable);
	}

	@Override
	public Page<CounselorEntity> listPagingCounselorNotActive(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page - 1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return counselorJpaRepository.listPagingCounselorNotActive(pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public Page<CounselorEntity> filter(Integer[] role, Integer centerId, Short[] status, String key, String type,
			Integer page, Integer size) {

		Specification<CounselorEntity> spec = new Specification<CounselorEntity>() {
			@Override
			public Predicate toPredicate(Root<CounselorEntity> root, CriteriaQuery<?> query, CriteriaBuilder cb) {
				List<Predicate> predicates = new ArrayList<>();

				if (role.length == 1) {
					for (Integer i : role) {
						Predicate predicate = cb.equal(root.get("user").get("userRole").get("id"), i);
						predicates.add(predicate);
					}
				} else {
					Predicate predicate = cb.or(
							cb.equal(root.get("user").get("userRole").get("id"),
									ApplicationDefine.USER_ROLE_COUNSELOR_IN_CENTER),
							cb.equal(root.get("user").get("userRole").get("id"),
									ApplicationDefine.USER_ROLE_COUNSELOR_FREELANCE));
					predicates.add(predicate);
				}
				if (centerId != null) {
					Predicate predicate = cb.equal(root.get("counselingCenter").get("id"), centerId);
					predicates.add(predicate);
				}

				if (status.length == 1) {
					Predicate predicate = cb.equal(root.get("status"), status[0]);
					predicates.add(predicate);
				} else {
					Predicate predicate = cb.or(cb.equal(root.get("status"), 0), cb.equal(root.get("status"), 3));
					predicates.add(predicate);
				}

				if (key != "" && key != null) {
					if (type.equals("fullname")) {
						Predicate predicate = cb.equal(root.get("user").get("fullname"), key);
						predicates.add(predicate);
					} else if (type.equals("guidance_username")) {
						Predicate predicate = cb.like(root.get("guidanceUsername"), key);
						predicates.add(predicate);
					}
				}
				return cb.and(predicates.toArray(new Predicate[] {}));
			}

		};

		Order oder = new Order(Direction.DESC, "createDate");
		PageRequest pageable = new PageRequest(page - 1, size, new Sort(oder));
		return counselorJpaRepository.findAll(spec, pageable);
	}

	@Override
	public List<SuggestionCounselor> counselorsByCategorySelected(String categoryIds, Short actived) {
		List<Object[]> rs = counselorJpaRepository.counselorsByCategorySelected("%"+categoryIds+"%", actived);
		List<SuggestionCounselor> list = new ArrayList<>(); 
		for (Object[] objects : rs) {
			SuggestionCounselor s = new SuggestionCounselor();
			CounselorEntity centity = new CounselorEntity();
			centity.setId((Integer) objects[0]);
			centity.setThumbnailUrl((String) objects[1]);
			s.setCounselorEntity(centity);
			s.setFullName((String) objects[2]);
			s.setCategories(String.valueOf(objects[3]));
			list.add(s);
		}
		
		return list;
	}

	@Override
	public Integer totalCounlingByCounselorId(Integer counselorId) {
		try {
			return counselorJpaRepository.totalCounlingByCounselorId(counselorId);
		} catch (Exception e) {
			e.printStackTrace();
			return 0;
		}
	}

	@Override
	public void calculateProfit() {

		// filter params
		Calendar now = Calendar.getInstance();

		now.set(Calendar.HOUR_OF_DAY, 0);
		now.set(Calendar.MINUTE, 0);
		now.set(Calendar.SECOND, 0);

		Date startDate = now.getTime();

		now.set(Calendar.HOUR_OF_DAY, 23);
		now.set(Calendar.MINUTE, 59);
		now.set(Calendar.SECOND, 59);

		Date endDate = now.getTime();
		
		now = Calendar.getInstance();
		Date currentDate = now.getTime();

		int year 	= now.get(Calendar.YEAR);
		int month 	= now.get(Calendar.MONTH) + 1;

		// fetch all counselor
		Iterable<CounselorEntity> counselorIterable = counselorJpaRepository.findAll();
		for (Iterator<CounselorEntity> counselorIterator = counselorIterable.iterator(); counselorIterator.hasNext(); ) {

			CounselorEntity counselorEntity = counselorIterator.next();
			PaymentProfitEntity paymentProfitEntity;

			if (counselorEntity.getCounselingCenter() != null) {
				CounselingCenterEntity counselingCenter = counselorEntity.getCounselingCenter();
				paymentProfitEntity = paymentProfitJpaRepository.findByCounselorAndTime(year, month, counselingCenter.getUser().getId(), (short) 2, ApplicationDefine.PaymentProfitStatus.PENDING.getCode());
			} else {
				paymentProfitEntity = paymentProfitJpaRepository.findByCounselorAndTime(year, month, counselorEntity.getId(), (short) 1, ApplicationDefine.PaymentProfitStatus.PENDING.getCode());
			}

			if (paymentProfitEntity == null) {
				paymentProfitEntity = new PaymentProfitEntity();
				paymentProfitEntity.setUser(counselorEntity.getCounselingCenter() == null ? counselorEntity.getUser() : counselorEntity.getCounselingCenter().getUser());
				paymentProfitEntity.setName(counselorEntity.getCounselingCenter() == null ? counselorEntity.getUser().getFullname() : counselorEntity.getCounselingCenter().getCenterName());
				paymentProfitEntity.setMonth(month);
				paymentProfitEntity.setYear(year);
				paymentProfitEntity.setCoin(0);
				paymentProfitEntity.setVoucher(0);
				paymentProfitEntity.setPercent(counselorEntity.getCounselingCenter() == null ? counselorEntity.getProfitPercent() : counselorEntity.getCounselingCenter().getProfitPercent());
				paymentProfitEntity.setTax(ApplicationDefine.TAX_PROFIT_COUNSELOR);
				paymentProfitEntity.setAdminRefund(0);
				paymentProfitEntity.setStatus(ApplicationDefine.PaymentProfitStatus.PENDING.getCode());
				paymentProfitEntity.setType(counselorEntity.getCounselingCenter() == null ? (short) 1 : (short) 2);
				paymentProfitEntity.setCreateDate(currentDate);
				paymentProfitEntity.setUpdateDate(currentDate);
				paymentProfitJpaRepository.save(paymentProfitEntity);
			}

			// fetch all completed session of the counselor within today
			Short[] counselingStatus = {ApplicationDefine.CounselingSession_Status.COUNSELED_ADMIN_NOT_REFUND.getCode()};
			Short[] typeCoin = {ApplicationDefine.Payment_TypeCoin.Coin.getCode(), ApplicationDefine.Payment_TypeCoin.Voucher.getCode()};
			List<CounselingSessionEntity> todaySessions = counselingSessionJpaRepository.filterByMonth(counselorEntity.getId(), startDate, endDate, counselingStatus,
					ApplicationDefine.Payment_Status.PaymentSuccess.getCode(), ApplicationDefine.Payment_TypePaymentStatus.Payment.getCode() , typeCoin);

			for (CounselingSessionEntity cse : todaySessions) {

				PaymentHistoryEntity paymentHistory = cse.getPaymentHistory();

				if (paymentHistory != null) {
					paymentProfitEntity.setCoin(paymentProfitEntity.getCoin() + (paymentHistory.getCoin() == null ? 0 : paymentHistory.getCoin()));
					paymentProfitEntity.setVoucher(paymentProfitEntity.getVoucher() + (paymentHistory.getCoin() == null ? 0 : paymentHistory.getCoin()));
					paymentProfitEntity.setProfit((int) ((paymentProfitEntity.getCoin() + paymentProfitEntity.getVoucher()) * paymentProfitEntity.getPercent()));
					paymentProfitEntity.setAdminRefund((int) (paymentProfitEntity.getProfit() * paymentProfitEntity.getTax()));

				}

			}

			paymentProfitJpaRepository.save(paymentProfitEntity);
		}
	}

	@Override
	public Page<CounselorEntity> listPagingByStatusAndActived(Short[] status, Short actived, Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page - 1, size, new Sort(new Order(Direction.DESC, "level")));
			return counselorJpaRepository.listPagingByStatusAndActived(status, actived, pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}

	}

	@Override
	public Page<CounselorEntity> listPagingCounselorNormal(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page - 1, size, new Sort(new Order(Direction.DESC, "level")));
			return counselorJpaRepository.listPagingCounselorNormal(pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public PageCustom<CounselorInfo> listCounselorInFo(Integer counselingCenterId, String keyword,
			Integer status_counselor_Normal, Integer status_counselor_banned, Integer status_counselor_display, String typeSearch, String typeOrder, Integer page, Integer size) {
		try {
			String sql_select 	= " SELECT c1.id, c1.thumbnail_url, u1.fullname, u1.day_of_birth, u1.phone, u1.create_date, u1.last_login, c1.points, c1.status, u1.status_active ";
			String sql_count 	= " SELECT COUNT(*) ";
			String sql_from 	= " FROM counselor c1 INNER JOIN user u1 ON c1.id = u1.id  ";
			String sql_where 	= " WHERE c1.counselor_center_id = "+counselingCenterId+" and u1.role_id = 3 ";
			
			String sql_where_sub_status = "";
			String sql_where_sub = "";
			if (status_counselor_Normal == 1) {
				if (sql_where_sub_status.equals("")) {
					sql_where_sub_status = sql_where_sub_status + " (c1.status = 1 and u1.status_active = 0) ";
				} else {
					sql_where_sub_status = sql_where_sub_status + " or (c1.status = 1 and u1.status_active = 0) ";
				}
			}
			if (status_counselor_banned == 1) {
				if (sql_where_sub_status.equals("")) {
					sql_where_sub_status = sql_where_sub_status + " u1.status_active = 1 "; 
				} else {
					sql_where_sub_status = sql_where_sub_status + " or (u1.status_active = 1) ";
				}
			}
			if (status_counselor_display == 1) {
				if (sql_where_sub_status.equals("")) {
					sql_where_sub_status = sql_where_sub_status + " (c1.status = 2 and u1.status_active = 0) ";
				} else {
					sql_where_sub_status = sql_where_sub_status + " or (c1.status = 2 and u1.status_active = 0) ";
				}
			}
				
			
			String key = "";
			if (keyword != null) {
				key = "%"+keyword+"%";
			}
			if (keyword != null) {
				if(typeSearch.equals("counselorName")) {
					sql_where_sub = sql_where_sub + " and u1.fullname LIKE '"+key+"' ";
				} else {
					sql_where_sub = sql_where_sub + " and c1.id LIKE '"+key+"' ";
				}
			}
			
			if (typeOrder.equals("ord_counselorName")) {
				sql_where_sub = sql_where_sub + " ORDER BY u1.fullname ASC ";
			} else {
				sql_where_sub = sql_where_sub + " ORDER BY u1.create_date DESC  ";
			}
			
			String sql = "";
			if (sql_where_sub_status.isEmpty()) {
				sql = sql_select + sql_from + sql_where + sql_where_sub + " limit " + (page-1)*size  + ", " + size;
			} else {
				sql = sql_select + sql_from + sql_where + " and ("+ sql_where_sub_status+")" +  sql_where_sub + " limit " + (page-1)*size  + ", " + size;
			}
			Query q = em.createNativeQuery(sql);
			@SuppressWarnings("unchecked")
			List<Object[] > rss = q.getResultList();
			List<CounselorInfo> list = new ArrayList<>();
			for (Object[] i : rss) {
				CounselorInfo c = new CounselorInfo();
				c.setId((Integer) i[0]);
				c.setThumb((String) i[1]);
				c.setName((String) i[2]);
				c.setDayOfBirth((Date) i[3]);
				c.setPhone((String) i[4]);
				c.setCreateDate((Date) i[5]);
				c.setLastLoggedDate((Date) i[6]);
				c.setPoints((Float) i[7]);
				Short status = (Short) i[8];
				Short status_active = (Short) i[9];
				
				if(status_active == 1) {
					c.setStatus("제재");
				} else {
					if(status == 1) {
						c.setStatus("정상");
					} else {
						c.setStatus("노출 중지");
					}
				}
				list.add(c);
			}
			String sql2 = "";
			if (sql_where_sub_status.isEmpty()) {
				sql2 = sql_count + sql_from + sql_where  + sql_where_sub;
			} else {
				sql2 = sql_count + sql_from + sql_where + " and ("+ sql_where_sub_status+")" + sql_where_sub;
			}
			Query t = em.createNativeQuery(sql2);
			Long total = ((BigInteger) t.getSingleResult()).longValue();
			PageCustom<CounselorInfo> pageCustom = new PageCustom<>(list, total, page, size);
			
			return pageCustom;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	@Override
	public PageCustom<CounselorRanking> filterCounselorStaticStatistics(SearchStatistics s, Integer page, Integer size, String orderBy) {
		try {
			String WHERE_REVERSTATION ="";
			String WHERE_COUSELING ="";
			if(s.getStartDate() != null){
				WHERE_REVERSTATION +=" AND DATE(cs.create_date) >= '"+s.getStartDate()+"' ";
				WHERE_COUSELING +=" AND DATE(cs.exit_counselor_time) >= '"+s.getStartDate()+"' ";
			}
			if(s.getEndDate() != null){
				WHERE_REVERSTATION +=" AND DATE(cs.create_date) <= '"+s.getEndDate()+"' ";
				WHERE_COUSELING +=" AND DATE(cs.exit_counselor_time) <= '"+s.getEndDate()+"' ";
			}
			String SELECT = "SELECT u.fullname, u.role_id, "
						+ "(SELECT COUNT(*) "
						+ "FROM counseling_session cs "
						+ "WHERE cs.status !=0 and cs.counsel_type =2 and cs.counselor_id = c.id "+WHERE_REVERSTATION+") as reversation, "
						
						+ "(SELECT COUNT(*) "
						+ "FROM counseling_session cs "
						+ "WHERE cs.status in (2,3) and cs.counselor_id = c.id "+WHERE_COUSELING+") as counseling, "
						
						+ "c.points as point , c.likes, "
						
						+ "(SELECT SUM(p.coin) "
						+ "FROM counseling_session cs INNER JOIN payment_history p ON p.id = cs.payment_id "
						+ "WHERE cs.status in (2,3) and p.status = 1 and cs.counselor_id = c.id "+WHERE_COUSELING+") as fee ";
			
			String FROM = "FROM counselor c "
						+ "INNER JOIN user u ON c.id = u.id ";
			
			String WHERE = "WHERE u.role_id in (2,3) ";
			
			String ORDER_BY = " ORDER BY reversation DESC ";
			if(orderBy.equals("counseling")){
				ORDER_BY = " ORDER BY counseling DESC ";
			}else if(orderBy.equals("point")){
				ORDER_BY = " ORDER BY point DESC ";
			}else if(orderBy.equals("fee")){
				ORDER_BY = " ORDER BY fee DESC ";
			}
			
			
			Integer offset = DataUtils.getOffset(page, size);
			String LIMIT = " LIMIT " + offset + ", " + size;
			
			List<CounselorRanking> listPage = new ArrayList<>();
			
			//select list

			System.out.println(SELECT + FROM  + WHERE + ORDER_BY + LIMIT);
			@SuppressWarnings("unused")
			Query q = em.createNativeQuery(SELECT + FROM  + WHERE + ORDER_BY+ LIMIT);

			List<Object[]> listObject = q.getResultList();
			for (Object[] ob : listObject) {
				CounselorRanking c = new CounselorRanking();
				c.setCounselorName((String) ob[0]);
				if(ob[1].equals(2)){
					c.setCounselorType("프리랜서");
				}else{
					c.setCounselorType("센터 소속");
				}
				c.setReservation(Integer.valueOf(String.valueOf(ob[2])));
				c.setCounseling(Integer.valueOf(String.valueOf(ob[3])));
				c.setPoint(Float.valueOf(String.valueOf(ob[4])));
				c.setLike(Float.valueOf(String.valueOf(ob[5])));
				if(ob[6] != null){
					c.setFee(Integer.valueOf(String.valueOf(ob[6])));
				}else{
					c.setFee(0);
				}
				listPage.add(c);
			}
			
			//select count
			Query queryCount = em.createNativeQuery("SELECT COUNT(*) FROM counselor");
			Long totalCount = Long.valueOf(queryCount.getSingleResult().toString());
			return new PageCustom<CounselorRanking>(listPage, totalCount, page, size);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	@Override
	public PageCustom<CounselorRanking> filterCounselorCenterStatistics(SearchStatistics s, Integer page, Integer size, String orderBy) {
		try {
			String WHERE_REVERSTATION ="";
			String WHERE_COUSELING ="";
			String WHERE_FEE ="";
			if(s.getStartDate() != null){
				WHERE_REVERSTATION +=" AND DATE(cs.create_date) >= '"+s.getStartDate()+"' ";
				WHERE_COUSELING +=" AND DATE(cs.start_time) >= '"+s.getStartDate()+"' ";
				WHERE_FEE +=" AND DATE(cs.end_time) >= '"+s.getStartDate()+"' ";
			}
			if(s.getEndDate() != null){
				WHERE_REVERSTATION +=" AND DATE(cs.create_date) <= '"+s.getEndDate()+"' ";
				WHERE_COUSELING +=" AND DATE(cs.start_time) <= '"+s.getEndDate()+"' ";
				WHERE_FEE +=" AND DATE(cs.end_time) <= '"+s.getEndDate()+"' ";
			}

			String SELECT = "SELECT u.fullname, "
						+ "(SELECT COUNT(*) "
						+ "FROM counseling_session cs "
						+ "WHERE cs.status = 1 and cs.counselor_id = c.id "+WHERE_REVERSTATION+") as reversation, "
						
						+ "(SELECT COUNT(*) "
						+ "FROM counseling_session cs "
						+ "WHERE cs.status in (2,3) and cs.counselor_id = c.id "+WHERE_COUSELING+") as counseling, "
						
						+ "(SELECT COUNT(*) "
						+ "FROM counseling_session cs INNER JOIN payment_history p ON p.id = cs.payment_id "
						+ "WHERE cs.status in (2,3) and p.status = 1 and p.type_coin =1 and cs.counselor_id = c.id "+WHERE_FEE+") as coin, "
			
						+ "(SELECT COUNT(*) "
						+ "FROM counseling_session cs INNER JOIN payment_history p ON p.id = cs.payment_id "
						+ "WHERE cs.status in (2,3) and p.status = 1 and p.type_coin =3 and cs.counselor_id = c.id "+WHERE_FEE+") as voucher, "
			
						+ "(SELECT SUM(p.coin) "
						+ "FROM counseling_session cs INNER JOIN payment_history p ON p.id = cs.payment_id "
						+ "WHERE cs.status in (2,3) and p.status = 1 and cs.counselor_id = c.id "+WHERE_FEE+") as fee ";
			
			String FROM = "FROM counselor c "
						+ "INNER JOIN user u ON c.id = u.id ";
			
			String WHERE = "WHERE u.role_id in (2,3) AND c.counselor_center_id = "+ s.getCenterId()+" ";
			
			String ORDER_BY = " ORDER BY fee DESC ";
			
			if(orderBy.equals("counselorName")){
				ORDER_BY = " ORDER BY u.fullname ASC ";
			}else if(orderBy.equals("counseling")){
				ORDER_BY = " ORDER BY counseling DESC ";
			}
			
			Integer offset = DataUtils.getOffset(page, size);
			String LIMIT = " LIMIT " + offset + ", " + size;
			
			List<CounselorRanking> listPage = new ArrayList<>();
			
			//select list

			System.out.println(SELECT + FROM  + WHERE + ORDER_BY + LIMIT);
			@SuppressWarnings("unused")
			Query q = em.createNativeQuery(SELECT + FROM  + WHERE + ORDER_BY+ LIMIT);

			List<Object[]> listObject = q.getResultList();
			for (Object[] ob : listObject) {
				CounselorRanking c = new CounselorRanking();
				c.setCounselorName((String) ob[0]);
				c.setReservation(Integer.valueOf(String.valueOf(ob[1])));
				c.setCounseling(Integer.valueOf(String.valueOf(ob[2])));
				c.setTotalCoin(Integer.valueOf(String.valueOf(ob[3])));
				c.setTotalVoucher(Integer.valueOf(String.valueOf(ob[4])));
				if(ob[5] != null){
					c.setFee(Integer.valueOf(String.valueOf(ob[5])));
				}else{
					c.setFee(0);
				}
				listPage.add(c);
			}
			
			//select count
			Query queryCount = em.createNativeQuery("SELECT COUNT(*) "+ FROM +WHERE);
			Long totalCount = Long.valueOf(queryCount.getSingleResult().toString());
			return new PageCustom<CounselorRanking>(listPage, totalCount, page, size);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	@Override
	public PageCustom<ProfitCenterReport> filterProfitCenterStatistics(SearchProfitCenter s,Integer page,Integer size) {
		try {
			
			String SELECT = "SELECT cu.fullname as counselorName, u.fullname, cs.start_time as startTime, p.type_coin, p.coin ";
			
			String FROM = "FROM counseling_session cs "
					+ "INNER JOIN counselor c ON cs.counselor_id = c.id "
					+ "INNER JOIN user cu ON cu.id = c.id "
					+ "INNER JOIN user u ON u.id = cs.user_id "
					+ "INNER JOIN payment_history p ON p.id = cs.payment_id ";
			
			String WHERE = "WHERE cs.status in (2,3) "
						 + "AND YEAR(cs.start_time) = "+s.getYear()+" "
						 + "AND MONTH(cs.start_time) = "+s.getMonth()+" "
						 + "AND c.counselor_center_id = "+s.getCenterId()+" ";
			
			String ORDER_BY = " ORDER BY startTime DESC ";
			
			if(s.getOrderBy().equals("counselorName")){
				ORDER_BY = " ORDER BY counselorName ASC ";
			}
			
			Integer offset = DataUtils.getOffset(page, size);
			String LIMIT = " LIMIT " + offset + ", " + size;
			
			List<ProfitCenterReport> listPage = new ArrayList<>();
			
			//select count
			Query queryCount = em.createNativeQuery("SELECT COUNT(*) "+ FROM +WHERE);
			Long totalCount = Long.valueOf(queryCount.getSingleResult().toString());
			
			//select list
			System.out.println(SELECT + FROM  + WHERE + ORDER_BY + LIMIT);
			@SuppressWarnings("unused")
			Query q = em.createNativeQuery(SELECT + FROM  + WHERE + ORDER_BY+ LIMIT);
			List<Object[]> listObject = q.getResultList();
			int index = 0;
			for (Object[] ob : listObject) {
				ProfitCenterReport c = new ProfitCenterReport();
				c.setId(totalCount - index - (page-1) *size);
				c.setCounselorName((String) ob[0]);
				c.setUserName((String) ob[1]);
				c.setStartTime((Date) ob[2]);
				if(ob[3].equals(ApplicationDefine.Payment_TypeCoin.Coin.getCode())){
					c.setTypeCoin("헬로코인 사용");
				}else{
					c.setTypeCoin("상담권 사용");
				}
				c.setFee((Integer)ob[4]);
				listPage.add(c);
				index++;
			}
			return new PageCustom<ProfitCenterReport>(listPage, totalCount, page, size);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public Integer getStatusRealTimeCounseling(Integer counselorId) {
		//System.out.println("counselorId: " + counselorId);
		Integer status = 0;
		Integer counselingInProgress = counselingSessionService.countInProgressCounseling(counselorId);
		//System.out.println("counselingInProgress: " + counselingInProgress);
		if(counselingInProgress == 0){
			CounselorScheduleSettingEntity counselorSchedule = getTodaySchedule(counselorId);
			if(counselorSchedule != null){
				//System.out.println("counselorSchedule != null");
				if(!counselorSchedule.getOnlineTime().isEmpty() && hasAvailableSchedule(counselorSchedule.getOnlineTime())){
					//System.out.println("hasAvailableSchedule");
					if(!hasReservation(counselorId)){
						//System.out.println("!hasReservation");
						Date latestCounselingEndTime = counselingSessionService.getLatestCounselingEndTime(counselorId);
						if(latestCounselingEndTime != null){
							if(finishRestTime(counselorId, latestCounselingEndTime)){
								//System.out.println("finishRestTime");
								status = 1;
							}
						}else{
							//System.out.println("latestCounselingEndTime == null");
							status = 1;
						}
					}
				}
			}
		}
		
		return status;
	}

	private CounselorScheduleSettingEntity getTodaySchedule(Integer counselorId) {
		Map<String, Object> reservationParams = new HashMap<>();
		reservationParams.put("page", 1);
		reservationParams.put("size", 10);
		reservationParams.put("counselorId", counselorId);
		reservationParams.put("reservationFrom", DataUtils.parseStringFromDate(new Date(), DataUtils.DatePattern.YYYYMMDD.getPattern()));
		reservationParams.put("reservationTo", DataUtils.parseStringFromDate(new Date(), DataUtils.DatePattern.YYYYMMDD.getPattern()));
		reservationParams.put("onlineTimeNoEmpty", true);
		Page<CounselorScheduleSettingEntity> scheduleSettings = counselorScheduleSettingService.filter(reservationParams);
		
		if(!scheduleSettings.getContent().isEmpty()){
			return scheduleSettings.getContent().get(0);	
		}else{
			return null;
		}
	}
	
	private boolean hasAvailableSchedule(String schedule){
		boolean result = false;
		List<Calendar> listSchedule = getListSchedule(schedule);
		List<Map<String, Calendar>> rangeSchedule = getScheduleRange(listSchedule);
		
		Calendar now = Calendar.getInstance();
		Calendar estimatedEnd = Calendar.getInstance();
		estimatedEnd.add(Calendar.MINUTE, 35);
		
		//System.out.println("now: " + DateFormatUtils.format(now.getTime(), "yyyy-MM-dd HH:mm:ss"));
		//System.out.println("estimatedEnd: " + DateFormatUtils.format(estimatedEnd.getTime(), "yyyy-MM-dd HH:mm:ss"));
		
		for(Map<String, Calendar> range : rangeSchedule){
			Calendar start = range.get("start");
			Calendar end = range.get("end");
			//System.out.println("start: " + DateFormatUtils.format(start.getTime(), "yyyy-MM-dd HH:mm:ss"));
			//System.out.println("end: " + DateFormatUtils.format(end.getTime(), "yyyy-MM-dd HH:mm:ss"));
			
			if(start.before(now) && end.after(estimatedEnd)){
				//System.out.println("start.before(now) && end.after(estimatedEnd)");
				result = true;
				break;
			}
		}
		
		return result;
	}
	
	private List<Calendar> getListSchedule(String schedule){
		String splitedSchedule[] = schedule.split(";");
		List<Calendar> listSchedule = new ArrayList<Calendar>();
		for(String temp: splitedSchedule){
			Calendar time = stringToCalendar(temp);
			listSchedule.add(time);
		}
		return listSchedule;
	}
	
	private List<Map<String, Calendar>> getScheduleRange(List<Calendar> listSchedule){
		List<Map<String, Calendar>> dateSchedule = new ArrayList<Map<String, Calendar>>();
		
		List<Integer> startIndex = new ArrayList<Integer>();
		List<Integer> endIndex = new ArrayList<Integer>();

		startIndex.add(0);
		for(int i = 1; i < listSchedule.size() - 1 ; i++){
			long subtract = listSchedule.get(i).getTimeInMillis() - listSchedule.get(i-1).getTimeInMillis();
			if(subtract != (1000 * 60 * 10)){
				endIndex.add(i-1);
				startIndex.add(i);
			}
		}
		endIndex.add(listSchedule.size() - 1);

		for(int i = 0; i < startIndex.size() ; i++){
			Map<String, Calendar> temp = new HashMap<String, Calendar>();
			temp.put("start", listSchedule.get(startIndex.get(i)));
			listSchedule.get(endIndex.get(i)).add(Calendar.MINUTE, 10);
			temp.put("end", listSchedule.get(endIndex.get(i)));
			dateSchedule.add(temp);
		}
		
		return dateSchedule;
	}
	
	private boolean finishRestTime(Integer counselorId, Date latestCounselingEndTime){
		boolean result = false;
		Counselor counselor = findById(counselorId);
		Calendar endRest = Calendar.getInstance();
		endRest.setTime(latestCounselingEndTime);
		endRest.add(Calendar.MINUTE, counselor.getCounselingRestTime());
		
		Calendar now = Calendar.getInstance();
		
		if(endRest.before(now)){
			result = true;
		}
		
		return result;
	}
	private boolean hasReservation(Integer counselorId) {
		boolean result = false;
		Date closestCounselingStartTime = counselingSessionService.getClosestCounselingStartTime(counselorId);
		if(closestCounselingStartTime != null){
			Calendar estimatedEnd = Calendar.getInstance();
			estimatedEnd.add(Calendar.MINUTE, 35);
			
			if(estimatedEnd.getTime().after(closestCounselingStartTime)){
				result = true;
			}
		}
		
		return result;
	}

	private Calendar stringToCalendar(String floatStringTime){
		Calendar calendar = Calendar.getInstance();
		calendar.set(Calendar.SECOND, 0);
		
		String split[] = floatStringTime.split("\\.");
		Integer hour = Integer.parseInt(split[0]);
		Integer minute = 0;
		if(split.length > 1){
			minute = Integer.parseInt(split[1]) * 10;
		}
		calendar.set(Calendar.HOUR_OF_DAY, hour);
		calendar.set(Calendar.MINUTE, minute);
		
		return calendar;
	}
	
}
