/*
 * Created on 21 Mar 2017 ( Time 09:58:46 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import org.trams.hello.bean.BanAccountHistory;
import org.trams.hello.bean.jpa.BanAccountHistoryEntity;
import org.trams.hello.business.service.BanAccountHistoryService;
import org.trams.hello.business.service.mapping.BanAccountHistoryServiceMapper;
import org.trams.hello.data.repository.jpa.BanAccountHistoryJpaRepository;
/**
 * Implementation of BanAccountHistoryService
 */
@Component
@Transactional
public class BanAccountHistoryServiceImpl implements BanAccountHistoryService {

	@Resource
	private BanAccountHistoryJpaRepository banAccountHistoryJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private BanAccountHistoryServiceMapper banAccountHistoryServiceMapper;
	
	@Override
	public BanAccountHistory findById(Integer id) {
		BanAccountHistoryEntity banAccountHistoryEntity = banAccountHistoryJpaRepository.findOne(id);
		return banAccountHistoryServiceMapper.mapBanAccountHistoryEntityToBanAccountHistory(banAccountHistoryEntity);
	}

	@Override
	public Page<BanAccountHistoryEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return banAccountHistoryJpaRepository.findAll(request);
	}

	@Override
	public List<BanAccountHistory> findAll() {
		Iterable<BanAccountHistoryEntity> entities = banAccountHistoryJpaRepository.findAll();
		List<BanAccountHistory> beans = new ArrayList<BanAccountHistory>();
		for(BanAccountHistoryEntity banAccountHistoryEntity : entities) {
			beans.add(banAccountHistoryServiceMapper.mapBanAccountHistoryEntityToBanAccountHistory(banAccountHistoryEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = banAccountHistoryJpaRepository.count();
		return count;
	}

	@Override
	public BanAccountHistory save(BanAccountHistory banAccountHistory) {
		return update(banAccountHistory) ;
	}

	@Override
	public BanAccountHistory create(BanAccountHistory banAccountHistory) {
/*
		BanAccountHistoryEntity banAccountHistoryEntity = banAccountHistoryJpaRepository.findOne(banAccountHistory.getId());
		if( banAccountHistoryEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		banAccountHistoryEntity = new BanAccountHistoryEntity();
		banAccountHistoryServiceMapper.mapBanAccountHistoryToBanAccountHistoryEntity(banAccountHistory, banAccountHistoryEntity);
		BanAccountHistoryEntity banAccountHistoryEntitySaved = banAccountHistoryJpaRepository.save(banAccountHistoryEntity);
		return banAccountHistoryServiceMapper.mapBanAccountHistoryEntityToBanAccountHistory(banAccountHistoryEntitySaved);
*/
		BanAccountHistoryEntity banAccountHistoryEntity = new BanAccountHistoryEntity();
		banAccountHistoryServiceMapper.mapBanAccountHistoryToBanAccountHistoryEntity(banAccountHistory, banAccountHistoryEntity);
		BanAccountHistoryEntity banAccountHistoryEntitySaved = banAccountHistoryJpaRepository.save(banAccountHistoryEntity);
		return banAccountHistoryServiceMapper.mapBanAccountHistoryEntityToBanAccountHistory(banAccountHistoryEntitySaved);
	}

	@Override
	public BanAccountHistory update(BanAccountHistory banAccountHistory) {
		BanAccountHistoryEntity banAccountHistoryEntity = banAccountHistoryJpaRepository.findOne(banAccountHistory.getId());
		banAccountHistoryServiceMapper.mapBanAccountHistoryToBanAccountHistoryEntity(banAccountHistory, banAccountHistoryEntity);
		BanAccountHistoryEntity banAccountHistoryEntitySaved = banAccountHistoryJpaRepository.save(banAccountHistoryEntity);
		return banAccountHistoryServiceMapper.mapBanAccountHistoryEntityToBanAccountHistory(banAccountHistoryEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		banAccountHistoryJpaRepository.delete(id);
	}

	public BanAccountHistoryJpaRepository getBanAccountHistoryJpaRepository() {
		return banAccountHistoryJpaRepository;
	}

	public void setBanAccountHistoryJpaRepository(BanAccountHistoryJpaRepository banAccountHistoryJpaRepository) {
		this.banAccountHistoryJpaRepository = banAccountHistoryJpaRepository;
	}

	public BanAccountHistoryServiceMapper getBanAccountHistoryServiceMapper() {
		return banAccountHistoryServiceMapper;
	}

	public void setBanAccountHistoryServiceMapper(BanAccountHistoryServiceMapper banAccountHistoryServiceMapper) {
		this.banAccountHistoryServiceMapper = banAccountHistoryServiceMapper;
	}

	@Override
	public Page<BanAccountHistoryEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return banAccountHistoryJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	

	@Override
	public Page<BanAccountHistoryEntity> listPagingByUserId(Integer page, Integer size, Integer userId) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return banAccountHistoryJpaRepository.listPagingByUserId(userId, pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public List<BanAccountHistoryEntity> listByUserId(Integer userId) {
		try {
			return banAccountHistoryJpaRepository.listByUserId(userId);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public void deleteFirstByUser(Integer userId) {
		try {
			banAccountHistoryJpaRepository.deleteFirstByUser(userId);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

}
