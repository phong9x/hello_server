/*
 * Created on 22 Apr 2017 ( Time 11:48:46 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.business.service.mapping;

import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import org.trams.hello.bean.UserPsychological;
import org.trams.hello.bean.jpa.PsychologicalTestSettingEntity;
import org.trams.hello.bean.jpa.RequestUserPsychologicalEntity;
import org.trams.hello.bean.jpa.UserPsychologicalEntity;

/**
 * Mapping between entity beans and display beans.
 */
@Component
public class UserPsychologicalServiceMapper extends AbstractServiceMapper {

	/**
	 * ModelMapper : bean to bean mapping library.
	 */
	private ModelMapper modelMapper;
	
	/**
	 * Constructor.
	 */
	public UserPsychologicalServiceMapper() {
		modelMapper = new ModelMapper();
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}

	/**
	 * Mapping from 'UserPsychologicalEntity' to 'UserPsychological'
	 * @param userPsychologicalEntity
	 */
	public UserPsychological mapUserPsychologicalEntityToUserPsychological(UserPsychologicalEntity userPsychologicalEntity) {
		if(userPsychologicalEntity == null) {
			return null;
		}

		//--- Generic mapping 
		UserPsychological userPsychological = map(userPsychologicalEntity, UserPsychological.class);

		//--- Link mapping ( link to PsychologicalTestSetting )
		if(userPsychologicalEntity.getPsychologicalTestSetting() != null) {
			userPsychological.setPsychologicalTestId(userPsychologicalEntity.getPsychologicalTestSetting().getId());
		}
		//--- Link mapping ( link to RequestUserPsychological )
		if(userPsychologicalEntity.getRequestUserPsychological() != null) {
			userPsychological.setRequestPsychologicalId(userPsychologicalEntity.getRequestUserPsychological().getId());
		}
		return userPsychological;
	}
	
	/**
	 * Mapping from 'UserPsychological' to 'UserPsychologicalEntity'
	 * @param userPsychological
	 * @param userPsychologicalEntity
	 */
	public void mapUserPsychologicalToUserPsychologicalEntity(UserPsychological userPsychological, UserPsychologicalEntity userPsychologicalEntity) {
		if(userPsychological == null) {
			return;
		}

		//--- Generic mapping 
		map(userPsychological, userPsychologicalEntity);

		//--- Link mapping ( link : userPsychological )
		if( hasLinkToPsychologicalTestSetting(userPsychological) ) {
			PsychologicalTestSettingEntity psychologicalTestSetting1 = new PsychologicalTestSettingEntity();
			psychologicalTestSetting1.setId( userPsychological.getPsychologicalTestId() );
			userPsychologicalEntity.setPsychologicalTestSetting( psychologicalTestSetting1 );
		} else {
			userPsychologicalEntity.setPsychologicalTestSetting( null );
		}

		//--- Link mapping ( link : userPsychological )
		if( hasLinkToRequestUserPsychological(userPsychological) ) {
			RequestUserPsychologicalEntity requestUserPsychological2 = new RequestUserPsychologicalEntity();
			requestUserPsychological2.setId( userPsychological.getRequestPsychologicalId() );
			userPsychologicalEntity.setRequestUserPsychological( requestUserPsychological2 );
		} else {
			userPsychologicalEntity.setRequestUserPsychological( null );
		}

	}
	
	/**
	 * Verify that PsychologicalTestSetting id is valid.
	 * @param PsychologicalTestSetting PsychologicalTestSetting
	 * @return boolean
	 */
	private boolean hasLinkToPsychologicalTestSetting(UserPsychological userPsychological) {
		if(userPsychological.getPsychologicalTestId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that RequestUserPsychological id is valid.
	 * @param RequestUserPsychological RequestUserPsychological
	 * @return boolean
	 */
	private boolean hasLinkToRequestUserPsychological(UserPsychological userPsychological) {
		if(userPsychological.getRequestPsychologicalId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected ModelMapper getModelMapper() {
		return modelMapper;
	}

	protected void setModelMapper(ModelMapper modelMapper) {
		this.modelMapper = modelMapper;
	}

}