/*
 * Created on 23 thg 11 2016 ( Time 13:38:13 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import org.trams.hello.bean.PromotionPageLink;
import org.trams.hello.bean.jpa.PromotionPageLinkEntity;
import org.trams.hello.business.service.PromotionPageLinkService;
import org.trams.hello.business.service.mapping.PromotionPageLinkServiceMapper;
import org.trams.hello.data.repository.jpa.PromotionPageLinkJpaRepository;
/**
 * Implementation of PromotionPageLinkService
 */
@Component
@Transactional
public class PromotionPageLinkServiceImpl implements PromotionPageLinkService {

	@Resource
	private PromotionPageLinkJpaRepository promotionPageLinkJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private PromotionPageLinkServiceMapper promotionPageLinkServiceMapper;
	
	@Override
	public PromotionPageLink findById(Integer id) {
		PromotionPageLinkEntity promotionPageLinkEntity = promotionPageLinkJpaRepository.findOne(id);
		return promotionPageLinkServiceMapper.mapPromotionPageLinkEntityToPromotionPageLink(promotionPageLinkEntity);
	}

	@Override
	public Page<PromotionPageLinkEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return promotionPageLinkJpaRepository.findAll(request);
	}

	@Override
	public List<PromotionPageLink> findAll() {
		Iterable<PromotionPageLinkEntity> entities = promotionPageLinkJpaRepository.findAll();
		List<PromotionPageLink> beans = new ArrayList<PromotionPageLink>();
		for(PromotionPageLinkEntity promotionPageLinkEntity : entities) {
			beans.add(promotionPageLinkServiceMapper.mapPromotionPageLinkEntityToPromotionPageLink(promotionPageLinkEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = promotionPageLinkJpaRepository.count();
		return count;
	}

	@Override
	public PromotionPageLink save(PromotionPageLink promotionPageLink) {
		return update(promotionPageLink) ;
	}

	@Override
	public PromotionPageLink create(PromotionPageLink promotionPageLink) {
/*
		PromotionPageLinkEntity promotionPageLinkEntity = promotionPageLinkJpaRepository.findOne(promotionPageLink.getId());
		if( promotionPageLinkEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		promotionPageLinkEntity = new PromotionPageLinkEntity();
		promotionPageLinkServiceMapper.mapPromotionPageLinkToPromotionPageLinkEntity(promotionPageLink, promotionPageLinkEntity);
		PromotionPageLinkEntity promotionPageLinkEntitySaved = promotionPageLinkJpaRepository.save(promotionPageLinkEntity);
		return promotionPageLinkServiceMapper.mapPromotionPageLinkEntityToPromotionPageLink(promotionPageLinkEntitySaved);
*/
		PromotionPageLinkEntity promotionPageLinkEntity = new PromotionPageLinkEntity();
		promotionPageLinkServiceMapper.mapPromotionPageLinkToPromotionPageLinkEntity(promotionPageLink, promotionPageLinkEntity);
		PromotionPageLinkEntity promotionPageLinkEntitySaved = promotionPageLinkJpaRepository.save(promotionPageLinkEntity);
		return promotionPageLinkServiceMapper.mapPromotionPageLinkEntityToPromotionPageLink(promotionPageLinkEntitySaved);
	}

	@Override
	public PromotionPageLink update(PromotionPageLink promotionPageLink) {
		PromotionPageLinkEntity promotionPageLinkEntity = promotionPageLinkJpaRepository.findOne(promotionPageLink.getId());
		promotionPageLinkServiceMapper.mapPromotionPageLinkToPromotionPageLinkEntity(promotionPageLink, promotionPageLinkEntity);
		PromotionPageLinkEntity promotionPageLinkEntitySaved = promotionPageLinkJpaRepository.save(promotionPageLinkEntity);
		return promotionPageLinkServiceMapper.mapPromotionPageLinkEntityToPromotionPageLink(promotionPageLinkEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		promotionPageLinkJpaRepository.delete(id);
	}

	public PromotionPageLinkJpaRepository getPromotionPageLinkJpaRepository() {
		return promotionPageLinkJpaRepository;
	}

	public void setPromotionPageLinkJpaRepository(PromotionPageLinkJpaRepository promotionPageLinkJpaRepository) {
		this.promotionPageLinkJpaRepository = promotionPageLinkJpaRepository;
	}

	public PromotionPageLinkServiceMapper getPromotionPageLinkServiceMapper() {
		return promotionPageLinkServiceMapper;
	}

	public void setPromotionPageLinkServiceMapper(PromotionPageLinkServiceMapper promotionPageLinkServiceMapper) {
		this.promotionPageLinkServiceMapper = promotionPageLinkServiceMapper;
	}

	@Override
	public Page<PromotionPageLinkEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return promotionPageLinkJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}
	
	

	@Override
	public Page<PromotionPageLinkEntity> findByTitle(String title, Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return promotionPageLinkJpaRepository.findByTitle(title, pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public List<PromotionPageLinkEntity> findByPromotionPageId(Integer promotionPageId) {
		try {
			return promotionPageLinkJpaRepository.findByPromotionPageId(promotionPageId);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public void deleteByPromotionPageId(Integer promotionPageId) {
		try {
			promotionPageLinkJpaRepository.deleteByPromotionPageId(promotionPageId);
		} catch (Exception e) {
			System.out.println(e);
		}
	}

	@Override
	public void deleteByPromotionPageBy_BusinessId(Integer businessId) {
		try {
			promotionPageLinkJpaRepository.deleteByPromotionPageBy_BusinessId(businessId);
		} catch (Exception e) {
			System.out.println(e);
		}
	}

	@Override
	public void deleteBy_PromotionPageId(Integer promotionPageId) {
		try {
			promotionPageLinkJpaRepository.deleteBy_PromotionPageId(promotionPageId);
		} catch (Exception e) {
			System.out.println(e);
		}
		
	}

}
