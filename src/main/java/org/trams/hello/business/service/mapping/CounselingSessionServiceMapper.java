/*
 * Created on 17 thg 2 2017 ( Time 10:07:34 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.business.service.mapping;

import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import org.trams.hello.bean.CounselingSession;
import org.trams.hello.bean.jpa.CounselingSessionEntity;
import org.trams.hello.bean.jpa.CounselorEntity;
import org.trams.hello.bean.jpa.PaymentHistoryEntity;
import org.trams.hello.bean.jpa.UserEntity;

/**
 * Mapping between entity beans and display beans.
 */
@Component
public class CounselingSessionServiceMapper extends AbstractServiceMapper {

	/**
	 * ModelMapper : bean to bean mapping library.
	 */
	private ModelMapper modelMapper;
	
	/**
	 * Constructor.
	 */
	public CounselingSessionServiceMapper() {
		modelMapper = new ModelMapper();
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}

	/**
	 * Mapping from 'CounselingSessionEntity' to 'CounselingSession'
	 * @param counselingSessionEntity
	 */
	public CounselingSession mapCounselingSessionEntityToCounselingSession(CounselingSessionEntity counselingSessionEntity) {
		if(counselingSessionEntity == null) {
			return null;
		}

		//--- Generic mapping 
		CounselingSession counselingSession = map(counselingSessionEntity, CounselingSession.class);

		//--- Link mapping ( link to PaymentHistory )
		if(counselingSessionEntity.getPaymentHistory() != null) {
			counselingSession.setPaymentId(counselingSessionEntity.getPaymentHistory().getId());
		}
		//--- Link mapping ( link to User )
		if(counselingSessionEntity.getUser() != null) {
			counselingSession.setUserId(counselingSessionEntity.getUser().getId());
		}
		//--- Link mapping ( link to Counselor )
		if(counselingSessionEntity.getCounselor() != null) {
			counselingSession.setCounselorId(counselingSessionEntity.getCounselor().getId());
		}
		return counselingSession;
	}
	
	/**
	 * Mapping from 'CounselingSession' to 'CounselingSessionEntity'
	 * @param counselingSession
	 * @param counselingSessionEntity
	 */
	public void mapCounselingSessionToCounselingSessionEntity(CounselingSession counselingSession, CounselingSessionEntity counselingSessionEntity) {
		if(counselingSession == null) {
			return;
		}

		//--- Generic mapping 
		map(counselingSession, counselingSessionEntity);

		//--- Link mapping ( link : counselingSession )
		if( hasLinkToPaymentHistory(counselingSession) ) {
			PaymentHistoryEntity paymentHistory1 = new PaymentHistoryEntity();
			paymentHistory1.setId( counselingSession.getPaymentId() );
			counselingSessionEntity.setPaymentHistory( paymentHistory1 );
		} else {
			counselingSessionEntity.setPaymentHistory( null );
		}

		//--- Link mapping ( link : counselingSession )
		if( hasLinkToUser(counselingSession) ) {
			UserEntity user2 = new UserEntity();
			user2.setId( counselingSession.getUserId() );
			counselingSessionEntity.setUser( user2 );
		} else {
			counselingSessionEntity.setUser( null );
		}

		//--- Link mapping ( link : counselingSession )
		if( hasLinkToCounselor(counselingSession) ) {
			CounselorEntity counselor3 = new CounselorEntity();
			counselor3.setId( counselingSession.getCounselorId() );
			counselingSessionEntity.setCounselor( counselor3 );
		} else {
			counselingSessionEntity.setCounselor( null );
		}

	}
	
	/**
	 * Verify that PaymentHistory id is valid.
	 * @param PaymentHistory PaymentHistory
	 * @return boolean
	 */
	private boolean hasLinkToPaymentHistory(CounselingSession counselingSession) {
		if(counselingSession.getPaymentId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that User id is valid.
	 * @param User User
	 * @return boolean
	 */
	private boolean hasLinkToUser(CounselingSession counselingSession) {
		if(counselingSession.getUserId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that Counselor id is valid.
	 * @param Counselor Counselor
	 * @return boolean
	 */
	private boolean hasLinkToCounselor(CounselingSession counselingSession) {
		if(counselingSession.getCounselorId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected ModelMapper getModelMapper() {
		return modelMapper;
	}

	protected void setModelMapper(ModelMapper modelMapper) {
		this.modelMapper = modelMapper;
	}

}