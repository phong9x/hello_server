/*
 * Created on 23 thg 11 2016 ( Time 13:38:12 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.business.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.annotation.Resource;
import javax.persistence.EntityManager;
import javax.persistence.Query;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import org.trams.hello.bean.Faq;
import org.trams.hello.bean.PageCustom;
import org.trams.hello.bean.jpa.FaqEntity;
import org.trams.hello.business.service.FaqService;
import org.trams.hello.business.service.mapping.FaqServiceMapper;
import org.trams.hello.data.repository.jpa.FaqJpaRepository;
/**
 * Implementation of FaqService
 */
@Component
@Transactional
public class FaqServiceImpl implements FaqService {

	@Resource
	private FaqJpaRepository faqJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private FaqServiceMapper faqServiceMapper;
	
	@Autowired
	private EntityManager em;
	
	@Override
	public Faq findById(Integer id) {
		FaqEntity faqEntity = faqJpaRepository.findOne(id);
		return faqServiceMapper.mapFaqEntityToFaq(faqEntity);
	}
	
	@Override
	public FaqEntity findByUserId(Integer id) {
		return faqJpaRepository.findOne(id);
	}

	@Override
	public Page<FaqEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return faqJpaRepository.findAll(request);
	}

	@Override
	public List<Faq> findAll() {
		Iterable<FaqEntity> entities = faqJpaRepository.findAll();
		List<Faq> beans = new ArrayList<Faq>();
		for(FaqEntity faqEntity : entities) {
			beans.add(faqServiceMapper.mapFaqEntityToFaq(faqEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = faqJpaRepository.count();
		return count;
	}

	@Override
	public Faq save(Faq faq) {
		return update(faq) ;
	}

	@Override
	public Faq create(Faq faq) {
/*
		FaqEntity faqEntity = faqJpaRepository.findOne(faq.getId());
		if( faqEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		faqEntity = new FaqEntity();
		faqServiceMapper.mapFaqToFaqEntity(faq, faqEntity);
		FaqEntity faqEntitySaved = faqJpaRepository.save(faqEntity);
		return faqServiceMapper.mapFaqEntityToFaq(faqEntitySaved);
*/
		FaqEntity faqEntity = new FaqEntity();
		faqServiceMapper.mapFaqToFaqEntity(faq, faqEntity);
		FaqEntity faqEntitySaved = faqJpaRepository.save(faqEntity);
		return faqServiceMapper.mapFaqEntityToFaq(faqEntitySaved);
	}

	@Override
	public Faq update(Faq faq) {
		FaqEntity faqEntity = faqJpaRepository.findOne(faq.getId());
		faqServiceMapper.mapFaqToFaqEntity(faq, faqEntity);
		FaqEntity faqEntitySaved = faqJpaRepository.save(faqEntity);
		return faqServiceMapper.mapFaqEntityToFaq(faqEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		faqJpaRepository.delete(id);
	}

	public FaqJpaRepository getFaqJpaRepository() {
		return faqJpaRepository;
	}

	public void setFaqJpaRepository(FaqJpaRepository faqJpaRepository) {
		this.faqJpaRepository = faqJpaRepository;
	}

	public FaqServiceMapper getFaqServiceMapper() {
		return faqServiceMapper;
	}

	public void setFaqServiceMapper(FaqServiceMapper faqServiceMapper) {
		this.faqServiceMapper = faqServiceMapper;
	}

	@Override
	public Page<FaqEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return faqJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}
	
	

	@Override
	public Page<FaqEntity> findByTitle(String title, Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return faqJpaRepository.findByTitle(title, pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}
	
	@Override
	public List<FaqEntity> findByTitleOrContent(String keyword) {
		try {
			return faqJpaRepository.findByTitleOrContent("%"+keyword+"%");
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	
	@Override
	public List<Faq> listByIsShow() {
		List<FaqEntity> entities = faqJpaRepository.listByIsShow();
		List<Faq> beans = new ArrayList<>();
		for (FaqEntity f : entities) {
			beans.add(faqServiceMapper.mapFaqEntityToFaq(f));
		}
		return beans;
	}
	
	@Override
	public List<Faq> listInCounselorWeb() {
		List<FaqEntity> entities = faqJpaRepository.listInCounselorWeb();
		List<Faq> beans = new ArrayList<>();
		for (FaqEntity f : entities) {
			beans.add(faqServiceMapper.mapFaqEntityToFaq(f));
		}
		return beans;
	}

	@Override
	public List<Faq> listInAdmin(Short type) {
		List<FaqEntity> entities = faqJpaRepository.listInAdmin(type);
		List<Faq> beans = new ArrayList<>();
		for (FaqEntity f : entities) {
			beans.add(faqServiceMapper.mapFaqEntityToFaq(f));
		}
		return beans;
	}
	
	@Override
	public List<Faq> listByIsShowAndType(Short type) {
		List<FaqEntity> entities = faqJpaRepository.listByIsShowAndType(type);
		List<Faq> beans = new ArrayList<>();
		for (FaqEntity f : entities) {
			beans.add(faqServiceMapper.mapFaqEntityToFaq(f));
		}
		return beans;
	}
	
	@Override
	public PageCustom<FaqEntity> faqs(String orderBy, Integer type, String keyword, Integer page, Integer size) {
		try {
			String str_select 	= "";
			String str_from 	= "";
			String str_where 	= "";
			String select_count = " select count(*) ";
			String str_limit 	= " ORDER BY f.create_date DESC LIMIT " + (page-1)*size +"," + size ;
			
			str_select = " SELECT f.id, f.title, f.content, f.view_count, f.os_display, f.is_show, f.type, f.create_date, f.update_date ";
			str_from   = " FROM faq f LEFT JOIN user u ON f.user_id = u.id ";
			str_where  = " WHERE f.type = "+type+" ";
			
			String key = "%" + keyword + "%";
			
			if (orderBy.equals("title")) {
				str_where = str_where + " and f.title LIKE '"+key+"' ";
			} else if (orderBy.equals("content")) {
				str_where = str_where + " and f.content LIKE '"+key+"' ";
			} else {
				str_where = str_where + " and u.fullname LIKE '"+key+"' ";
			}
			
			System.out.println("sel: " + str_select + str_from + str_where + str_limit);
			Query q = em.createNativeQuery(str_select + str_from + str_where + str_limit);
			System.out.println(str_select + str_from + str_where + str_limit);
			@SuppressWarnings("unchecked")
			List<Object[]> rss = q.getResultList();
			List<FaqEntity> faqs = new ArrayList<>();
			for (Object[] i : rss) {
				FaqEntity entity = new FaqEntity();
				entity.setId((Integer) i[0]);
				entity.setTitle((String) i[1]);
				entity.setContent((String) i[2]);
				entity.setViewCount((Integer)i[3]);
				entity.setOsDisplay((Integer) i[4]);
				entity.setIsShow((Short) i[5]);
				entity.setType((Short) i[6]);
				entity.setCreateDate((Date) i[7]);
				entity.setUpdateDate((Date) i[8]);
				faqs.add(entity);
			}
			Query c = em.createNativeQuery(select_count + str_from + str_where);
			Long totalCount = ((Number) c.getSingleResult()).longValue();
			PageCustom<FaqEntity> pageCustom = new PageCustom<>(faqs, totalCount, page, size);
			return pageCustom;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public Integer findFaqIdMax(Short type) {
		Integer ele = faqJpaRepository.findFaqIdMax(type);
		if (ele == null) {
			ele = 0;
		}
		return ele;
	}

}
