/*
 * Created on 14 Mar 2017 ( Time 14:52:42 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import org.trams.hello.bean.MenuAdminLevel2;
import org.trams.hello.bean.jpa.MenuAdminLevel1Entity;
import org.trams.hello.bean.jpa.MenuAdminLevel2Entity;
import org.trams.hello.business.service.MenuAdminLevel2Service;
import org.trams.hello.business.service.mapping.MenuAdminLevel2ServiceMapper;
import org.trams.hello.data.repository.jpa.MenuAdminLevel2JpaRepository;
/**
 * Implementation of MenuAdminLevel2Service
 */
@Component
@Transactional
public class MenuAdminLevel2ServiceImpl implements MenuAdminLevel2Service {

	@Resource
	private MenuAdminLevel2JpaRepository menuAdminLevel2JpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private MenuAdminLevel2ServiceMapper menuAdminLevel2ServiceMapper;
	
	@Override
	public MenuAdminLevel2 findById(Integer id) {
		MenuAdminLevel2Entity menuAdminLevel2Entity = menuAdminLevel2JpaRepository.findOne(id);
		return menuAdminLevel2ServiceMapper.mapMenuAdminLevel2EntityToMenuAdminLevel2(menuAdminLevel2Entity);
	}

	@Override
	public Page<MenuAdminLevel2Entity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return menuAdminLevel2JpaRepository.findAll(request);
	}

	@Override
	public List<MenuAdminLevel2> findAll() {
		Iterable<MenuAdminLevel2Entity> entities = menuAdminLevel2JpaRepository.findAll();
		List<MenuAdminLevel2> beans = new ArrayList<MenuAdminLevel2>();
		for(MenuAdminLevel2Entity menuAdminLevel2Entity : entities) {
			beans.add(menuAdminLevel2ServiceMapper.mapMenuAdminLevel2EntityToMenuAdminLevel2(menuAdminLevel2Entity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = menuAdminLevel2JpaRepository.count();
		return count;
	}

	@Override
	public MenuAdminLevel2 save(MenuAdminLevel2 menuAdminLevel2) {
		return update(menuAdminLevel2) ;
	}

	@Override
	public MenuAdminLevel2 create(MenuAdminLevel2 menuAdminLevel2) {
/*
		MenuAdminLevel2Entity menuAdminLevel2Entity = menuAdminLevel2JpaRepository.findOne(menuAdminLevel2.getId());
		if( menuAdminLevel2Entity != null ) {
			throw new IllegalStateException("already.exists");
		}

		menuAdminLevel2Entity = new MenuAdminLevel2Entity();
		menuAdminLevel2ServiceMapper.mapMenuAdminLevel2ToMenuAdminLevel2Entity(menuAdminLevel2, menuAdminLevel2Entity);
		MenuAdminLevel2Entity menuAdminLevel2EntitySaved = menuAdminLevel2JpaRepository.save(menuAdminLevel2Entity);
		return menuAdminLevel2ServiceMapper.mapMenuAdminLevel2EntityToMenuAdminLevel2(menuAdminLevel2EntitySaved);
*/
		MenuAdminLevel2Entity menuAdminLevel2Entity = new MenuAdminLevel2Entity();
		menuAdminLevel2ServiceMapper.mapMenuAdminLevel2ToMenuAdminLevel2Entity(menuAdminLevel2, menuAdminLevel2Entity);
		MenuAdminLevel2Entity menuAdminLevel2EntitySaved = menuAdminLevel2JpaRepository.save(menuAdminLevel2Entity);
		return menuAdminLevel2ServiceMapper.mapMenuAdminLevel2EntityToMenuAdminLevel2(menuAdminLevel2EntitySaved);
	}

	@Override
	public MenuAdminLevel2 update(MenuAdminLevel2 menuAdminLevel2) {
		MenuAdminLevel2Entity menuAdminLevel2Entity = menuAdminLevel2JpaRepository.findOne(menuAdminLevel2.getId());
		menuAdminLevel2ServiceMapper.mapMenuAdminLevel2ToMenuAdminLevel2Entity(menuAdminLevel2, menuAdminLevel2Entity);
		MenuAdminLevel2Entity menuAdminLevel2EntitySaved = menuAdminLevel2JpaRepository.save(menuAdminLevel2Entity);
		return menuAdminLevel2ServiceMapper.mapMenuAdminLevel2EntityToMenuAdminLevel2(menuAdminLevel2EntitySaved);
	}

	@Override
	public void delete(Integer id) {
		menuAdminLevel2JpaRepository.delete(id);
	}

	public MenuAdminLevel2JpaRepository getMenuAdminLevel2JpaRepository() {
		return menuAdminLevel2JpaRepository;
	}

	public void setMenuAdminLevel2JpaRepository(MenuAdminLevel2JpaRepository menuAdminLevel2JpaRepository) {
		this.menuAdminLevel2JpaRepository = menuAdminLevel2JpaRepository;
	}

	public MenuAdminLevel2ServiceMapper getMenuAdminLevel2ServiceMapper() {
		return menuAdminLevel2ServiceMapper;
	}

	public void setMenuAdminLevel2ServiceMapper(MenuAdminLevel2ServiceMapper menuAdminLevel2ServiceMapper) {
		this.menuAdminLevel2ServiceMapper = menuAdminLevel2ServiceMapper;
	}

	@Override
	public Page<MenuAdminLevel2Entity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return menuAdminLevel2JpaRepository.listPaging(pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	

	@Override
	public Page<MenuAdminLevel2Entity> findByName(String name, Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return menuAdminLevel2JpaRepository.findByName(name, pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	
	@Override
	public List<MenuAdminLevel2Entity> findByIsShow(Integer isShow) {
		try {
			PageRequest pageable = new PageRequest(0, Integer.MAX_VALUE, new Sort(new Order(Direction.ASC, "menuAdminLevel1.id"), new Order(Direction.ASC, "id")));
			return menuAdminLevel2JpaRepository.findByIsShow(isShow,pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public void updateNotShow() {
		try {
			menuAdminLevel2JpaRepository.updateNotShow();
		} catch (Exception e) {
			e.printStackTrace();
		}
		
	}

	@Override
	public void updateShow(Integer[] id) {
		try {
			menuAdminLevel2JpaRepository.updateShow(id);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	@Cacheable("menu-admin")
	@Override
	public List<MenuAdminLevel1Entity> getAdminMenu() {
		try {
			PageRequest pageable = new PageRequest(0, Integer.MAX_VALUE, new Sort(new Order(Direction.ASC, "menuAdminLevel1.id")));
			List<MenuAdminLevel2Entity> list =  menuAdminLevel2JpaRepository.findAllMenu(pageable);
			List<MenuAdminLevel1Entity> result = new ArrayList<>();
			MenuAdminLevel1Entity menu = new MenuAdminLevel1Entity();
			List<MenuAdminLevel2Entity> menu2 = new ArrayList<>();
			for (int i = 0; i < list.size(); i++) {
				if(i == 0){
					menu = list.get(i).getMenuAdminLevel1();
					menu2.add(list.get(i));
				}else if(menu != list.get(i).getMenuAdminLevel1()){
					menu.setListOfMenuAdminLevel2(menu2);
					result.add(menu);
					menu2 = new ArrayList<>();
					menu = list.get(i).getMenuAdminLevel1();
					menu2.add(list.get(i));
				}else{
					menu2.add(list.get(i));
				}
				if(i == (list.size()-1)){
					menu.setListOfMenuAdminLevel2(menu2);
					result.add(menu);
				}
			}
			return result;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@CacheEvict("menu-admin")  
	@Override
	public void deleteCacheAdminMenu() {
		System.out.println("Delete cache menu admin....");
		
	}

	@Override
	public List<MenuAdminLevel2Entity> findAllMenu() {
		try {
			PageRequest pageable = new PageRequest(0, Integer.MAX_VALUE, new Sort(new Order(Direction.ASC, "menuAdminLevel1.id"), new Order(Direction.ASC, "id")));
			return menuAdminLevel2JpaRepository.findAllMenu(pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

}
