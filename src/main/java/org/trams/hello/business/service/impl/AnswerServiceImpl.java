/*
 * Created on 23 thg 11 2016 ( Time 13:38:11 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import org.trams.hello.bean.Answer;
import org.trams.hello.bean.jpa.AnswerEntity;
import org.trams.hello.business.service.AnswerService;
import org.trams.hello.business.service.mapping.AnswerServiceMapper;
import org.trams.hello.data.repository.jpa.AnswerJpaRepository;
/**
 * Implementation of AnswerService
 */
@Component
@Transactional
public class AnswerServiceImpl implements AnswerService {

	@Resource
	private AnswerJpaRepository answerJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private AnswerServiceMapper answerServiceMapper;
	
	@Override
	public Answer findById(Integer id) {
		AnswerEntity answerEntity = answerJpaRepository.findOne(id);
		return answerServiceMapper.mapAnswerEntityToAnswer(answerEntity);
	}

	@Override
	public Page<AnswerEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return answerJpaRepository.findAll(request);
	}

	@Override
	public List<Answer> findAll() {
		Iterable<AnswerEntity> entities = answerJpaRepository.findAll();
		List<Answer> beans = new ArrayList<Answer>();
		for(AnswerEntity answerEntity : entities) {
			beans.add(answerServiceMapper.mapAnswerEntityToAnswer(answerEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = answerJpaRepository.count();
		return count;
	}

	@Override
	public Answer save(Answer answer) {
		return update(answer) ;
	}

	@Override
	public Answer create(Answer answer) {
/*
		AnswerEntity answerEntity = answerJpaRepository.findOne(answer.getId());
		if( answerEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		answerEntity = new AnswerEntity();
		answerServiceMapper.mapAnswerToAnswerEntity(answer, answerEntity);
		AnswerEntity answerEntitySaved = answerJpaRepository.save(answerEntity);
		return answerServiceMapper.mapAnswerEntityToAnswer(answerEntitySaved);
*/
		AnswerEntity answerEntity = new AnswerEntity();
		answerServiceMapper.mapAnswerToAnswerEntity(answer, answerEntity);
		AnswerEntity answerEntitySaved = answerJpaRepository.save(answerEntity);
		return answerServiceMapper.mapAnswerEntityToAnswer(answerEntitySaved);
	}

	@Override
	public Answer update(Answer answer) {
		AnswerEntity answerEntity = answerJpaRepository.findOne(answer.getId());
		answerServiceMapper.mapAnswerToAnswerEntity(answer, answerEntity);
		AnswerEntity answerEntitySaved = answerJpaRepository.save(answerEntity);
		return answerServiceMapper.mapAnswerEntityToAnswer(answerEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		answerJpaRepository.delete(id);
	}

	public AnswerJpaRepository getAnswerJpaRepository() {
		return answerJpaRepository;
	}

	public void setAnswerJpaRepository(AnswerJpaRepository answerJpaRepository) {
		this.answerJpaRepository = answerJpaRepository;
	}

	public AnswerServiceMapper getAnswerServiceMapper() {
		return answerServiceMapper;
	}

	public void setAnswerServiceMapper(AnswerServiceMapper answerServiceMapper) {
		this.answerServiceMapper = answerServiceMapper;
	}

	@Override
	public Page<AnswerEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return answerJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public List<Answer> getAnswersByQuestionId(Integer questionId) {
		List<AnswerEntity> rs = answerJpaRepository.getAnswersByQuestionId(questionId);
		List<Answer> beans = new ArrayList<>();
		for (AnswerEntity answerEntity : rs) {
			beans.add(answerServiceMapper.mapAnswerEntityToAnswer(answerEntity));
		}
		return beans;
	}

	@Override
	public List<AnswerEntity> listAnswersByQuestionId(Integer questionId) {
		try {
			return answerJpaRepository.listAnswersByQuestionId(questionId);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}
	
	


}
