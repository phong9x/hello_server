/*
 * Created on 23 thg 11 2016 ( Time 13:38:12 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.business.service;

import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

import org.springframework.data.domain.Page;
import org.trams.hello.bean.CounselingSession;
import org.trams.hello.bean.CounselingStatistics;
import org.trams.hello.bean.LoginStatistics;
import org.trams.hello.bean.PageCustom;
import org.trams.hello.bean.ProfitData;
import org.trams.hello.bean.api.MyReservation;
import org.trams.hello.bean.api.ReservationTime;
import org.trams.hello.bean.api.ReservedAndCounselingType;
import org.trams.hello.bean.jpa.CounselingSessionEntity;
import org.trams.hello.bean.jpa.ReservationEntity;
import org.trams.hello.bean.web.counselingCenter.CounselorSummary;
import org.trams.hello.bean.web.counselor.UserCounselingSession;
import org.trams.hello.web.bean.search.SearchProfitBusiness;
import org.trams.hello.web.bean.search.SearchProfitCounselor;
import org.trams.hello.web.bean.search.SearchProfitCounselorCenter;
import org.trams.hello.web.bean.search.SearchStatistics;

/**
 * Business Service Interface for entity CounselingSession.
 */
public interface CounselingSessionService { 

	/**
	 * Loads an entity from the database using its Primary Key
	 * @param id
	 * @return entity
	 */
	CounselingSession findById( Integer id  ) ;
	
	CounselingSessionEntity findOne( Integer id  ) ;

	/** 
	 * Loads all entities.
	 * @return all entities
	 */
	List<CounselingSession> findAll();
	
	/**
	 * Loads entities in page number.
	 * @return entities
	 */

	Page<CounselingSessionEntity> findAll(Integer page);

	/**
	 * Count all entities
	 * @return Long
	 */
	Long countTotal();
	

	/**
	 * Saves the given entity in the database (create or update)
	 * @param entity
	 * @return entity
	 */
	CounselingSession save(CounselingSession entity);

	/**
	 * Updates the given entity in the database
	 * @param entity
	 * @return
	 */
	CounselingSession update(CounselingSession entity);

	/**
	 * Creates the given entity in the database
	 * @param entity
	 * @return
	 */
	CounselingSession create(CounselingSession entity);
	
	/**
	 * Deletes an entity using its Primary Key
	 * @param id
	 */
	void delete( Integer id );

	CounselingSessionEntity saveOrUpdate(CounselingSessionEntity counselingSessionEntity);

	Page<CounselingSessionEntity> listPaging(Integer page,Integer size);
	
	void update_isDelete(Integer id);

	Integer countSatisfactionEvaluation(Integer userId, Integer counselorId);

	Integer countCounselingSession(Integer userId);
	
	Integer countCounselingSessionHaveCounselYet(Integer userId, Date date);

	Integer countCounselingSessionOfCounselor(Integer counselorId, Short status);

	Page<CounselingSessionEntity> filter(Map<String, Object> params);

	long count(Map<String, Object> params);

	PageCustom<ReservationEntity> filterReservation(Date startTime, Date endTime, Short[] userType, Integer businessId, Integer yearContract, Integer subBusineesId,String[] os, Short[] status, Short[] paymentId, String type, String key, String orderBy, Integer page, Integer size);
	
	PageCustom<ReservationEntity> filterCounseling(String startTime, String endTime, Short[] userType, Integer businessId, Integer yearContract, Integer subBusineesId , Short[] status, Short[] paymentId, String type, String key, String orderBy, Integer page, Integer size);

	List<CounselingSession> findEarliestCounselingTime(Integer userId);
	
	List<MyReservation> counselingSessionEntitiesByUserId(Integer userId);
	
	List<MyReservation> counselingSessionHistoryByUserId(Integer page, Integer size, Integer userId);
	
	MyReservation myReservationByCounselingSessionId(Integer counselingSessionId, Integer userId);
	
	Integer totalCompletedCounselingHistoryByUser( Integer userId);
	
	Integer[] getYearCompletedCounseling(Integer userId);
	
	TreeMap< Float , ReservedAndCounselingType> listStartTimeCounselingSSByDay(Date dayConvert, Integer counselorId);
	
	List<ReservationTime> getReservedList(Date dayConvert, Integer counselorId);

	List<UserCounselingSession> listCounselingSSInAWeek(Integer counselorId);
	
	List<UserCounselingSession> listCounselingSessionByCounselorId(Integer counselorId);
	
	CounselingSession findByIdAnhUserId(Integer userId, Integer revertionId);
	
	int countBy(Date start, Date end, Integer counselorId);
	
	int countByNow(Date now, Integer counselorId);
	
	List<CounselingSessionEntity> listNotificaionByMinutes(Integer year, Integer month, Integer day, Integer hour, Integer minute);

	List<CounselingSessionEntity> listNotificaionByHour(Integer year, Integer month, Integer day, Integer hour, Integer minute);
	
	List<Object[]> listRequiredSatisfaction(Integer year, Integer month, Integer day, Integer hour ,Integer minute);
	
	List<Long> listTimeByDate(Integer couselorId, Date date);
	
	Integer countTotalCouseling(Date startTime, Date endTime, Integer couselorId);
	
	void updateCounselingFinished();
	
	void updateCounselingNotFinished();

	CounselingSessionEntity findOneByRoomId(String roomId);
	
	Float totalPointByCounselor(Integer counselorId);
	
	PageCustom<ProfitData> filterProfitDataCounselor(SearchProfitCounselor s, Integer page, Integer size);
	
	PageCustom<ProfitData> filterProfitDataCounselorCenter(SearchProfitCounselorCenter s, Integer page, Integer size);
	
	PageCustom<ProfitData> filterProfitDataBusiness(SearchProfitBusiness s, Integer page, Integer size);
	
	PageCustom<CounselingStatistics> filterStatistics(SearchStatistics s, Integer page, Integer size);
	
	PageCustom<CounselingStatistics> filterStatisticsByWeek(SearchStatistics s);
	
	PageCustom<CounselingStatistics> filterStatisticsByHour(SearchStatistics s);
	
	PageCustom<LoginStatistics> filterStatisticsByMember(SearchStatistics s);
	
	Integer totalCounselingByCounselingCenterId(String date, Integer counselingId);
	
	Integer totalCounseledsByCounselingCenterId(String date, Integer counselingId);

	PageCustom<CounselorSummary> listCounselorSummary(Integer counselingCenterId, String keyword, String start_search, String endSearch, Integer type_payment_coin, Integer type_payment_voucher, String typeSearch, String typeOrder, Integer page,Integer size);
	
	CounselingSessionEntity findOneByPreRoomId(String roomId);
	
	List<CounselingSessionEntity> listCounselingSessionByFromAndToDate(Integer totalMinuteFromDate, Integer totalMinuteToDate, Date now, Integer counselor);
	
	Integer getNewestCounselingSessionNotStatisficEvolution(Integer userId, Integer counselorId);
	
	Integer countInProgressCounseling(Integer counselorId);
	
	Date getLatestCounselingEndTime(Integer counselorId);
	
	Date getClosestCounselingStartTime(Integer counselorId);
}
