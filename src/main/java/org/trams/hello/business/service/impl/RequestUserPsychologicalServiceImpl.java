/*
 * Created on 12 Apr 2017 ( Time 16:01:58 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.business.service.impl;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.annotation.Resource;
import javax.persistence.EntityManager;
import javax.persistence.Query;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import org.trams.hello.bean.PageCustom;
import org.trams.hello.bean.RequestUserPsychological;
import org.trams.hello.bean.api.PsychologicalTest;
import org.trams.hello.bean.api.RequestUserPsychologicalApi;
import org.trams.hello.bean.jpa.RequestUserPsychologicalEntity;
import org.trams.hello.business.service.RequestUserPsychologicalService;
import org.trams.hello.business.service.mapping.RequestUserPsychologicalServiceMapper;
import org.trams.hello.data.repository.jpa.RequestUserPsychologicalJpaRepository;
import org.trams.hello.web.bean.search.SearchCommon;
import org.trams.hello.web.bean.search.SearchPsychological;
import org.trams.hello.web.common.ApplicationDefine;
import org.trams.hello.web.common.utils.DataUtils;
/**
 * Implementation of RequestUserPsychologicalService
 */
@Component
@Transactional
public class RequestUserPsychologicalServiceImpl implements RequestUserPsychologicalService {

	@Resource
	private RequestUserPsychologicalJpaRepository requestUserPsychologicalJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private RequestUserPsychologicalServiceMapper requestUserPsychologicalServiceMapper;
	
	@Autowired
	private EntityManager em;
	
	@Override
	public RequestUserPsychological findById(Integer id) {
		RequestUserPsychologicalEntity requestUserPsychologicalEntity = requestUserPsychologicalJpaRepository.findOne(id);
		return requestUserPsychologicalServiceMapper.mapRequestUserPsychologicalEntityToRequestUserPsychological(requestUserPsychologicalEntity);
	}

	@Override
	public Page<RequestUserPsychologicalEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return requestUserPsychologicalJpaRepository.findAll(request);
	}

	@Override
	public List<RequestUserPsychological> findAll() {
		Iterable<RequestUserPsychologicalEntity> entities = requestUserPsychologicalJpaRepository.findAll();
		List<RequestUserPsychological> beans = new ArrayList<RequestUserPsychological>();
		for(RequestUserPsychologicalEntity requestUserPsychologicalEntity : entities) {
			beans.add(requestUserPsychologicalServiceMapper.mapRequestUserPsychologicalEntityToRequestUserPsychological(requestUserPsychologicalEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = requestUserPsychologicalJpaRepository.count();
		return count;
	}

	@Override
	public RequestUserPsychological save(RequestUserPsychological requestUserPsychological) {
		return update(requestUserPsychological) ;
	}

	@Override
	public RequestUserPsychological create(RequestUserPsychological requestUserPsychological) {
/*
		RequestUserPsychologicalEntity requestUserPsychologicalEntity = requestUserPsychologicalJpaRepository.findOne(requestUserPsychological.getId());
		if( requestUserPsychologicalEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		requestUserPsychologicalEntity = new RequestUserPsychologicalEntity();
		requestUserPsychologicalServiceMapper.mapRequestUserPsychologicalToRequestUserPsychologicalEntity(requestUserPsychological, requestUserPsychologicalEntity);
		RequestUserPsychologicalEntity requestUserPsychologicalEntitySaved = requestUserPsychologicalJpaRepository.save(requestUserPsychologicalEntity);
		return requestUserPsychologicalServiceMapper.mapRequestUserPsychologicalEntityToRequestUserPsychological(requestUserPsychologicalEntitySaved);
*/
		RequestUserPsychologicalEntity requestUserPsychologicalEntity = new RequestUserPsychologicalEntity();
		requestUserPsychologicalServiceMapper.mapRequestUserPsychologicalToRequestUserPsychologicalEntity(requestUserPsychological, requestUserPsychologicalEntity);
		RequestUserPsychologicalEntity requestUserPsychologicalEntitySaved = requestUserPsychologicalJpaRepository.save(requestUserPsychologicalEntity);
		return requestUserPsychologicalServiceMapper.mapRequestUserPsychologicalEntityToRequestUserPsychological(requestUserPsychologicalEntitySaved);
	}

	@Override
	public RequestUserPsychological update(RequestUserPsychological requestUserPsychological) {
		RequestUserPsychologicalEntity requestUserPsychologicalEntity = requestUserPsychologicalJpaRepository.findOne(requestUserPsychological.getId());
		requestUserPsychologicalServiceMapper.mapRequestUserPsychologicalToRequestUserPsychologicalEntity(requestUserPsychological, requestUserPsychologicalEntity);
		RequestUserPsychologicalEntity requestUserPsychologicalEntitySaved = requestUserPsychologicalJpaRepository.save(requestUserPsychologicalEntity);
		return requestUserPsychologicalServiceMapper.mapRequestUserPsychologicalEntityToRequestUserPsychological(requestUserPsychologicalEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		requestUserPsychologicalJpaRepository.delete(id);
	}

	public RequestUserPsychologicalJpaRepository getRequestUserPsychologicalJpaRepository() {
		return requestUserPsychologicalJpaRepository;
	}

	public void setRequestUserPsychologicalJpaRepository(RequestUserPsychologicalJpaRepository requestUserPsychologicalJpaRepository) {
		this.requestUserPsychologicalJpaRepository = requestUserPsychologicalJpaRepository;
	}

	public RequestUserPsychologicalServiceMapper getRequestUserPsychologicalServiceMapper() {
		return requestUserPsychologicalServiceMapper;
	}

	public void setRequestUserPsychologicalServiceMapper(RequestUserPsychologicalServiceMapper requestUserPsychologicalServiceMapper) {
		this.requestUserPsychologicalServiceMapper = requestUserPsychologicalServiceMapper;
	}

	@Override
	public Page<RequestUserPsychologicalEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return requestUserPsychologicalJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	

	@Override
	public Page<RequestUserPsychologicalApi> listPagingByUserId(Integer page, Integer size, Integer userId) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return requestUserPsychologicalJpaRepository.listPagingByUserId(userId, pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public RequestUserPsychologicalEntity findOne(Integer id) {
		return requestUserPsychologicalJpaRepository.findOne(id);
	}

	@Override
	public List<PsychologicalTest> listRequestUserPsyByUserId(Integer userId) {
		try {
			List<Object[]> rs = requestUserPsychologicalJpaRepository.listRequestUserPsyByUserId(userId);
			List<PsychologicalTest> list = new ArrayList<>();
			for (Object[] objects : rs) {
				PsychologicalTest p = new PsychologicalTest();
				p.setNameCouselor((String) objects[0]);
				p.setCouselorId((Integer) objects[1]);
				p.setRequestPsychological((Date) objects[2]);
				p.setId((Integer) objects[3]);
				p.setEffectPaymentPsychological((Date) objects[4]);
				String testName = (String) objects[5];
				testName = testName.replace(",", ", ");
				p.setTestName(testName);
				p.setFee((Integer) objects[6]);
				p.setTotalTest(((BigInteger) objects[7]).intValue());
				
				list.add(p);
			}
			
			return list;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public RequestUserPsychologicalEntity findByIdEntity(Integer id) {
		return requestUserPsychologicalJpaRepository.findByIdEntity(id);
	}

	@Override
	public PageCustom<PsychologicalTest> filterAdmin(SearchPsychological s, Integer size) {
		try {
			String selectColumn ="SELECT R.id as requestId,"
					+ "(SELECT GROUP_CONCAT(P.test_name SEPARATOR '</p><p>') FROM user_psychological UP INNER JOIN psychological_test_setting P ON UP.psychological_test_id = P.id WHERE UP.request_psychological_id = R.id) AS testName, "
					+ "U.id as userId, U.fullname as userName, "
					+ "C.id as counselorId, C.fullname as fullname, "
					+ "R.request_psychological, "
					+ "R.effect_payment_psychological, "
					+ "R.payment_psychological, "
					+ "R.status ";
			
			String from ="FROM (";
			String requestTable = "SELECT * FROM request_user_psychological R WHERE 1=1 ";
			
			
			//start and end date
			if (s.getStartDate() != null) {
				requestTable += " AND DATE_FORMAT(R.request_psychological, '%Y-%m-%d') >= '" + s.getStartDate() + "'";
			}
			if (s.getEndDate() != null) {
				requestTable += " AND DATE_FORMAT(R.request_psychological, '%Y-%m-%d') <= '" + s.getEndDate() + "'";
			}
			
			//status
			if(!s.isStatusCancelPayment()){
				requestTable +=" AND R.status != "+ ApplicationDefine.RequestPsychological_Status.CancelPayment.getCode();
			}
			if(!s.isStatusCancelRequest()){
				requestTable +=" AND R.status != "+ ApplicationDefine.RequestPsychological_Status.CancelRequest.getCode();
			}
			if(!s.isStatusFinishPayment()){
				requestTable +=" AND R.status != "+ ApplicationDefine.RequestPsychological_Status.CompletePayment.getCode();
			}
			if(!s.isStatusWaiverPayment()){
				requestTable +=" AND R.status != "+ ApplicationDefine.RequestPsychological_Status.WaiverPayment.getCode();
			}
			if(!s.isStatusWaiting()){
				requestTable +=" AND R.status != "+ ApplicationDefine.RequestPsychological_Status.WatitngPayment.getCode();
			}
			
			//test Id
			if(s.getTestId() != null){
				requestTable +=" AND EXISTS(SELECT id FROM user_psychological WHERE request_psychological_id = R.id AND psychological_test_id = "+ s.getTestId() + ")";
			}
			
					
			String where ="WHERE 1=1 ";
			
			// keyword
			SearchCommon common = s.getCommon();
			if (common.getKeyWord() != null) {
				String key = common.getType();
				String keyWord = "%" + common.getKeyWord() + "%";
				if ("testName".equals(key)) {
					requestTable +=" AND EXISTS(SELECT id FROM user_psychological UP, psychological_test_setting PTS WHERE UP.request_psychological_id = R.id AND UP.psychological_test_id = PTS.id AND PTS.test_name like '" + keyWord + "' )";
				} else if ("memberName".equals(key)) {
					where += " AND U.fullname like '" + keyWord + "' ";
				}else{
					where += " AND C.fullname like '" + keyWord + "' ";
				}
			}

			String fromJoin = "INNER JOIN user C ON R.counselor_id = C.id  "
					+ "INNER JOIN user U on U.id = R.user_id ";
			
			// order
			String orderBy = " ORDER BY R.create_date DESC";

			// end search condition
			from += requestTable + ") R " + fromJoin;
			Integer offset = DataUtils.getOffset(common.getPage(), size);
			String limit = " LIMIT " + offset + ", " + size;
			String selectCount = "SELECT COUNT(*) "+ from + where;
			String selectList = selectColumn + from + where + orderBy +limit;
			
			//count row data 
			Query countQuery = em.createNativeQuery(selectCount);
			Long totalCount = ((Number) countQuery.getSingleResult()).longValue();
			
			//get list data
			Query listQuery = em.createNativeQuery(selectList);
			List<Object[]> result = listQuery.getResultList();
			List<PsychologicalTest> list = new ArrayList<>();
			for (Object[] i : result) {
				PsychologicalTest p = new PsychologicalTest();
				p.setId((Integer) i[0]);
				p.setTestName((String)i[1]);
				p.setUserId((Integer)i[2]);
				p.setNameUser((String)i[3]);
				p.setCouselorId((Integer)i[4]);
				p.setNameCouselor((String)i[5]);
				p.setRequestPsychological((Date)i[6]);
				p.setEffectPaymentPsychological((Date)i[7]);
				p.setPaymentPsychological((Date)i[8]);
				p.setStatus((Short)i[9]);
				list.add(p);
			}
			PageCustom<PsychologicalTest> pageCustom = new PageCustom<PsychologicalTest>(list, totalCount, common.getPage(), size);
			return pageCustom;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
			
		}

	}

	@Override
	public void updateRequestNotPayment(Date date) {
		try {
			requestUserPsychologicalJpaRepository.updateRequestNotPayment(date);
		} catch (Exception e) {
			e.printStackTrace();
		}
		
	}

}
