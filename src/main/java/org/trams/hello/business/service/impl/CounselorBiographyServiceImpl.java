/*
 * Created on 9 thg 1 2017 ( Time 15:56:09 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import org.trams.hello.bean.CounselorBiography;
import org.trams.hello.bean.jpa.CounselorBiographyEntity;
import org.trams.hello.business.service.CounselorBiographyService;
import org.trams.hello.business.service.mapping.CounselorBiographyServiceMapper;
import org.trams.hello.data.repository.jpa.CounselorBiographyJpaRepository;
/**
 * Implementation of CounselorBiographyService
 */
@Component
@Transactional
public class CounselorBiographyServiceImpl implements CounselorBiographyService {

	@Resource
	private CounselorBiographyJpaRepository counselorBiographyJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private CounselorBiographyServiceMapper counselorBiographyServiceMapper;
	
	@Override
	public CounselorBiography findById(Integer id) {
		CounselorBiographyEntity counselorBiographyEntity = counselorBiographyJpaRepository.findOne(id);
		return counselorBiographyServiceMapper.mapCounselorBiographyEntityToCounselorBiography(counselorBiographyEntity);
	}

	@Override
	public Page<CounselorBiographyEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return counselorBiographyJpaRepository.findAll(request);
	}

	@Override
	public List<CounselorBiography> findAll() {
		Iterable<CounselorBiographyEntity> entities = counselorBiographyJpaRepository.findAll();
		List<CounselorBiography> beans = new ArrayList<CounselorBiography>();
		for(CounselorBiographyEntity counselorBiographyEntity : entities) {
			beans.add(counselorBiographyServiceMapper.mapCounselorBiographyEntityToCounselorBiography(counselorBiographyEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = counselorBiographyJpaRepository.count();
		return count;
	}

	@Override
	public CounselorBiography save(CounselorBiography counselorBiography) {
		return update(counselorBiography) ;
	}

	@Override
	public CounselorBiography create(CounselorBiography counselorBiography) {
/*
		CounselorBiographyEntity counselorBiographyEntity = counselorBiographyJpaRepository.findOne(counselorBiography.getId());
		if( counselorBiographyEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		counselorBiographyEntity = new CounselorBiographyEntity();
		counselorBiographyServiceMapper.mapCounselorBiographyToCounselorBiographyEntity(counselorBiography, counselorBiographyEntity);
		CounselorBiographyEntity counselorBiographyEntitySaved = counselorBiographyJpaRepository.save(counselorBiographyEntity);
		return counselorBiographyServiceMapper.mapCounselorBiographyEntityToCounselorBiography(counselorBiographyEntitySaved);
*/
		CounselorBiographyEntity counselorBiographyEntity = new CounselorBiographyEntity();
		counselorBiographyServiceMapper.mapCounselorBiographyToCounselorBiographyEntity(counselorBiography, counselorBiographyEntity);
		CounselorBiographyEntity counselorBiographyEntitySaved = counselorBiographyJpaRepository.save(counselorBiographyEntity);
		return counselorBiographyServiceMapper.mapCounselorBiographyEntityToCounselorBiography(counselorBiographyEntitySaved);
	}

	@Override
	public CounselorBiography update(CounselorBiography counselorBiography) {
		CounselorBiographyEntity counselorBiographyEntity = counselorBiographyJpaRepository.findOne(counselorBiography.getId());
		counselorBiographyServiceMapper.mapCounselorBiographyToCounselorBiographyEntity(counselorBiography, counselorBiographyEntity);
		CounselorBiographyEntity counselorBiographyEntitySaved = counselorBiographyJpaRepository.save(counselorBiographyEntity);
		return counselorBiographyServiceMapper.mapCounselorBiographyEntityToCounselorBiography(counselorBiographyEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		counselorBiographyJpaRepository.delete(id);
	}

	public CounselorBiographyJpaRepository getCounselorBiographyJpaRepository() {
		return counselorBiographyJpaRepository;
	}

	public void setCounselorBiographyJpaRepository(CounselorBiographyJpaRepository counselorBiographyJpaRepository) {
		this.counselorBiographyJpaRepository = counselorBiographyJpaRepository;
	}

	public CounselorBiographyServiceMapper getCounselorBiographyServiceMapper() {
		return counselorBiographyServiceMapper;
	}

	public void setCounselorBiographyServiceMapper(CounselorBiographyServiceMapper counselorBiographyServiceMapper) {
		this.counselorBiographyServiceMapper = counselorBiographyServiceMapper;
	}

	@Override
	public Page<CounselorBiographyEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return counselorBiographyJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public void deleteCounselorBiography(Integer counselorId) {
		try {
			counselorBiographyJpaRepository.deleteCounselorBiography(counselorId);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@Override
	public List<CounselorBiographyEntity> findByCounselorId(Integer id) {
		return counselorBiographyJpaRepository.findByCounselorId(id);
	}

	@Override
	public List<CounselorBiographyEntity> listPagingByCounselorId(Integer counselorId) {
		try {
			return counselorBiographyJpaRepository.listPagingByCounselorId(counselorId);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	


}
