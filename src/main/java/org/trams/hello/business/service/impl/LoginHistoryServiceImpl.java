/*
 * Created on 13 Jun 2017 ( Time 10:15:34 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.business.service.impl;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import javax.annotation.Resource;
import javax.persistence.EntityManager;
import javax.persistence.Query;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import org.trams.hello.bean.AccessDevice;
import org.trams.hello.bean.CounselorRanking;
import org.trams.hello.bean.LoginHistory;
import org.trams.hello.bean.LoginStatistics;
import org.trams.hello.bean.PageCustom;
import org.trams.hello.bean.jpa.LoginHistoryEntity;
import org.trams.hello.business.service.LoginHistoryService;
import org.trams.hello.business.service.mapping.LoginHistoryServiceMapper;
import org.trams.hello.data.repository.jpa.LoginHistoryJpaRepository;
import org.trams.hello.web.bean.search.SearchStatistics;
import org.trams.hello.web.common.utils.DataUtils;

/**
 * Implementation of LoginHistoryService
 */
@Component
@Transactional
public class LoginHistoryServiceImpl implements LoginHistoryService {

	@Autowired
	private EntityManager em;

	@Resource
	private LoginHistoryJpaRepository loginHistoryJpaRepository;

	private static final Integer PAGE_SIZE = 15;

	@Resource
	private LoginHistoryServiceMapper loginHistoryServiceMapper;

	@Override
	public LoginHistory findById(Long id) {
		LoginHistoryEntity loginHistoryEntity = loginHistoryJpaRepository.findOne(id);
		return loginHistoryServiceMapper.mapLoginHistoryEntityToLoginHistory(loginHistoryEntity);
	}

	@Override
	public Page<LoginHistoryEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE, new Sort(new Order(Direction.DESC, "id")));
		return loginHistoryJpaRepository.findAll(request);
	}

	@Override
	public List<LoginHistory> findAll() {
		Iterable<LoginHistoryEntity> entities = loginHistoryJpaRepository.findAll();
		List<LoginHistory> beans = new ArrayList<LoginHistory>();
		for (LoginHistoryEntity loginHistoryEntity : entities) {
			beans.add(loginHistoryServiceMapper.mapLoginHistoryEntityToLoginHistory(loginHistoryEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * 
	 * @return Long
	 */
	public Long countTotal() {
		Long count = loginHistoryJpaRepository.count();
		return count;
	}

	@Override
	public LoginHistory save(LoginHistory loginHistory) {
		return update(loginHistory);
	}

	@Override
	public LoginHistory create(LoginHistory loginHistory) {
		/*
		 * LoginHistoryEntity loginHistoryEntity =
		 * loginHistoryJpaRepository.findOne(loginHistory.getId()); if(
		 * loginHistoryEntity != null ) { throw new
		 * IllegalStateException("already.exists"); }
		 * 
		 * loginHistoryEntity = new LoginHistoryEntity();
		 * loginHistoryServiceMapper.mapLoginHistoryToLoginHistoryEntity(
		 * loginHistory, loginHistoryEntity); LoginHistoryEntity
		 * loginHistoryEntitySaved =
		 * loginHistoryJpaRepository.save(loginHistoryEntity); return
		 * loginHistoryServiceMapper.mapLoginHistoryEntityToLoginHistory(
		 * loginHistoryEntitySaved);
		 */
		LoginHistoryEntity loginHistoryEntity = new LoginHistoryEntity();
		loginHistoryServiceMapper.mapLoginHistoryToLoginHistoryEntity(loginHistory, loginHistoryEntity);
		LoginHistoryEntity loginHistoryEntitySaved = loginHistoryJpaRepository.save(loginHistoryEntity);
		return loginHistoryServiceMapper.mapLoginHistoryEntityToLoginHistory(loginHistoryEntitySaved);
	}

	@Override
	public LoginHistory update(LoginHistory loginHistory) {
		LoginHistoryEntity loginHistoryEntity = loginHistoryJpaRepository.findOne(loginHistory.getId());
		loginHistoryServiceMapper.mapLoginHistoryToLoginHistoryEntity(loginHistory, loginHistoryEntity);
		LoginHistoryEntity loginHistoryEntitySaved = loginHistoryJpaRepository.save(loginHistoryEntity);
		return loginHistoryServiceMapper.mapLoginHistoryEntityToLoginHistory(loginHistoryEntitySaved);
	}

	@Override
	public void delete(Long id) {
		loginHistoryJpaRepository.delete(id);
	}

	public LoginHistoryJpaRepository getLoginHistoryJpaRepository() {
		return loginHistoryJpaRepository;
	}

	public void setLoginHistoryJpaRepository(LoginHistoryJpaRepository loginHistoryJpaRepository) {
		this.loginHistoryJpaRepository = loginHistoryJpaRepository;
	}

	public LoginHistoryServiceMapper getLoginHistoryServiceMapper() {
		return loginHistoryServiceMapper;
	}

	public void setLoginHistoryServiceMapper(LoginHistoryServiceMapper loginHistoryServiceMapper) {
		this.loginHistoryServiceMapper = loginHistoryServiceMapper;
	}

	@Override
	public Page<LoginHistoryEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page - 1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return loginHistoryJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public Page<LoginHistoryEntity> listPagingByUserId(Integer page, Integer size, Integer userId) {
		try {
			PageRequest pageable = new PageRequest(page - 1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return loginHistoryJpaRepository.listPagingByUserId(userId, pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	@Override
	public LoginHistory listPagingByDeviceIdAndUserIdAndCreateDate(String deviceId, Integer userId, Date date) {
		try {
			return loginHistoryServiceMapper.mapLoginHistoryEntityToLoginHistory(loginHistoryJpaRepository.listPagingByDeviceIdAndUserIdAndCreateDate(deviceId, userId, date)) ;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public int countByDeviceIdAndUserIdAndCreateDate(String deviceId, Integer userId, Date date) {
		try {
			return loginHistoryJpaRepository.countByDeviceIdAndUserIdAndCreateDate(deviceId, userId, date);
		} catch (Exception e) {
			e.printStackTrace();
			return 0;
		}
	}

	@Override
	public PageCustom<LoginStatistics> filterStatistics(SearchStatistics s, Integer page, Integer size) {
		try {
			String ATTRIBUTE = "";
			if (s.getType().equals("weekly")) {
				ATTRIBUTE = "WEEK(l.create_date)";
			} else if (s.getType().equals("monthly")) {
				ATTRIBUTE = "MONTH(l.create_date)";
			} else {
				ATTRIBUTE = "l.create_date";
			}
			String SELECT = "SELECT " + ATTRIBUTE + ", COUNT(DISTINCT l.device_id) as device, COUNT(DISTINCT l.user_id) as userId, "
					+ "COUNT(CASE WHEN l.gender = 1 THEN 1 ELSE NULL END) as male,"
					+ "COUNT(CASE WHEN l.gender = 0 THEN 1 ELSE NULL END) as female,"
					+ "COUNT(CASE WHEN l.age = 1 THEN 1 ELSE NULL END) as age1,"
					+ "COUNT(CASE WHEN l.age = 2 THEN 1 ELSE NULL END) as age2,"
					+ "COUNT(CASE WHEN l.age = 3 THEN 1 ELSE NULL END) as age3,"
					+ "COUNT(CASE WHEN l.age = 4 THEN 1 ELSE NULL END) as age4,"
					+ "COUNT(CASE WHEN l.age = 5 THEN 1 ELSE NULL END) as age5, "
					+ "COUNT(CASE WHEN l.type_user = 1 THEN 1 ELSE NULL END) as normal, "
					+ "COUNT(CASE WHEN l.type_user = 2 THEN 1 ELSE NULL END) as business ";
			
			String FROM = "FROM login_history l ";
			
			String WHERE = "WHERE 1=1 ";
			
			if (s.getType().equals("weekly")) {
				WHERE += " AND WEEK(l.create_date) >= " + s.getFromWeek() + " AND WEEK(l.create_date) <= " + s.getToWeek() + " ";
				WHERE += " AND YEAR(l.create_date)=" + s.getYearWeekly();
			} else if (s.getType().equals("monthly")) {
				WHERE += " AND MONTH(l.create_date) >= " + s.getFromMonth() + " AND MONTH(l.create_date) <= " + s.getToMonth()+ " ";
				WHERE += " AND YEAR(l.create_date)=" + s.getYearMonthly()+" ";
			} else {
				WHERE += " AND l.create_date >= '" + s.getStartDate() + "' AND l.create_date <= '" + s.getEndDate()+"' ";
			}
			
			if(s.isAndroid() != s.isIos()){
				if(s.isAndroid()){
					WHERE += " AND type_os = 'android' ";
				}
				if(s.isIos()){
					WHERE += " AND type_os = 'ios' ";
				}
			}
			
			String GROUP_BY = " GROUP BY " + ATTRIBUTE + " ";
			String ORDER_BY = " ORDER BY " + ATTRIBUTE + " DESC";
			List<LoginStatistics> listPage = new ArrayList<>();
			Integer totalDevice = 0;
			Integer totalId = 0;
			Integer totalMale = 0;
			Integer totalFemale = 0;
			Integer totalAge10 = 0;
			Integer totalAge20 = 0;
			Integer totalAge30 = 0;
			Integer totalAge40 = 0;
			Integer totalAge50 = 0;
			Integer totalMemberNormal = 0;
			Integer totalMemberBusiness = 0;

			System.out.println(SELECT + FROM + WHERE + GROUP_BY +ORDER_BY);
			@SuppressWarnings("unused")
			Query q = em.createNativeQuery(SELECT + FROM + WHERE + GROUP_BY+ ORDER_BY);
			List<Object[]> listObject = q.getResultList();
			Integer index = 0;
			Calendar cal = Calendar.getInstance();
			
			if (s.getType().equals("weekly")) {
				//get data by week
				for (int i = s.getToWeek(); i >= s.getFromWeek(); i--) {

					Calendar startWeek = Calendar.getInstance();
					startWeek.set(Calendar.WEEK_OF_YEAR, i);
					startWeek.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY);
					Calendar endWeek = Calendar.getInstance();
					endWeek.set(Calendar.WEEK_OF_YEAR, i+1);
					endWeek.set(Calendar.DAY_OF_WEEK, Calendar.SUNDAY);
					LoginStatistics l = new LoginStatistics();
					l.setTitle("W" + i + " (" + DataUtils.parseStringFromDate(startWeek.getTime(), "yyyy-MM-dd") + " ~ "
							+ DataUtils.parseStringFromDate(endWeek.getTime(), "yyyy-MM-dd") + ")");
					l.setTotalDevice(0);
					l.setTotalId(0);
					l.setPercent(0d);
					l.setTotalMale(0);
					l.setTotalFemale(0);
					l.setTotalAge10(0);
					l.setTotalAge20(0);
					l.setTotalAge30(0);
					l.setTotalAge40(0);
					l.setTotalAge50(0);
					l.setTotalMemberNormal(0);
					l.setTotalMemberBusiness(0);
					
					for (int j = index; j < listObject.size(); j++) {
						Object[] ob = listObject.get(j);
						Integer week =Integer.valueOf(ob[0].toString());
						if (week == i) {
							l.setTotalDevice(Integer.valueOf(ob[1].toString()));
							l.setTotalId(Integer.valueOf(ob[2].toString()));
							double d = Math.round(((float)l.getTotalId() / (float)l.getTotalDevice())*1000)/10d;
							l.setPercent(d);
							l.setTotalMale(Integer.valueOf(ob[3].toString()));
							l.setTotalFemale(Integer.valueOf(ob[4].toString()));
							l.setTotalAge10(Integer.valueOf(ob[5].toString()));
							l.setTotalAge20(Integer.valueOf(ob[6].toString()));
							l.setTotalAge30(Integer.valueOf(ob[7].toString()));
							l.setTotalAge40(Integer.valueOf(ob[8].toString()));
							l.setTotalAge50(Integer.valueOf(ob[9].toString()));
							l.setTotalMemberNormal(Integer.valueOf(ob[10].toString()));
							l.setTotalMemberBusiness(Integer.valueOf(ob[11].toString()));
							
							totalDevice += l.getTotalDevice();
							totalId +=	l.getTotalId();
							totalMale += l.getTotalMale();
							totalFemale += l.getTotalFemale();
							totalAge10 += l.getTotalAge10();
							totalAge20 += l.getTotalAge20();
							totalAge30 += l.getTotalAge30();
							totalAge40 += l.getTotalAge40();
							totalAge50 += l.getTotalAge50();
							totalMemberNormal += l.getTotalMemberNormal();
							totalMemberBusiness += l.getTotalMemberBusiness();
							
							index++;
						} else {
							
							break;
						}

					}
					listPage.add(l);
				}

			} else if (s.getType().equals("monthly")) {
				//get data by month
				for (int i = s.getToMonth(); i >= s.getFromMonth(); i--) {

					LoginStatistics l = new LoginStatistics();
					if (i < 10) {
						l.setTitle(s.getYearMonthly() + "-0" + i);
					} else {
						l.setTitle(s.getYearMonthly() + "-" + i);
					}
					l.setTotalDevice(0);
					l.setTotalId(0);
					l.setPercent(0d);
					l.setTotalMale(0);
					l.setTotalFemale(0);
					l.setTotalAge10(0);
					l.setTotalAge20(0);
					l.setTotalAge30(0);
					l.setTotalAge40(0);
					l.setTotalAge50(0);
					l.setTotalMemberNormal(0);
					l.setTotalMemberBusiness(0);

					for (int j = index; j < listObject.size(); j++) {
						Object[] ob = listObject.get(j);
						Integer month =Integer.valueOf(ob[0].toString());
						if (month == i) {
							l.setTotalDevice(Integer.valueOf(ob[1].toString()));
							l.setTotalId(Integer.valueOf(ob[2].toString()));
							double d = Math.round(((float)l.getTotalId() / (float)l.getTotalDevice())*1000)/10d;
							l.setPercent(d);
							l.setTotalMale(Integer.valueOf(ob[3].toString()));
							l.setTotalFemale(Integer.valueOf(ob[4].toString()));
							l.setTotalAge10(Integer.valueOf(ob[5].toString()));
							l.setTotalAge20(Integer.valueOf(ob[6].toString()));
							l.setTotalAge30(Integer.valueOf(ob[7].toString()));
							l.setTotalAge40(Integer.valueOf(ob[8].toString()));
							l.setTotalAge50(Integer.valueOf(ob[9].toString()));
							l.setTotalMemberNormal(Integer.valueOf(ob[10].toString()));
							l.setTotalMemberBusiness(Integer.valueOf(ob[11].toString()));
							
							totalDevice += l.getTotalDevice();
							totalId +=	l.getTotalId();
							totalMale += l.getTotalMale();
							totalFemale += l.getTotalFemale();
							totalAge10 += l.getTotalAge10();
							totalAge20 += l.getTotalAge20();
							totalAge30 += l.getTotalAge30();
							totalAge40 += l.getTotalAge40();
							totalAge50 += l.getTotalAge50();
							totalMemberNormal += l.getTotalMemberNormal();
							totalMemberBusiness += l.getTotalMemberBusiness();
							
							index++;
						} else {
							
							break;
						}

					}
					listPage.add(l);
				}

			} else {
				//get data by date
				Calendar start = Calendar.getInstance();
				Calendar end = Calendar.getInstance();
				
				if(s.getStartDate() == null){
					start.setTime(new Date());
				}else{
					Date date = DataUtils.convertToDate(s.getStartDate(), "yyyy/MM/dd");
					start.setTime(date);
				}
				
				if(s.getStartDate() == null){
					start.setTime(new Date());
				}else{
					Date date = DataUtils.convertToDate(s.getEndDate(), "yyyy/MM/dd");
					end.setTime(date);
				}
				long dayDiff = DataUtils.daysBetween(start, end);
				
				for (long i = dayDiff; i >= 0; i--) {
					LoginStatistics l = new LoginStatistics();
					l.setTitle(DataUtils.parseStringFromDate(end.getTime(), "yyyy-MM-dd"));
					l.setTotalDevice(0);
					l.setTotalId(0);
					l.setPercent(0d);
					l.setTotalMale(0);
					l.setTotalFemale(0);
					l.setTotalAge10(0);
					l.setTotalAge20(0);
					l.setTotalAge30(0);
					l.setTotalAge40(0);
					l.setTotalAge50(0);
					l.setTotalMemberNormal(0);
					l.setTotalMemberBusiness(0);
					
					for (int j = index; j < listObject.size(); j++) {
						
						Object[] ob = listObject.get(j);
						cal.setTime((Date) ob[0]);
						System.out.println("date: "+ (Date) ob[0]);
						System.out.println("dayDiff: "+ DataUtils.daysBetween(end, cal));
						if (DataUtils.daysBetween(end, cal) == 0) {
							l.setTotalDevice(Integer.valueOf(ob[1].toString()));
							l.setTotalId(Integer.valueOf(ob[2].toString()));
							double d = Math.round(((float)l.getTotalId() / (float)l.getTotalDevice())*1000)/10d;
							l.setPercent(d);
							l.setTotalMale(Integer.valueOf(ob[3].toString()));
							l.setTotalFemale(Integer.valueOf(ob[4].toString()));
							l.setTotalAge10(Integer.valueOf(ob[5].toString()));
							l.setTotalAge20(Integer.valueOf(ob[6].toString()));
							l.setTotalAge30(Integer.valueOf(ob[7].toString()));
							l.setTotalAge40(Integer.valueOf(ob[8].toString()));
							l.setTotalAge50(Integer.valueOf(ob[9].toString()));
							l.setTotalMemberNormal(Integer.valueOf(ob[10].toString()));
							l.setTotalMemberBusiness(Integer.valueOf(ob[11].toString()));
							
							totalDevice += l.getTotalDevice();
							totalId +=	l.getTotalId();
							totalMale += l.getTotalMale();
							totalFemale += l.getTotalFemale();
							totalAge10 += l.getTotalAge10();
							totalAge20 += l.getTotalAge20();
							totalAge30 += l.getTotalAge30();
							totalAge40 += l.getTotalAge40();
							totalAge50 += l.getTotalAge50();
							totalMemberNormal += l.getTotalMemberNormal();
							totalMemberBusiness += l.getTotalMemberBusiness();
							
							
							index++;
						} else {
							break;
						}
					}
					listPage.add(l);
					end.add(Calendar.DATE, -1);
				}

			}

			List<Object> listOther = new ArrayList<>();
			listOther.add(totalDevice);
			listOther.add(totalId);
			if(totalDevice==0){
				listOther.add(0);
			}else{
				double d = Math.round(((float)totalId/(float)totalDevice)*1000)/10d;
				listOther.add(d);
			}
			listOther.add(totalMale);
			listOther.add(totalFemale);
			listOther.add(totalAge10);
			listOther.add(totalAge20);
			listOther.add(totalAge30);
			listOther.add(totalAge40);
			listOther.add(totalAge50);
			listOther.add(totalMemberNormal);
			listOther.add(totalMemberBusiness);

			return new PageCustom<>(listPage, Long.valueOf(listPage.size()), page, size, listOther);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
		
	}
	
	@Override
	public PageCustom<AccessDevice> filterAccessDeviceStatistics(SearchStatistics s, Integer page, Integer size) {
		try {
			
			String SELECT = "SELECT l.device_id, l.type_os, l.login_last, u.username ";
					
			String FROM   = "FROM login_history l "
						  + "INNER JOIN user u on u.id = l.user_id ";
			
			String WHERE ="";
			
			String GROUP_BY = "GROUP BY l.device_id, u.username ";
			
			String ORDER_BY = "ORDER BY l.create_date DESC ";
			
			Integer offset = DataUtils.getOffset(page, size);
			String LIMIT = " LIMIT " + offset + ", " + size; 
			
			if(s.getStartDate() != null){
				WHERE =" AND DATE(l.create_date) >= '"+s.getStartDate()+"' ";
			}
			
			if(s.getEndDate() != null){
				WHERE +=" AND DATE(l.create_date) <= '"+s.getEndDate()+"' ";
			}
			
			if(s.isIos() != s.isAndroid()){
				if(s.isIos()){
					WHERE +=" AND type_os = 'ios' ";
				}
				if(s.isAndroid()){
					WHERE +=" AND type_os = 'android' ";
				}
			}
			
			if(s.getCommon().getType() != null && s.getCommon().getKeyWord() != null){
				if(s.getCommon().getType().equals("memberId")){
					WHERE +=" AND u.username = '"+s.getCommon().getKeyWord()+"' ";
				}else{
					WHERE +=" AND l.device_id = '"+s.getCommon().getKeyWord()+"' ";
				}
			}
			
			List<CounselorRanking> listPage = new ArrayList<>();
			
			//select list
			@SuppressWarnings("unused")
			Query q = em.createNativeQuery(SELECT + FROM + WHERE + ORDER_BY + LIMIT);
			List<Object[]> listObject = q.getResultList();
			List<AccessDevice> list = new ArrayList<>();
			for (Object[] ob : listObject) {
				AccessDevice c = new AccessDevice();
				c.setDeviceId((String) ob[0]);
				c.setOsName((String) ob[1]);
				c.setLastLogin((Date) ob[2]);
				c.setUsername((String) ob[3]);
				list.add(c);
			}
			
			//select count
			Query queryCount = em.createNativeQuery("SELECT COUNT(DISTINCT l.device_id, l.login_last) "+ FROM + WHERE);
			Long totalCount = Long.valueOf(queryCount.getSingleResult().toString());
			return new PageCustom<AccessDevice>(list, totalCount, page, size);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

}
