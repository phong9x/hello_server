/*
 * Created on 20 thg 1 2017 ( Time 10:09:40 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import org.trams.hello.bean.CounselorTemp;
import org.trams.hello.bean.jpa.CounselorTempEntity;
import org.trams.hello.business.service.CounselorTempService;
import org.trams.hello.business.service.mapping.CounselorTempServiceMapper;
import org.trams.hello.data.repository.jpa.CounselorTempJpaRepository;
/**
 * Implementation of CounselorTempService
 */
@Component
@Transactional
public class CounselorTempServiceImpl implements CounselorTempService {

	@Resource
	private CounselorTempJpaRepository counselorTempJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private CounselorTempServiceMapper counselorTempServiceMapper;
	
	@Override
	public CounselorTemp findById(Integer id) {
		CounselorTempEntity counselorTempEntity = counselorTempJpaRepository.findOne(id);
		return counselorTempServiceMapper.mapCounselorTempEntityToCounselorTemp(counselorTempEntity);
	}
	
	@Override
	public CounselorTempEntity findOne(Integer id) {
		return counselorTempJpaRepository.findOne(id);
	}

	@Override
	public Page<CounselorTempEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return counselorTempJpaRepository.findAll(request);
	}

	@Override
	public List<CounselorTemp> findAll() {
		Iterable<CounselorTempEntity> entities = counselorTempJpaRepository.findAll();
		List<CounselorTemp> beans = new ArrayList<CounselorTemp>();
		for(CounselorTempEntity counselorTempEntity : entities) {
			beans.add(counselorTempServiceMapper.mapCounselorTempEntityToCounselorTemp(counselorTempEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = counselorTempJpaRepository.count();
		return count;
	}

	@Override
	public CounselorTemp save(CounselorTemp counselorTemp) {
		return update(counselorTemp) ;
	}

	@Override
	public CounselorTemp create(CounselorTemp counselorTemp) {
/*
		CounselorTempEntity counselorTempEntity = counselorTempJpaRepository.findOne(counselorTemp.getId());
		if( counselorTempEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		counselorTempEntity = new CounselorTempEntity();
		counselorTempServiceMapper.mapCounselorTempToCounselorTempEntity(counselorTemp, counselorTempEntity);
		CounselorTempEntity counselorTempEntitySaved = counselorTempJpaRepository.save(counselorTempEntity);
		return counselorTempServiceMapper.mapCounselorTempEntityToCounselorTemp(counselorTempEntitySaved);
*/
		CounselorTempEntity counselorTempEntity = new CounselorTempEntity();
		counselorTempServiceMapper.mapCounselorTempToCounselorTempEntity(counselorTemp, counselorTempEntity);
		CounselorTempEntity counselorTempEntitySaved = counselorTempJpaRepository.save(counselorTempEntity);
		return counselorTempServiceMapper.mapCounselorTempEntityToCounselorTemp(counselorTempEntitySaved);
	}

	@Override
	public CounselorTemp update(CounselorTemp counselorTemp) {
		CounselorTempEntity counselorTempEntity = counselorTempJpaRepository.findOne(counselorTemp.getId());
		counselorTempServiceMapper.mapCounselorTempToCounselorTempEntity(counselorTemp, counselorTempEntity);
		CounselorTempEntity counselorTempEntitySaved = counselorTempJpaRepository.save(counselorTempEntity);
		return counselorTempServiceMapper.mapCounselorTempEntityToCounselorTemp(counselorTempEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		counselorTempJpaRepository.delete(id);
	}

	public CounselorTempJpaRepository getCounselorTempJpaRepository() {
		return counselorTempJpaRepository;
	}

	public void setCounselorTempJpaRepository(CounselorTempJpaRepository counselorTempJpaRepository) {
		this.counselorTempJpaRepository = counselorTempJpaRepository;
	}

	public CounselorTempServiceMapper getCounselorTempServiceMapper() {
		return counselorTempServiceMapper;
	}

	public void setCounselorTempServiceMapper(CounselorTempServiceMapper counselorTempServiceMapper) {
		this.counselorTempServiceMapper = counselorTempServiceMapper;
	}

	@Override
	public Page<CounselorTempEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return counselorTempJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public void update_isDelete(Integer id) {
		 try {
			 counselorTempJpaRepository.update_isDelete(id);
			} catch (Exception e) {
				e.printStackTrace();
			}
	}
	
	@Override
	public Page<CounselorTempEntity> filter(Short[] status, String type, String key,Integer page, Integer size) {

		Specification<CounselorTempEntity> spec = new Specification<CounselorTempEntity>() {
			@Override
			public Predicate toPredicate(Root<CounselorTempEntity> root, CriteriaQuery<?> query, CriteriaBuilder cb) {
				List<Predicate> predicates = new ArrayList<>();
				
				if (status.length == 1) {
					Predicate predicate = cb.equal(root.get("status"), status[0]);
					predicates.add(predicate);
				} else {
					Predicate predicate = cb.or(cb.equal(root.get("status"), 0), cb.equal(root.get("status"), 2));
					predicates.add(predicate);
				}

				if (key != "" && key != null) {
					if (type.equals("fullname")) {
						Predicate predicate = cb.equal(root.get("counselor").get("user").get("fullname"), key);
						predicates.add(predicate);
					} else if (type.equals("adminName")) {
						Predicate predicate = cb.like(root.get("user").get("fullname"), key);
						predicates.add(predicate);
					}
				}
				//query.groupBy(root.get("counselor").get("id"));
				return cb.and(predicates.toArray(new Predicate[] {}));
			}

		};

		Order oder = new Order(Direction.DESC, "updateDate");
		PageRequest pageable = new PageRequest(page - 1, size, new Sort(oder));
		return counselorTempJpaRepository.findAll(spec, pageable);
	}


}
