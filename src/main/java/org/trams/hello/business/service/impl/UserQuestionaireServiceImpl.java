/*
 * Created on 7 Mar 2017 ( Time 16:52:28 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.business.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.persistence.EntityManager;
import javax.persistence.Query;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import org.trams.hello.bean.UserQuestionaire;
import org.trams.hello.bean.api.LatestSelfDiagnosisResult;
import org.trams.hello.bean.jpa.UserQuestionaireEntity;
import org.trams.hello.business.service.UserQuestionaireService;
import org.trams.hello.business.service.mapping.UserQuestionaireServiceMapper;
import org.trams.hello.data.repository.jpa.UserQuestionaireJpaRepository;
import org.trams.hello.web.common.utils.DataUtils;
/**
 * Implementation of UserQuestionaireService
 */
@Component
@Transactional
public class UserQuestionaireServiceImpl implements UserQuestionaireService {

	@Resource
	private UserQuestionaireJpaRepository userQuestionaireJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Autowired
	private EntityManager em;
	
	@Resource
	private UserQuestionaireServiceMapper userQuestionaireServiceMapper;
	
	@Override
	public UserQuestionaire findById(Integer id) {
		UserQuestionaireEntity userQuestionaireEntity = userQuestionaireJpaRepository.findOne(id);
		return userQuestionaireServiceMapper.mapUserQuestionaireEntityToUserQuestionaire(userQuestionaireEntity);
	}
	
	@Override
	public UserQuestionaireEntity findOne(Integer id) {
		return userQuestionaireJpaRepository.findOne(id);
	}

	@Override
	public Page<UserQuestionaireEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return userQuestionaireJpaRepository.findAll(request);
	}

	@Override
	public List<UserQuestionaire> findAll() {
		Iterable<UserQuestionaireEntity> entities = userQuestionaireJpaRepository.findAll();
		List<UserQuestionaire> beans = new ArrayList<UserQuestionaire>();
		for(UserQuestionaireEntity userQuestionaireEntity : entities) {
			beans.add(userQuestionaireServiceMapper.mapUserQuestionaireEntityToUserQuestionaire(userQuestionaireEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = userQuestionaireJpaRepository.count();
		return count;
	}

	@Override
	public UserQuestionaire save(UserQuestionaire userQuestionaire) {
		return update(userQuestionaire) ;
	}

	@Override
	public UserQuestionaire create(UserQuestionaire userQuestionaire) {
/*
		UserQuestionaireEntity userQuestionaireEntity = userQuestionaireJpaRepository.findOne(userQuestionaire.getId());
		if( userQuestionaireEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		userQuestionaireEntity = new UserQuestionaireEntity();
		userQuestionaireServiceMapper.mapUserQuestionaireToUserQuestionaireEntity(userQuestionaire, userQuestionaireEntity);
		UserQuestionaireEntity userQuestionaireEntitySaved = userQuestionaireJpaRepository.save(userQuestionaireEntity);
		return userQuestionaireServiceMapper.mapUserQuestionaireEntityToUserQuestionaire(userQuestionaireEntitySaved);
*/
		UserQuestionaireEntity userQuestionaireEntity = new UserQuestionaireEntity();
		userQuestionaireServiceMapper.mapUserQuestionaireToUserQuestionaireEntity(userQuestionaire, userQuestionaireEntity);
		UserQuestionaireEntity userQuestionaireEntitySaved = userQuestionaireJpaRepository.save(userQuestionaireEntity);
		return userQuestionaireServiceMapper.mapUserQuestionaireEntityToUserQuestionaire(userQuestionaireEntitySaved);
	}

	@Override
	public UserQuestionaire update(UserQuestionaire userQuestionaire) {
		UserQuestionaireEntity userQuestionaireEntity = userQuestionaireJpaRepository.findOne(userQuestionaire.getId());
		userQuestionaireServiceMapper.mapUserQuestionaireToUserQuestionaireEntity(userQuestionaire, userQuestionaireEntity);
		UserQuestionaireEntity userQuestionaireEntitySaved = userQuestionaireJpaRepository.save(userQuestionaireEntity);
		return userQuestionaireServiceMapper.mapUserQuestionaireEntityToUserQuestionaire(userQuestionaireEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		userQuestionaireJpaRepository.delete(id);
	}

	public UserQuestionaireJpaRepository getUserQuestionaireJpaRepository() {
		return userQuestionaireJpaRepository;
	}

	public void setUserQuestionaireJpaRepository(UserQuestionaireJpaRepository userQuestionaireJpaRepository) {
		this.userQuestionaireJpaRepository = userQuestionaireJpaRepository;
	}

	public UserQuestionaireServiceMapper getUserQuestionaireServiceMapper() {
		return userQuestionaireServiceMapper;
	}

	public void setUserQuestionaireServiceMapper(UserQuestionaireServiceMapper userQuestionaireServiceMapper) {
		this.userQuestionaireServiceMapper = userQuestionaireServiceMapper;
	}

	@Override
	public Page<UserQuestionaireEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return userQuestionaireJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	

	@Override
	public Page<UserQuestionaireEntity> listPagingByUserId(Integer page, Integer size, Integer userId) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return userQuestionaireJpaRepository.listPagingByUserId(userId, pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public Page<UserQuestionaireEntity> filter(Map<String, Object> params) {
		int page = Integer.parseInt(params.get("page").toString());
		int size = Integer.parseInt(params.get("size").toString());

		PageRequest pageable = new PageRequest(page - 1, size, new Sort(new Order(Direction.fromString(String.valueOf(params.getOrDefault("direction", "DESC"))), "createDate")));

		Specification<UserQuestionaireEntity> specification = new Specification<UserQuestionaireEntity>() {
			@Override
			public Predicate toPredicate(Root<UserQuestionaireEntity> root, CriteriaQuery<?> criteriaQuery, CriteriaBuilder criteriaBuilder) {

				List<Predicate> predicates = new ArrayList<>();

				if (params.get("id") != null) {
					Integer id = Integer.parseInt(params.get("id").toString());
					predicates.add(
							criteriaBuilder.equal(root.get("id"), id)
					);
				}
				if (params.get("userId") != null) {
					Integer userId = Integer.parseInt(params.get("userId").toString());
					predicates.add(
							criteriaBuilder.equal(root.join("user").get("id"), userId)
					);
				}
				if (params.get("counselorId") != null) {
					Integer counselorId = Integer.parseInt(params.get("counselorId").toString());
					predicates.add(
							criteriaBuilder.equal(root.join("counselor").get("id"), counselorId)
					);
				}
				if (params.get("types") != null) {
					Short[] types = (Short[]) params.get("types");
					predicates.add(
							criteriaBuilder.isTrue(root.get("type").in(types))
					);
				}

				if (predicates.isEmpty()) {
					return criteriaBuilder.isNotNull(root.get("id"));
				} else {
					return criteriaBuilder.and(predicates.toArray(new Predicate[] {}));
				}
			}
		};

		return userQuestionaireJpaRepository.findAll(specification, pageable);
	}
	
	
	@Override
	public Page<UserQuestionaireEntity> filterAdmin(Short typeQuestion, String startTime, String endTime, String type, String key, Integer page, Integer size, String orderBy) {
		PageRequest pageable = null;
		if(orderBy.equals("createDate") || orderBy.equals("point")){
			pageable = new PageRequest(page - 1, size, new Sort(new Order(Direction.DESC, orderBy)));
		}else{
			pageable = new PageRequest(page - 1, size, new Sort(new Order(Direction.ASC, orderBy)));
		}

		Specification<UserQuestionaireEntity> specification = new Specification<UserQuestionaireEntity>() {
			@Override
			public Predicate toPredicate(Root<UserQuestionaireEntity> root, CriteriaQuery<?> criteriaQuery, CriteriaBuilder cb) {

				List<Predicate> predicates = new ArrayList<>();

				Predicate typeQuestionEqual = cb.equal(root.get("type"), typeQuestion);
				predicates.add(typeQuestionEqual);
				
				if(startTime != null){
					Date start = DataUtils.parseDate(startTime , "yyyy/MM/dd");
					Predicate startDateLess = cb.greaterThanOrEqualTo(root.get("createDate"), start);
					predicates.add(startDateLess);
				}
				
				if(endTime != null){
					Date end = DataUtils.parseDate(endTime+" 23:59:59", "yyyy/MM/dd HH:mm:ss");
					Predicate endDateLess = cb.lessThanOrEqualTo(root.get("createDate"), end);
					predicates.add(endDateLess);
				}
				if(key!= null & !key.equals("")){
					String keyword = "%" + key + "%";
					if(type.equals("comment")){
						Predicate predicate = cb.like(root.get("comment"), keyword);
						predicates.add(predicate);
					}else if(type.equals("counselorName")){
						Predicate predicate = cb.like(root.get("counselor").get("user").get("fullname"), keyword);
						predicates.add(predicate);
					}else{
						Predicate predicate = cb.like(root.get("user").get("fullname"), keyword);
						predicates.add(predicate);
					}
				}
				
				if (predicates.isEmpty()) {
					return cb.isNotNull(root.get("id"));
				} else {
					return cb.and(predicates.toArray(new Predicate[] {}));
				}
			}
		};

		return userQuestionaireJpaRepository.findAll(specification, pageable);
	}

	@Override
	public Page<UserQuestionaireEntity> listPagingBy_QuestionaireTypeAndTimeAndUserNameAndCounselorNameAndComment( Short type,
			Date startTiem, Date endTime, String username, String counselorName,String comment, Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return userQuestionaireJpaRepository.listPagingBy_QuestionaireTypeAndTimeAndUserNameAndCounselorNameAndComment(type, startTiem, endTime, username, counselorName,comment, pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public Page<UserQuestionaireEntity> listPagingByType(Short type, Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return userQuestionaireJpaRepository.listPagingByType(type, pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public Page<UserQuestionaireEntity> listPagingBy_QuestionaireTypeAndUserNameAndCounselorNameAndComment(Short type,
			String username, String counselorName, String comment, Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return userQuestionaireJpaRepository.listPagingByType(type, pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	@Override
	public UserQuestionaire getHistoryMindcheck(Integer userId) {
		try {
			String str_clause = "SELECT u.id, u.user_id, u.counselor_id, u.questionaire_id, u.point, u.comment, u.recommend, u.type, u.update_date, u.create_date "
					+ " FROM user_questionaire u "
					+ " WHERE u.user_id = "+userId+" and u.type = 2 ORDER BY u.create_date DESC LIMIT 1";
			
			Query q = em.createNativeQuery(str_clause);
			Object[] result = (Object[]) q.getSingleResult();
			UserQuestionaire u = new UserQuestionaire();
			u.setId((Integer)result[0]);
			u.setUserId((Integer) result[1]);
			u.setCounselorId((Integer) result[2]);
			u.setQuestionaireId((Integer) result[3]);
			u.setPoint((Float) result[4]);
			u.setComment((String) result[5]);
			u.setRecommend((Short) result[6]);
			u.setType((Short) result[7]);
			u.setUpdateDate((Date) result[8]);
			u.setCreateDate((Date) result[9]);
			
			return u;
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}
	
	@Override
	public LatestSelfDiagnosisResult findLatestResult(Integer userId, Integer questionaireId) {
		try {
			String str_clause = "SELECT u.questionaire_id, s.content_result, uu.fullname, s.type_icon FROM user_questionaire u "
					+ " INNER JOIN self_diagnosis_results s ON u.self_diagnosis_results_id = s.id "
					+ " JOIN `user` uu on uu.id = u.user_id "
					+ " WHERE u.user_id = "+userId+" and u.type = 3 and u.questionaire_id = "+questionaireId+" "
					+ " ORDER BY u.create_date DESC limit 1 ";
			
			Query q = em.createNativeQuery(str_clause);
			if (q.getSingleResult() == null) {
				return null;
			} else {
				Object[] result = (Object[]) q.getSingleResult();
				LatestSelfDiagnosisResult l = new LatestSelfDiagnosisResult();
				l.setQuestionaireId((Integer) result[0]);
				l.setContentResult((String) result[1]);
				l.setUserName((String) result[2]);
				l.setTypeIcon((Short) result[3]);
				return l;
			}
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}
	
	@Override
	public Float totalPointCounsolerId(Integer counsolerId) {
		Float point = userQuestionaireJpaRepository.totalPointCounsolerId(counsolerId);
		return point;
	}

	@Override
	public List<UserQuestionaireEntity> listPagingByUserIdAndType(Integer userId, short type, Integer page, Integer size, String orderBy) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return userQuestionaireJpaRepository.listPagingByUserIdAndType(userId, type, pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public Integer totalTestMindCheckByUserId(Integer userId) {
		try {
			return userQuestionaireJpaRepository.totalTestMindCheckByUserId(userId);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public List<UserQuestionaireEntity> listSeftDiagnosisByUserIdAndType(Integer userId, short type) {
		try {
			PageRequest pageable = new PageRequest(0, Integer.MAX_VALUE, new Sort(new Order(Direction.DESC, "createDate")));
			return userQuestionaireJpaRepository.listSeftDiagnosisByUserIdAndType(userId, type, pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public Page<Object[]> listCommentByCounselorId(Integer counselorId, Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(0, Integer.MAX_VALUE, new Sort(new Order(Direction.DESC, "createDate")));
			return userQuestionaireJpaRepository.listCommentByCounselorId(counselorId, pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public Integer totalRecommendBYCounselorId(Integer counsolerId) {
		try {
			return userQuestionaireJpaRepository.totalRecommendBYCounselorId(counsolerId);
		} catch (Exception e) {
			e.printStackTrace();
			return 0;
		}
	}

	@Override
	public void updatePointByUserQuestionAire(Integer userQuestionId) {
		try {
			userQuestionaireJpaRepository.updatePointByUserQuestionAire(userQuestionId);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@Override
	public Page<UserQuestionaireEntity> listUserQuestionareByCouselorId(Integer couselorId, Short type,Integer page, Integer size ) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return userQuestionaireJpaRepository.listUserQuestionareByCouselorId(couselorId, type, pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public UserQuestionaireEntity getStatisficEvolutionBy_CounselingSessionId(Integer counselingSessionId) {
		try {
			PageRequest pageable = new PageRequest(0, 1, new Sort(new Order(Direction.DESC, "createDate")));
			List<UserQuestionaireEntity> list = userQuestionaireJpaRepository.getStatisficEvolutionBy_CounselingSessionId(counselingSessionId,pageable);
			if(list.size() > 0){
				return list.get(0);
			}else{
				return null;
			}
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public UserQuestionaireEntity getLatestMindcheckResult(Integer userId) {
		try {
			return userQuestionaireJpaRepository.getLatestMindcheckResult(userId);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

}
