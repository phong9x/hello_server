/*
 * Created on 11 thg 1 2017 ( Time 10:47:55 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import org.trams.hello.bean.Device;
import org.trams.hello.bean.jpa.DeviceEntity;
import org.trams.hello.business.service.DeviceService;
import org.trams.hello.business.service.mapping.DeviceServiceMapper;
import org.trams.hello.data.repository.jpa.DeviceJpaRepository;
import org.trams.hello.data.repository.jpa.UserJpaRepository;
/**
 * Implementation of DeviceService
 */
@Component
@Transactional
public class DeviceServiceImpl implements DeviceService {

	@Resource
	private DeviceJpaRepository deviceJpaRepository;
	@Resource
	private UserJpaRepository userJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private DeviceServiceMapper deviceServiceMapper;
	
	@Override
	public Device findById(Integer id) {
		DeviceEntity deviceEntity = deviceJpaRepository.findOne(id);
		return deviceServiceMapper.mapDeviceEntityToDevice(deviceEntity);
	}

	@Override
	public Page<DeviceEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return deviceJpaRepository.findAll(request);
	}

	@Override
	public List<Device> findAll() {
		Iterable<DeviceEntity> entities = deviceJpaRepository.findAll();
		List<Device> beans = new ArrayList<Device>();
		for(DeviceEntity deviceEntity : entities) {
			beans.add(deviceServiceMapper.mapDeviceEntityToDevice(deviceEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = deviceJpaRepository.count();
		return count;
	}

	@Override
	public Device save(Device device) {
		return update(device) ;
	}

	@Override
	public Device create(Device device) {
/*
		DeviceEntity deviceEntity = deviceJpaRepository.findOne(device.getId());
		if( deviceEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		deviceEntity = new DeviceEntity();
		deviceServiceMapper.mapDeviceToDeviceEntity(device, deviceEntity);
		DeviceEntity deviceEntitySaved = deviceJpaRepository.save(deviceEntity);
		return deviceServiceMapper.mapDeviceEntityToDevice(deviceEntitySaved);
*/
		DeviceEntity deviceEntity = new DeviceEntity();
		deviceServiceMapper.mapDeviceToDeviceEntity(device, deviceEntity);
		DeviceEntity deviceEntitySaved = deviceJpaRepository.save(deviceEntity);
		return deviceServiceMapper.mapDeviceEntityToDevice(deviceEntitySaved);
	}

	@Override
	public Device update(Device device) {
		DeviceEntity deviceEntity = deviceJpaRepository.findOne(device.getId());
		deviceServiceMapper.mapDeviceToDeviceEntity(device, deviceEntity);
		DeviceEntity deviceEntitySaved = deviceJpaRepository.save(deviceEntity);
		return deviceServiceMapper.mapDeviceEntityToDevice(deviceEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		deviceJpaRepository.delete(id);
	}

	public DeviceJpaRepository getDeviceJpaRepository() {
		return deviceJpaRepository;
	}

	public void setDeviceJpaRepository(DeviceJpaRepository deviceJpaRepository) {
		this.deviceJpaRepository = deviceJpaRepository;
	}

	public DeviceServiceMapper getDeviceServiceMapper() {
		return deviceServiceMapper;
	}

	public void setDeviceServiceMapper(DeviceServiceMapper deviceServiceMapper) {
		this.deviceServiceMapper = deviceServiceMapper;
	}

	@Override
	public Page<DeviceEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return deviceJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public void upsert(Integer userId, String uuid) {
		DeviceEntity deviceEntity = deviceJpaRepository.findByUuid(uuid);
		if (deviceEntity != null) {
			deviceEntity.setUuid(uuid);
		} else {
			deviceEntity = new DeviceEntity();
			deviceEntity.setUuid(uuid);
			deviceEntity.setUser(userJpaRepository.findOne(userId));
		}

		deviceJpaRepository.save(deviceEntity);
	}

}
