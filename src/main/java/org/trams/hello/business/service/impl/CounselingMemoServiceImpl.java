/*
 * Created on 8 thg 2 2017 ( Time 10:59:43 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.business.service.impl;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import org.trams.hello.bean.CounselingMemo;
import org.trams.hello.bean.jpa.CounselingMemoEntity;
import org.trams.hello.business.service.CounselingMemoService;
import org.trams.hello.business.service.mapping.CounselingMemoServiceMapper;
import org.trams.hello.data.repository.jpa.CounselingMemoJpaRepository;
/**
 * Implementation of CounselingMemoService
 */
@Component
@Transactional
public class CounselingMemoServiceImpl implements CounselingMemoService {

	@Resource
	private CounselingMemoJpaRepository counselingMemoJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private CounselingMemoServiceMapper counselingMemoServiceMapper;
	
	@Override
	public CounselingMemo findById(Integer id) {
		CounselingMemoEntity counselingMemoEntity = counselingMemoJpaRepository.findOne(id);
		return counselingMemoServiceMapper.mapCounselingMemoEntityToCounselingMemo(counselingMemoEntity);
	}

	@Override
	public Page<CounselingMemoEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return counselingMemoJpaRepository.findAll(request);
	}

	@Override
	public List<CounselingMemo> findAll() {
		Iterable<CounselingMemoEntity> entities = counselingMemoJpaRepository.findAll();
		List<CounselingMemo> beans = new ArrayList<CounselingMemo>();
		for(CounselingMemoEntity counselingMemoEntity : entities) {
			beans.add(counselingMemoServiceMapper.mapCounselingMemoEntityToCounselingMemo(counselingMemoEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = counselingMemoJpaRepository.count();
		return count;
	}

	@Override
	public CounselingMemo save(CounselingMemo counselingMemo) {
		return update(counselingMemo) ;
	}

	@Override
	public CounselingMemo create(CounselingMemo counselingMemo) {
/*
		CounselingMemoEntity counselingMemoEntity = counselingMemoJpaRepository.findOne(counselingMemo.getId());
		if( counselingMemoEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		counselingMemoEntity = new CounselingMemoEntity();
		counselingMemoServiceMapper.mapCounselingMemoToCounselingMemoEntity(counselingMemo, counselingMemoEntity);
		CounselingMemoEntity counselingMemoEntitySaved = counselingMemoJpaRepository.save(counselingMemoEntity);
		return counselingMemoServiceMapper.mapCounselingMemoEntityToCounselingMemo(counselingMemoEntitySaved);
*/
		CounselingMemoEntity counselingMemoEntity = new CounselingMemoEntity();
		counselingMemoServiceMapper.mapCounselingMemoToCounselingMemoEntity(counselingMemo, counselingMemoEntity);
		CounselingMemoEntity counselingMemoEntitySaved = counselingMemoJpaRepository.save(counselingMemoEntity);
		return counselingMemoServiceMapper.mapCounselingMemoEntityToCounselingMemo(counselingMemoEntitySaved);
	}

	@Override
	public CounselingMemo update(CounselingMemo counselingMemo) {
		CounselingMemoEntity counselingMemoEntity = counselingMemoJpaRepository.findOne(counselingMemo.getId());
		counselingMemoServiceMapper.mapCounselingMemoToCounselingMemoEntity(counselingMemo, counselingMemoEntity);
		CounselingMemoEntity counselingMemoEntitySaved = counselingMemoJpaRepository.save(counselingMemoEntity);
		return counselingMemoServiceMapper.mapCounselingMemoEntityToCounselingMemo(counselingMemoEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		counselingMemoJpaRepository.delete(id);
	}

	public CounselingMemoJpaRepository getCounselingMemoJpaRepository() {
		return counselingMemoJpaRepository;
	}

	public void setCounselingMemoJpaRepository(CounselingMemoJpaRepository counselingMemoJpaRepository) {
		this.counselingMemoJpaRepository = counselingMemoJpaRepository;
	}

	public CounselingMemoServiceMapper getCounselingMemoServiceMapper() {
		return counselingMemoServiceMapper;
	}

	public void setCounselingMemoServiceMapper(CounselingMemoServiceMapper counselingMemoServiceMapper) {
		this.counselingMemoServiceMapper = counselingMemoServiceMapper;
	}

	@Override
	public Page<CounselingMemoEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return counselingMemoJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public Page<CounselingMemoEntity> filter(Map<String, Object> params) {
		int page = Integer.parseInt(params.get("page").toString());
		int size = Integer.parseInt(params.get("size").toString());

		PageRequest pageable = new PageRequest(page - 1, size,
				new Sort(new Order(Direction.fromString(params.getOrDefault("direction", "DESC").toString()),
						params.getOrDefault("sorts", "createDate").toString())));

		Specification<CounselingMemoEntity> specification = new Specification<CounselingMemoEntity>() {
			@Override
			public Predicate toPredicate(Root<CounselingMemoEntity> root, CriteriaQuery<?> criteriaQuery, CriteriaBuilder criteriaBuilder) {

				List<Predicate> predicates = new ArrayList<>();

				if (params.get("id") != null) {
					Integer id = Integer.parseInt(params.get("id").toString());
					predicates.add(
							criteriaBuilder.equal(root.get("id"), id)
					);
				}
				if (params.get("userId") != null) {
					Integer userId = Integer.parseInt(params.get("userId").toString());
					predicates.add(
							criteriaBuilder.equal(root.join("user").get("id"), userId)
					);
				}
				if (params.get("counselorId") != null) {
					Integer counselorId = Integer.parseInt(params.get("counselorId").toString());
					predicates.add(
							criteriaBuilder.equal(root.join("counselor").get("id"), counselorId)
					);
				}

				if (predicates.isEmpty()) {
					return criteriaBuilder.isNotNull(root.get("id"));
				} else {
					return criteriaBuilder.and(predicates.toArray(new Predicate[] {}));
				}
			}
		};

		return counselingMemoJpaRepository.findAll(specification, pageable);
	}


}
