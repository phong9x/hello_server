/*
 * Created on 10 8ì›” 2017 ( Time 14:45:19 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.business.service.mapping;

import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import org.trams.hello.bean.CompanyUserVoucherHistory;
import org.trams.hello.bean.jpa.BusinessSubEntity;
import org.trams.hello.bean.jpa.CompanyUserVoucherHistoryEntity;
import org.trams.hello.bean.jpa.UserEntity;

/**
 * Mapping between entity beans and display beans.
 */
@Component
public class CompanyUserVoucherHistoryServiceMapper extends AbstractServiceMapper {

	/**
	 * ModelMapper : bean to bean mapping library.
	 */
	private ModelMapper modelMapper;
	
	/**
	 * Constructor.
	 */
	public CompanyUserVoucherHistoryServiceMapper() {
		modelMapper = new ModelMapper();
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}

	/**
	 * Mapping from 'CompanyUserVoucherHistoryEntity' to 'CompanyUserVoucherHistory'
	 * @param companyUserVoucherHistoryEntity
	 */
	public CompanyUserVoucherHistory mapCompanyUserVoucherHistoryEntityToCompanyUserVoucherHistory(CompanyUserVoucherHistoryEntity companyUserVoucherHistoryEntity) {
		if(companyUserVoucherHistoryEntity == null) {
			return null;
		}

		//--- Generic mapping 
		CompanyUserVoucherHistory companyUserVoucherHistory = map(companyUserVoucherHistoryEntity, CompanyUserVoucherHistory.class);

		//--- Link mapping ( link to User )
		if(companyUserVoucherHistoryEntity.getUser() != null) {
			companyUserVoucherHistory.setUserId(companyUserVoucherHistoryEntity.getUser().getId());
		}
		//--- Link mapping ( link to BusinessSub )
		if(companyUserVoucherHistoryEntity.getBusinessSub() != null) {
			companyUserVoucherHistory.setBusinessSubId(companyUserVoucherHistoryEntity.getBusinessSub().getId());
		}
		return companyUserVoucherHistory;
	}
	
	/**
	 * Mapping from 'CompanyUserVoucherHistory' to 'CompanyUserVoucherHistoryEntity'
	 * @param companyUserVoucherHistory
	 * @param companyUserVoucherHistoryEntity
	 */
	public void mapCompanyUserVoucherHistoryToCompanyUserVoucherHistoryEntity(CompanyUserVoucherHistory companyUserVoucherHistory, CompanyUserVoucherHistoryEntity companyUserVoucherHistoryEntity) {
		if(companyUserVoucherHistory == null) {
			return;
		}

		//--- Generic mapping 
		map(companyUserVoucherHistory, companyUserVoucherHistoryEntity);

		//--- Link mapping ( link : companyUserVoucherHistory )
		if( hasLinkToUser(companyUserVoucherHistory) ) {
			UserEntity user1 = new UserEntity();
			user1.setId( companyUserVoucherHistory.getUserId() );
			companyUserVoucherHistoryEntity.setUser( user1 );
		} else {
			companyUserVoucherHistoryEntity.setUser( null );
		}

		//--- Link mapping ( link : companyUserVoucherHistory )
		if( hasLinkToBusinessSub(companyUserVoucherHistory) ) {
			BusinessSubEntity businessSub2 = new BusinessSubEntity();
			businessSub2.setId( companyUserVoucherHistory.getBusinessSubId() );
			companyUserVoucherHistoryEntity.setBusinessSub( businessSub2 );
		} else {
			companyUserVoucherHistoryEntity.setBusinessSub( null );
		}

	}
	
	/**
	 * Verify that User id is valid.
	 * @param User User
	 * @return boolean
	 */
	private boolean hasLinkToUser(CompanyUserVoucherHistory companyUserVoucherHistory) {
		if(companyUserVoucherHistory.getUserId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that BusinessSub id is valid.
	 * @param BusinessSub BusinessSub
	 * @return boolean
	 */
	private boolean hasLinkToBusinessSub(CompanyUserVoucherHistory companyUserVoucherHistory) {
		if(companyUserVoucherHistory.getBusinessSubId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected ModelMapper getModelMapper() {
		return modelMapper;
	}

	protected void setModelMapper(ModelMapper modelMapper) {
		this.modelMapper = modelMapper;
	}

}