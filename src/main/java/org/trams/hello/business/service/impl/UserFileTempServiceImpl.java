/*
 * Created on 29 Apr 2017 ( Time 10:20:18 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import org.trams.hello.bean.UserFileTemp;
import org.trams.hello.bean.jpa.UserFileTempEntity;
import org.trams.hello.business.service.UserFileTempService;
import org.trams.hello.business.service.mapping.UserFileTempServiceMapper;
import org.trams.hello.data.repository.jpa.UserFileTempJpaRepository;
/**
 * Implementation of UserFileTempService
 */
@Component
@Transactional
public class UserFileTempServiceImpl implements UserFileTempService {

	@Resource
	private UserFileTempJpaRepository userFileTempJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private UserFileTempServiceMapper userFileTempServiceMapper;
	
	@Override
	public UserFileTemp findById(Integer id) {
		UserFileTempEntity userFileTempEntity = userFileTempJpaRepository.findOne(id);
		return userFileTempServiceMapper.mapUserFileTempEntityToUserFileTemp(userFileTempEntity);
	}

	@Override
	public Page<UserFileTempEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return userFileTempJpaRepository.findAll(request);
	}

	@Override
	public List<UserFileTemp> findAll() {
		Iterable<UserFileTempEntity> entities = userFileTempJpaRepository.findAll();
		List<UserFileTemp> beans = new ArrayList<UserFileTemp>();
		for(UserFileTempEntity userFileTempEntity : entities) {
			beans.add(userFileTempServiceMapper.mapUserFileTempEntityToUserFileTemp(userFileTempEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = userFileTempJpaRepository.count();
		return count;
	}

	@Override
	public UserFileTemp save(UserFileTemp userFileTemp) {
		return update(userFileTemp) ;
	}

	@Override
	public UserFileTemp create(UserFileTemp userFileTemp) {
/*
		UserFileTempEntity userFileTempEntity = userFileTempJpaRepository.findOne(userFileTemp.getId());
		if( userFileTempEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		userFileTempEntity = new UserFileTempEntity();
		userFileTempServiceMapper.mapUserFileTempToUserFileTempEntity(userFileTemp, userFileTempEntity);
		UserFileTempEntity userFileTempEntitySaved = userFileTempJpaRepository.save(userFileTempEntity);
		return userFileTempServiceMapper.mapUserFileTempEntityToUserFileTemp(userFileTempEntitySaved);
*/
		UserFileTempEntity userFileTempEntity = new UserFileTempEntity();
		userFileTempServiceMapper.mapUserFileTempToUserFileTempEntity(userFileTemp, userFileTempEntity);
		UserFileTempEntity userFileTempEntitySaved = userFileTempJpaRepository.save(userFileTempEntity);
		return userFileTempServiceMapper.mapUserFileTempEntityToUserFileTemp(userFileTempEntitySaved);
	}

	@Override
	public UserFileTemp update(UserFileTemp userFileTemp) {
		UserFileTempEntity userFileTempEntity = userFileTempJpaRepository.findOne(userFileTemp.getId());
		userFileTempServiceMapper.mapUserFileTempToUserFileTempEntity(userFileTemp, userFileTempEntity);
		UserFileTempEntity userFileTempEntitySaved = userFileTempJpaRepository.save(userFileTempEntity);
		return userFileTempServiceMapper.mapUserFileTempEntityToUserFileTemp(userFileTempEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		userFileTempJpaRepository.delete(id);
	}

	public UserFileTempJpaRepository getUserFileTempJpaRepository() {
		return userFileTempJpaRepository;
	}

	public void setUserFileTempJpaRepository(UserFileTempJpaRepository userFileTempJpaRepository) {
		this.userFileTempJpaRepository = userFileTempJpaRepository;
	}

	public UserFileTempServiceMapper getUserFileTempServiceMapper() {
		return userFileTempServiceMapper;
	}

	public void setUserFileTempServiceMapper(UserFileTempServiceMapper userFileTempServiceMapper) {
		this.userFileTempServiceMapper = userFileTempServiceMapper;
	}

	@Override
	public Page<UserFileTempEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return userFileTempJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	

	@Override
	public Page<UserFileTempEntity> listPagingByUserId(Integer page, Integer size, Integer userId) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return userFileTempJpaRepository.listPagingByUserId(userId, pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

}
