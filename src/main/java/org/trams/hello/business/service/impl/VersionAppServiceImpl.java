/*
 * Created on 23 thg 11 2016 ( Time 13:38:13 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import org.trams.hello.bean.VersionApp;
import org.trams.hello.bean.jpa.VersionAppEntity;
import org.trams.hello.business.service.VersionAppService;
import org.trams.hello.business.service.mapping.VersionAppServiceMapper;
import org.trams.hello.data.repository.jpa.VersionAppJpaRepository;
/**
 * Implementation of VersionAppService
 */
@Component
@Transactional
public class VersionAppServiceImpl implements VersionAppService {

	@Resource
	private VersionAppJpaRepository versionAppJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private VersionAppServiceMapper versionAppServiceMapper;
	
	@Override
	public VersionApp findById(Integer id) {
		VersionAppEntity versionAppEntity = versionAppJpaRepository.findOne(id);
		return versionAppServiceMapper.mapVersionAppEntityToVersionApp(versionAppEntity);
	}

	@Override
	public Page<VersionAppEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return versionAppJpaRepository.findAll(request);
	}

	@Override
	public List<VersionApp> findAll() {
		Iterable<VersionAppEntity> entities = versionAppJpaRepository.findAll();
		List<VersionApp> beans = new ArrayList<VersionApp>();
		for(VersionAppEntity versionAppEntity : entities) {
			beans.add(versionAppServiceMapper.mapVersionAppEntityToVersionApp(versionAppEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = versionAppJpaRepository.count();
		return count;
	}

	@Override
	public VersionApp save(VersionApp versionApp) {
		return update(versionApp) ;
	}

	@Override
	public VersionApp create(VersionApp versionApp) {
/*
		VersionAppEntity versionAppEntity = versionAppJpaRepository.findOne(versionApp.getId());
		if( versionAppEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		versionAppEntity = new VersionAppEntity();
		versionAppServiceMapper.mapVersionAppToVersionAppEntity(versionApp, versionAppEntity);
		VersionAppEntity versionAppEntitySaved = versionAppJpaRepository.save(versionAppEntity);
		return versionAppServiceMapper.mapVersionAppEntityToVersionApp(versionAppEntitySaved);
*/
		VersionAppEntity versionAppEntity = new VersionAppEntity();
		versionAppServiceMapper.mapVersionAppToVersionAppEntity(versionApp, versionAppEntity);
		VersionAppEntity versionAppEntitySaved = versionAppJpaRepository.save(versionAppEntity);
		return versionAppServiceMapper.mapVersionAppEntityToVersionApp(versionAppEntitySaved);
	}

	@Override
	public VersionApp update(VersionApp versionApp) {
		VersionAppEntity versionAppEntity = versionAppJpaRepository.findOne(versionApp.getId());
		versionAppServiceMapper.mapVersionAppToVersionAppEntity(versionApp, versionAppEntity);
		VersionAppEntity versionAppEntitySaved = versionAppJpaRepository.save(versionAppEntity);
		return versionAppServiceMapper.mapVersionAppEntityToVersionApp(versionAppEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		versionAppJpaRepository.delete(id);
	}

	public VersionAppJpaRepository getVersionAppJpaRepository() {
		return versionAppJpaRepository;
	}

	public void setVersionAppJpaRepository(VersionAppJpaRepository versionAppJpaRepository) {
		this.versionAppJpaRepository = versionAppJpaRepository;
	}

	public VersionAppServiceMapper getVersionAppServiceMapper() {
		return versionAppServiceMapper;
	}

	public void setVersionAppServiceMapper(VersionAppServiceMapper versionAppServiceMapper) {
		this.versionAppServiceMapper = versionAppServiceMapper;
	}

	@Override
	public Page<VersionAppEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return versionAppJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Page<VersionAppEntity> listPagingBy_Os(Short os, Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return versionAppJpaRepository.listPagingBy_Os(os, pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public List<VersionAppEntity> listBy_Os(Short os, Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return versionAppJpaRepository.listBy_Os(os, pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}
	
	


}
