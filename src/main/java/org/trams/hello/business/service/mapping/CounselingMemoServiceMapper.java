/*
 * Created on 8 thg 2 2017 ( Time 10:59:43 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.business.service.mapping;

import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import org.trams.hello.bean.CounselingMemo;
import org.trams.hello.bean.jpa.CounselingMemoEntity;
import org.trams.hello.bean.jpa.CounselorEntity;
import org.trams.hello.bean.jpa.UserEntity;

/**
 * Mapping between entity beans and display beans.
 */
@Component
public class CounselingMemoServiceMapper extends AbstractServiceMapper {

	/**
	 * ModelMapper : bean to bean mapping library.
	 */
	private ModelMapper modelMapper;
	
	/**
	 * Constructor.
	 */
	public CounselingMemoServiceMapper() {
		modelMapper = new ModelMapper();
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}

	/**
	 * Mapping from 'CounselingMemoEntity' to 'CounselingMemo'
	 * @param counselingMemoEntity
	 */
	public CounselingMemo mapCounselingMemoEntityToCounselingMemo(CounselingMemoEntity counselingMemoEntity) {
		if(counselingMemoEntity == null) {
			return null;
		}

		//--- Generic mapping 
		CounselingMemo counselingMemo = map(counselingMemoEntity, CounselingMemo.class);

		//--- Link mapping ( link to User )
		if(counselingMemoEntity.getUser() != null) {
			counselingMemo.setUserId(counselingMemoEntity.getUser().getId());
		}
		//--- Link mapping ( link to Counselor )
		if(counselingMemoEntity.getCounselor() != null) {
			counselingMemo.setCounselorId(counselingMemoEntity.getCounselor().getId());
		}
		return counselingMemo;
	}
	
	/**
	 * Mapping from 'CounselingMemo' to 'CounselingMemoEntity'
	 * @param counselingMemo
	 * @param counselingMemoEntity
	 */
	public void mapCounselingMemoToCounselingMemoEntity(CounselingMemo counselingMemo, CounselingMemoEntity counselingMemoEntity) {
		if(counselingMemo == null) {
			return;
		}

		//--- Generic mapping 
		map(counselingMemo, counselingMemoEntity);

		//--- Link mapping ( link : counselingMemo )
		if( hasLinkToUser(counselingMemo) ) {
			UserEntity user1 = new UserEntity();
			user1.setId( counselingMemo.getUserId() );
			counselingMemoEntity.setUser( user1 );
		} else {
			counselingMemoEntity.setUser( null );
		}

		//--- Link mapping ( link : counselingMemo )
		if( hasLinkToCounselor(counselingMemo) ) {
			CounselorEntity counselor2 = new CounselorEntity();
			counselor2.setId( counselingMemo.getCounselorId() );
			counselingMemoEntity.setCounselor( counselor2 );
		} else {
			counselingMemoEntity.setCounselor( null );
		}

	}
	
	/**
	 * Verify that User id is valid.
	 * @param User User
	 * @return boolean
	 */
	private boolean hasLinkToUser(CounselingMemo counselingMemo) {
		if(counselingMemo.getUserId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that Counselor id is valid.
	 * @param Counselor Counselor
	 * @return boolean
	 */
	private boolean hasLinkToCounselor(CounselingMemo counselingMemo) {
		if(counselingMemo.getCounselorId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected ModelMapper getModelMapper() {
		return modelMapper;
	}

	protected void setModelMapper(ModelMapper modelMapper) {
		this.modelMapper = modelMapper;
	}

}