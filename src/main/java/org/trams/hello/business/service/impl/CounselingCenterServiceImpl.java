/*
 * Created on 23 thg 11 2016 ( Time 13:38:12 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import org.trams.hello.bean.CounselingCenter;
import org.trams.hello.bean.jpa.CounselingCenterEntity;
import org.trams.hello.business.service.CounselingCenterService;
import org.trams.hello.business.service.mapping.CounselingCenterServiceMapper;
import org.trams.hello.data.repository.jpa.CounselingCenterJpaRepository;
/**
 * Implementation of CounselingCenterService
 */
@Component
@Transactional
public class CounselingCenterServiceImpl implements CounselingCenterService {

	@Resource
	private CounselingCenterJpaRepository counselingCenterJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private CounselingCenterServiceMapper counselingCenterServiceMapper;
	
	@Override
	public CounselingCenter findById(Integer id) {
		CounselingCenterEntity counselingCenterEntity = counselingCenterJpaRepository.findOne(id);
		return counselingCenterServiceMapper.mapCounselingCenterEntityToCounselingCenter(counselingCenterEntity);
	}
	
	@Override
	public CounselingCenterEntity findOne(Integer id) {
		return counselingCenterJpaRepository.findOne(id);
	}

	@Override
	public Page<CounselingCenterEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return counselingCenterJpaRepository.findAll(request);
	}

	@Override
	public List<CounselingCenter> findAll() {
		Iterable<CounselingCenterEntity> entities = counselingCenterJpaRepository.findAll();
		List<CounselingCenter> beans = new ArrayList<CounselingCenter>();
		for(CounselingCenterEntity counselingCenterEntity : entities) {
			beans.add(counselingCenterServiceMapper.mapCounselingCenterEntityToCounselingCenter(counselingCenterEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = counselingCenterJpaRepository.count();
		return count;
	}

	@Override
	public CounselingCenter save(CounselingCenter counselingCenter) {
		return update(counselingCenter) ;
	}

	@Override
	public CounselingCenter create(CounselingCenter counselingCenter) {
/*
		CounselingCenterEntity counselingCenterEntity = counselingCenterJpaRepository.findOne(counselingCenter.getId());
		if( counselingCenterEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		counselingCenterEntity = new CounselingCenterEntity();
		counselingCenterServiceMapper.mapCounselingCenterToCounselingCenterEntity(counselingCenter, counselingCenterEntity);
		CounselingCenterEntity counselingCenterEntitySaved = counselingCenterJpaRepository.save(counselingCenterEntity);
		return counselingCenterServiceMapper.mapCounselingCenterEntityToCounselingCenter(counselingCenterEntitySaved);
*/
		CounselingCenterEntity counselingCenterEntity = new CounselingCenterEntity();
		counselingCenterServiceMapper.mapCounselingCenterToCounselingCenterEntity(counselingCenter, counselingCenterEntity);
		CounselingCenterEntity counselingCenterEntitySaved = counselingCenterJpaRepository.save(counselingCenterEntity);
		return counselingCenterServiceMapper.mapCounselingCenterEntityToCounselingCenter(counselingCenterEntitySaved);
	}

	@Override
	public CounselingCenter update(CounselingCenter counselingCenter) {
		CounselingCenterEntity counselingCenterEntity = counselingCenterJpaRepository.findOne(counselingCenter.getId());
		counselingCenterServiceMapper.mapCounselingCenterToCounselingCenterEntity(counselingCenter, counselingCenterEntity);
		CounselingCenterEntity counselingCenterEntitySaved = counselingCenterJpaRepository.save(counselingCenterEntity);
		return counselingCenterServiceMapper.mapCounselingCenterEntityToCounselingCenter(counselingCenterEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		counselingCenterJpaRepository.delete(id);
	}

	public CounselingCenterJpaRepository getCounselingCenterJpaRepository() {
		return counselingCenterJpaRepository;
	}

	public void setCounselingCenterJpaRepository(CounselingCenterJpaRepository counselingCenterJpaRepository) {
		this.counselingCenterJpaRepository = counselingCenterJpaRepository;
	}

	public CounselingCenterServiceMapper getCounselingCenterServiceMapper() {
		return counselingCenterServiceMapper;
	}

	public void setCounselingCenterServiceMapper(CounselingCenterServiceMapper counselingCenterServiceMapper) {
		this.counselingCenterServiceMapper = counselingCenterServiceMapper;
	}

	@Override
	public Page<CounselingCenterEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return counselingCenterJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}
	
	

	@Override
	public void update_isDelete(Integer id) {
		 try {
			 counselingCenterJpaRepository.update_isDelete(id);
			} catch (Exception e) {
				System.out.println(e);
			}
	}

	@Override
	public Page<CounselingCenterEntity> listPagingBy_StatusAndName(Integer status, String centerName, String orberBy,
			Integer page, Integer size) {
		try {
			Order order =new Order(Direction.DESC, orberBy);
			if(orberBy.equals("centerName")){
				order =new Order(Direction.ASC, orberBy);
			}
			PageRequest pageable = new PageRequest(page-1, size, new Sort(order));
			return counselingCenterJpaRepository.listPagingBy_StatusAndName(status, centerName, pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Page<CounselingCenterEntity> listPagingBy_Name(String centerName, String orderBy, Integer page,
			Integer size) {
		try {
			Order order =new Order(Direction.DESC, orderBy);
			if(orderBy.equals("centerName")){
				order =new Order(Direction.ASC, orderBy);
			}
			PageRequest pageable = new PageRequest(page-1, size, new Sort(order));
			return counselingCenterJpaRepository.listPagingBy_Name(centerName, pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Integer totalMoneyHaveNotPayForCounSelorCenter(Integer counselorCenterId) {
		try {
			return counselingCenterJpaRepository.totalMoneyHaveNotPayForCounSelorCenter(counselorCenterId);
		} catch (Exception e) {
			System.out.println(e);
			return 0;
		}
	}

	@Override
	public void updateCounselorFreelancerBy_CounselingCenter(Integer counselingCenterId) {
		 try {
			 counselingCenterJpaRepository.updateCounselorFreelancerBy_CounselingCenter(counselingCenterId);
			} catch (Exception e) {
				System.out.println(e);
			}
		
	}
	

}
