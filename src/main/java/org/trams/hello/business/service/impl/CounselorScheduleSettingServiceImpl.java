/*
 * Created on 7 Mar 2017 ( Time 09:52:29 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.business.service.impl;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

import javax.annotation.Resource;
import javax.persistence.EntityManager;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.JoinType;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import org.trams.hello.bean.CounselorScheduleSetting;
import org.trams.hello.bean.api.ReservationDate;
import org.trams.hello.bean.api.ReservationTimeSelect;
import org.trams.hello.bean.api.ReservedAndCounselingType;
import org.trams.hello.bean.jpa.CounselorScheduleSettingEntity;
import org.trams.hello.business.service.CounselingSessionService;
import org.trams.hello.business.service.CounselorScheduleSettingService;
import org.trams.hello.business.service.mapping.CounselorScheduleSettingServiceMapper;
import org.trams.hello.data.repository.jpa.CounselorScheduleSettingJpaRepository;
import org.trams.hello.rest.common.Utils;
import org.trams.hello.web.common.utils.DataUtils;

/**
 * Implementation of CounselorScheduleSettingService
 */
@Component
@Transactional
public class CounselorScheduleSettingServiceImpl implements CounselorScheduleSettingService {

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private CounselorScheduleSettingJpaRepository counselorScheduleSettingJpaRepository;
	@Resource
	private CounselingSessionService counselingSessionService;
	@Resource
	private CounselorScheduleSettingServiceMapper counselorScheduleSettingServiceMapper;
	@Resource
	private EntityManager em;
	
	@Override
	public CounselorScheduleSetting findById(Integer id) {
		CounselorScheduleSettingEntity counselorScheduleSettingEntity = counselorScheduleSettingJpaRepository.findOne(id);
		return counselorScheduleSettingServiceMapper.mapCounselorScheduleSettingEntityToCounselorScheduleSetting(counselorScheduleSettingEntity);
	}

	@Override
	public Page<CounselorScheduleSettingEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return counselorScheduleSettingJpaRepository.findAll(request);
	}

	@Override
	public List<CounselorScheduleSetting> findAll() {
		Iterable<CounselorScheduleSettingEntity> entities = counselorScheduleSettingJpaRepository.findAll();
		List<CounselorScheduleSetting> beans = new ArrayList<CounselorScheduleSetting>();
		for(CounselorScheduleSettingEntity counselorScheduleSettingEntity : entities) {
			beans.add(counselorScheduleSettingServiceMapper.mapCounselorScheduleSettingEntityToCounselorScheduleSetting(counselorScheduleSettingEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = counselorScheduleSettingJpaRepository.count();
		return count;
	}

	@Override
	public CounselorScheduleSetting save(CounselorScheduleSetting counselorScheduleSetting) {
		return update(counselorScheduleSetting) ;
	}

	@Override
	public CounselorScheduleSetting create(CounselorScheduleSetting counselorScheduleSetting) {
/*
		CounselorScheduleSettingEntity counselorScheduleSettingEntity = counselorScheduleSettingJpaRepository.findOne(counselorScheduleSetting.getId());
		if( counselorScheduleSettingEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		counselorScheduleSettingEntity = new CounselorScheduleSettingEntity();
		counselorScheduleSettingServiceMapper.mapCounselorScheduleSettingToCounselorScheduleSettingEntity(counselorScheduleSetting, counselorScheduleSettingEntity);
		CounselorScheduleSettingEntity counselorScheduleSettingEntitySaved = counselorScheduleSettingJpaRepository.save(counselorScheduleSettingEntity);
		return counselorScheduleSettingServiceMapper.mapCounselorScheduleSettingEntityToCounselorScheduleSetting(counselorScheduleSettingEntitySaved);
*/
		CounselorScheduleSettingEntity counselorScheduleSettingEntity = new CounselorScheduleSettingEntity();
		counselorScheduleSettingServiceMapper.mapCounselorScheduleSettingToCounselorScheduleSettingEntity(counselorScheduleSetting, counselorScheduleSettingEntity);
		CounselorScheduleSettingEntity counselorScheduleSettingEntitySaved = counselorScheduleSettingJpaRepository.save(counselorScheduleSettingEntity);
		return counselorScheduleSettingServiceMapper.mapCounselorScheduleSettingEntityToCounselorScheduleSetting(counselorScheduleSettingEntitySaved);
	}

	@Override
	public CounselorScheduleSetting update(CounselorScheduleSetting counselorScheduleSetting) {
		CounselorScheduleSettingEntity counselorScheduleSettingEntity = counselorScheduleSettingJpaRepository.findOne(counselorScheduleSetting.getId());
		counselorScheduleSettingServiceMapper.mapCounselorScheduleSettingToCounselorScheduleSettingEntity(counselorScheduleSetting, counselorScheduleSettingEntity);
		CounselorScheduleSettingEntity counselorScheduleSettingEntitySaved = counselorScheduleSettingJpaRepository.save(counselorScheduleSettingEntity);
		return counselorScheduleSettingServiceMapper.mapCounselorScheduleSettingEntityToCounselorScheduleSetting(counselorScheduleSettingEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		counselorScheduleSettingJpaRepository.delete(id);
	}

	public CounselorScheduleSettingJpaRepository getCounselorScheduleSettingJpaRepository() {
		return counselorScheduleSettingJpaRepository;
	}

	public void setCounselorScheduleSettingJpaRepository(CounselorScheduleSettingJpaRepository counselorScheduleSettingJpaRepository) {
		this.counselorScheduleSettingJpaRepository = counselorScheduleSettingJpaRepository;
	}

	public CounselorScheduleSettingServiceMapper getCounselorScheduleSettingServiceMapper() {
		return counselorScheduleSettingServiceMapper;
	}

	public void setCounselorScheduleSettingServiceMapper(CounselorScheduleSettingServiceMapper counselorScheduleSettingServiceMapper) {
		this.counselorScheduleSettingServiceMapper = counselorScheduleSettingServiceMapper;
	}

	@Override
	public Page<CounselorScheduleSettingEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return counselorScheduleSettingJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public List<ReservationDate> listByMonth(Integer month, Integer counselorId, Integer year, Integer restTime) {
		try {
			List<CounselorScheduleSettingEntity> list = counselorScheduleSettingJpaRepository.listByMonth(month, counselorId, year);
			List<ReservationDate> beans = new ArrayList<>();
			for (CounselorScheduleSettingEntity entity : list) {
				ReservationDate r = new ReservationDate();
				r.setCounselorScheduleSettingId(entity.getId());
				r.setReservationDate(entity.getReservationDate().getTime());
				List<ReservationTimeSelect> reservationTimes = new ArrayList<>();
				TreeMap<Float, ReservedAndCounselingType> listCounselingDateNow = counselingSessionService.listStartTimeCounselingSSByDay(entity.getReservationDate(), counselorId);
				reservationTimes = Utils.getTimeCanReserve(30, restTime, entity.getReservationDate(), entity.getReservationTime(), listCounselingDateNow);
				if(reservationTimes.size() > 0){
					beans.add(r);
				}
				
//				if(cal.get(Calendar.DAY_OF_MONTH) == entity.getReservationDate().getDate()){
//					
//				}else{
//					beans.add(r);
//				}
				
			}
			
			return beans;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	

	@Override
	public CounselorScheduleSetting findCounselorScheduleSettingByReservationDate(Date reservationDate, Integer counselorId) {
		return counselorScheduleSettingServiceMapper.mapCounselorScheduleSettingEntityToCounselorScheduleSetting(counselorScheduleSettingJpaRepository.findCounselorScheduleSettingByReservationDate(reservationDate, counselorId));
	}

	@Override
	public List<CounselorScheduleSettingEntity> listByWeekAndCounselorId(Date from, Date to, Integer counselorId) {
		try {
			return counselorScheduleSettingJpaRepository.listByWeekAndCounselorId(from, to, counselorId);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public List<CounselorScheduleSettingEntity> listByWeek(Date from, Date to) {
		try {
			return counselorScheduleSettingJpaRepository.listByWeek(from, to);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public Page<CounselorScheduleSettingEntity> filter(Map<String, Object> params) {

		int page = Integer.parseInt(params.get("page").toString());
		int size = Integer.parseInt(params.get("size").toString());

		PageRequest pageable = new PageRequest(page - 1, size, new Sort(new Order(Direction.fromString(String.valueOf(params.getOrDefault("direction", "DESC"))), "createDate")));

		Specification<CounselorScheduleSettingEntity> spec = new Specification<CounselorScheduleSettingEntity>() {
			@Override
			public Predicate toPredicate(Root<CounselorScheduleSettingEntity> root, CriteriaQuery<?> query, CriteriaBuilder cb) {
				List<Predicate> predicates = new ArrayList<>();

				if (params.get("id") != null) {
					Long id = Long.parseLong(params.get("id").toString());
					predicates.add(
						cb.equal(root.get("id"), id)
					);
				}
				if (params.get("counselorId") != null) {
					Long counselorId = Long.parseLong(params.get("counselorId").toString());
					predicates.add(
							cb.equal(root.join("counselor", JoinType.INNER).get("id"), counselorId)
					);
				}
				if (params.get("reservationFrom") != null) {
					DateFormat format = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
					try {
						Date dateReservationFrom = format.parse(String.valueOf(params.get("reservationFrom")) + " 00:00:00");
						predicates.add(
								cb.greaterThanOrEqualTo(root.get("reservationDate"), dateReservationFrom)
						);
					} catch (ParseException e) {
						e.printStackTrace();
					}
				}
				
				if (params.get("onlineTimeNoEmpty") != null) {
					predicates.add(
						cb.isNotNull(root.get("onlineTime"))
					);
					predicates.add(
							cb.notEqual(root.get("onlineTime"), "")
						);
				}
				
				if (params.get("reservationTo") != null) {
					DateFormat format = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
					try {
						Date dateReservationTo = format.parse(String.valueOf(params.get("reservationTo")) + " 23:59:59");
						predicates.add(
								cb.lessThanOrEqualTo(root.get("reservationDate"), dateReservationTo)
						);
					} catch (ParseException e) {
						e.printStackTrace();
					}
				}

				if (predicates.isEmpty()) {
					return cb.isNotNull(root.get("id"));
				} else {
					return cb.and(predicates.toArray(new Predicate[] {}));
				}
			}

		};

		return counselorScheduleSettingJpaRepository.findAll(spec, pageable);
	}

	@Override
	public void repeatSchedule(Map<String, Object> params) {

		Integer counselorId = Integer.parseInt(String.valueOf(params.get("counselorId")));
		Date upperLimit     = DataUtils.parseDate(String.valueOf(params.get("upperLimit")), DataUtils.DatePattern.YYYYMMDD);
		String daysOfWeek   = String.valueOf(params.get("daysOfWeek"));
		Integer currentWeek	= Integer.parseInt(params.get("currentWeek").toString());

		List<Integer> calendarDaysOfWeek = new ArrayList<>();
		for (String day : daysOfWeek.split(",")) {
			calendarDaysOfWeek.add(Integer.parseInt(day));
		}

		Calendar now = Calendar.getInstance();
		now.add(Calendar.WEEK_OF_MONTH, currentWeek);

		now.set(Calendar.DAY_OF_WEEK, 2);
		Date firstDayOfWeek 	= now.getTime();

		now.add(Calendar.WEEK_OF_MONTH, 1);
		now.set(Calendar.DAY_OF_WEEK, 1);
		Date lastDayOfWeek 		= now.getTime();

		// query week schedule
		List<CounselorScheduleSettingEntity> currentSettingInAWeek = counselorScheduleSettingJpaRepository.listByWeekAndCounselorId(firstDayOfWeek, lastDayOfWeek, counselorId);
		Map<Integer, CounselorScheduleSettingEntity> currentSettingInAWeekByDate = new HashMap<>();

		for (CounselorScheduleSettingEntity csee : currentSettingInAWeek) {
			now.setTime(csee.getReservationDate());
			int dayOfWeek = now.get(Calendar.DAY_OF_WEEK);

			currentSettingInAWeekByDate.put(dayOfWeek, csee);
		}

		// calculate time to copy
		Calendar upperDay = Calendar.getInstance();
		upperDay.setTime(upperLimit);

		Calendar lowerDay = Calendar.getInstance();
		lowerDay.add(Calendar.WEEK_OF_MONTH, currentWeek + 1);
		lowerDay.set(Calendar.DAY_OF_WEEK, 1);

		now = Calendar.getInstance();

		for (int i = 0, n = upperDay.get(Calendar.DAY_OF_YEAR) - lowerDay.get(Calendar.DAY_OF_YEAR); i < n; i++) {

			lowerDay.add(Calendar.DAY_OF_YEAR, 1);
			int dayOfWeek = lowerDay.get(Calendar.DAY_OF_WEEK);
			if (!calendarDaysOfWeek.contains(dayOfWeek)) continue;

			if (currentSettingInAWeekByDate.containsKey(dayOfWeek)) {

				CounselorScheduleSettingEntity currentSetting = currentSettingInAWeekByDate.get(dayOfWeek);
				CounselorScheduleSettingEntity setting = counselorScheduleSettingJpaRepository.findCounselorScheduleSettingByReservationDate(lowerDay.getTime(), counselorId);

				if (setting == null) {
					CounselorScheduleSetting cse = new CounselorScheduleSetting();
					cse.setReservationDate(lowerDay.getTime());
					cse.setCreateDate(now.getTime());
					cse.setCounselorId(counselorId);
					cse.setOnlineTime(currentSetting.getOnlineTime());
					cse.setReservationTime(currentSetting.getReservationTime());

					create(cse);
				}
			}
		}
	}

	@Override
	public void resetSchedule(Integer counselorId) {
		Calendar now = Calendar.getInstance();
		em
				.createNativeQuery("DELETE FROM counselor_schedule_setting WHERE counselor_id = :counselorId AND DATE(reservation_date) > DATE(:reservationDate)")
				.setParameter("counselorId", counselorId)
				.setParameter("reservationDate", now.getTime())
				.executeUpdate();
	}

	@Override
	public List<ReservationDate> getScheduledDate(Integer year, Integer month, Integer counselorId) {
		List<CounselorScheduleSettingEntity> schedules = counselorScheduleSettingJpaRepository.listByMonth(month, counselorId, year);
		List<ReservationDate> result = new ArrayList<ReservationDate>();
		for (CounselorScheduleSettingEntity schedule : schedules) {
			List<ReservationTimeSelect> reservationTimes = getAvailableTime(schedule.getReservationDate(), counselorId);
			if(reservationTimes.size() > 0){
				ReservationDate reservationDate = new ReservationDate();
				reservationDate.setCounselorScheduleSettingId(schedule.getId());
				reservationDate.setReservationDate(schedule.getReservationDate().getTime());
				result.add(reservationDate);
			}
		}
		return result;
	}

	@Override
	public List<ReservationTimeSelect> getAvailableTime(Date selectedDate, Integer counselorId) {
		// TODO Auto-generated method stub
		return null;
	}

}
