/*
 * Created on 24 Apr 2017 ( Time 14:17:26 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.business.service.mapping;

import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import org.trams.hello.bean.UserQuestionaire;
import org.trams.hello.bean.jpa.CounselorEntity;
import org.trams.hello.bean.jpa.QuestionnaireEntity;
import org.trams.hello.bean.jpa.SelfDiagnosisResultsEntity;
import org.trams.hello.bean.jpa.UserEntity;
import org.trams.hello.bean.jpa.UserQuestionaireEntity;

/**
 * Mapping between entity beans and display beans.
 */
@Component
public class UserQuestionaireServiceMapper extends AbstractServiceMapper {

	/**
	 * ModelMapper : bean to bean mapping library.
	 */
	private ModelMapper modelMapper;
	
	/**
	 * Constructor.
	 */
	public UserQuestionaireServiceMapper() {
		modelMapper = new ModelMapper();
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}

	/**
	 * Mapping from 'UserQuestionaireEntity' to 'UserQuestionaire'
	 * @param userQuestionaireEntity
	 */
	public UserQuestionaire mapUserQuestionaireEntityToUserQuestionaire(UserQuestionaireEntity userQuestionaireEntity) {
		if(userQuestionaireEntity == null) {
			return null;
		}

		//--- Generic mapping 
		UserQuestionaire userQuestionaire = map(userQuestionaireEntity, UserQuestionaire.class);

		//--- Link mapping ( link to Counselor )
		if(userQuestionaireEntity.getCounselor() != null) {
			userQuestionaire.setCounselorId(userQuestionaireEntity.getCounselor().getId());
		}
		//--- Link mapping ( link to Questionnaire )
		if(userQuestionaireEntity.getQuestionnaire() != null) {
			userQuestionaire.setQuestionaireId(userQuestionaireEntity.getQuestionnaire().getId());
		}
		//--- Link mapping ( link to User )
		if(userQuestionaireEntity.getUser() != null) {
			userQuestionaire.setUserId(userQuestionaireEntity.getUser().getId());
		}
		//--- Link mapping ( link to SelfDiagnosisResults )
		if(userQuestionaireEntity.getSelfDiagnosisResults() != null) {
			userQuestionaire.setSelfDiagnosisResultsId(userQuestionaireEntity.getSelfDiagnosisResults().getId());
		}
		return userQuestionaire;
	}
	
	/**
	 * Mapping from 'UserQuestionaire' to 'UserQuestionaireEntity'
	 * @param userQuestionaire
	 * @param userQuestionaireEntity
	 */
	public void mapUserQuestionaireToUserQuestionaireEntity(UserQuestionaire userQuestionaire, UserQuestionaireEntity userQuestionaireEntity) {
		if(userQuestionaire == null) {
			return;
		}

		//--- Generic mapping 
		map(userQuestionaire, userQuestionaireEntity);

		//--- Link mapping ( link : userQuestionaire )
		if( hasLinkToCounselor(userQuestionaire) ) {
			CounselorEntity counselor1 = new CounselorEntity();
			counselor1.setId( userQuestionaire.getCounselorId() );
			userQuestionaireEntity.setCounselor( counselor1 );
		} else {
			userQuestionaireEntity.setCounselor( null );
		}

		//--- Link mapping ( link : userQuestionaire )
		if( hasLinkToQuestionnaire(userQuestionaire) ) {
			QuestionnaireEntity questionnaire2 = new QuestionnaireEntity();
			questionnaire2.setId( userQuestionaire.getQuestionaireId() );
			userQuestionaireEntity.setQuestionnaire( questionnaire2 );
		} else {
			userQuestionaireEntity.setQuestionnaire( null );
		}

		//--- Link mapping ( link : userQuestionaire )
		if( hasLinkToUser(userQuestionaire) ) {
			UserEntity user3 = new UserEntity();
			user3.setId( userQuestionaire.getUserId() );
			userQuestionaireEntity.setUser( user3 );
		} else {
			userQuestionaireEntity.setUser( null );
		}

		//--- Link mapping ( link : userQuestionaire )
		if( hasLinkToSelfDiagnosisResults(userQuestionaire) ) {
			SelfDiagnosisResultsEntity selfDiagnosisResults4 = new SelfDiagnosisResultsEntity();
			selfDiagnosisResults4.setId( userQuestionaire.getSelfDiagnosisResultsId() );
			userQuestionaireEntity.setSelfDiagnosisResults( selfDiagnosisResults4 );
		} else {
			userQuestionaireEntity.setSelfDiagnosisResults( null );
		}

	}
	
	/**
	 * Verify that Counselor id is valid.
	 * @param Counselor Counselor
	 * @return boolean
	 */
	private boolean hasLinkToCounselor(UserQuestionaire userQuestionaire) {
		if(userQuestionaire.getCounselorId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that Questionnaire id is valid.
	 * @param Questionnaire Questionnaire
	 * @return boolean
	 */
	private boolean hasLinkToQuestionnaire(UserQuestionaire userQuestionaire) {
		if(userQuestionaire.getQuestionaireId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that User id is valid.
	 * @param User User
	 * @return boolean
	 */
	private boolean hasLinkToUser(UserQuestionaire userQuestionaire) {
		if(userQuestionaire.getUserId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that SelfDiagnosisResults id is valid.
	 * @param SelfDiagnosisResults SelfDiagnosisResults
	 * @return boolean
	 */
	private boolean hasLinkToSelfDiagnosisResults(UserQuestionaire userQuestionaire) {
		if(userQuestionaire.getSelfDiagnosisResultsId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected ModelMapper getModelMapper() {
		return modelMapper;
	}

	protected void setModelMapper(ModelMapper modelMapper) {
		this.modelMapper = modelMapper;
	}

}