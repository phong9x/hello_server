/*
 * Created on 25 May 2017 ( Time 13:57:15 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.business.service.mapping;

import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import org.trams.hello.bean.Faq;
import org.trams.hello.bean.jpa.FaqEntity;
import org.trams.hello.bean.jpa.UserEntity;

/**
 * Mapping between entity beans and display beans.
 */
@Component
public class FaqServiceMapper extends AbstractServiceMapper {

	/**
	 * ModelMapper : bean to bean mapping library.
	 */
	private ModelMapper modelMapper;
	
	/**
	 * Constructor.
	 */
	public FaqServiceMapper() {
		modelMapper = new ModelMapper();
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}

	/**
	 * Mapping from 'FaqEntity' to 'Faq'
	 * @param faqEntity
	 */
	public Faq mapFaqEntityToFaq(FaqEntity faqEntity) {
		if(faqEntity == null) {
			return null;
		}

		//--- Generic mapping 
		Faq faq = map(faqEntity, Faq.class);

		//--- Link mapping ( link to User )
		if(faqEntity.getUser() != null) {
			faq.setUserId(faqEntity.getUser().getId());
		}
		return faq;
	}
	
	/**
	 * Mapping from 'Faq' to 'FaqEntity'
	 * @param faq
	 * @param faqEntity
	 */
	public void mapFaqToFaqEntity(Faq faq, FaqEntity faqEntity) {
		if(faq == null) {
			return;
		}

		//--- Generic mapping 
		map(faq, faqEntity);

		//--- Link mapping ( link : faq )
		if( hasLinkToUser(faq) ) {
			UserEntity user1 = new UserEntity();
			user1.setId( faq.getUserId() );
			faqEntity.setUser( user1 );
		} else {
			faqEntity.setUser( null );
		}

	}
	
	/**
	 * Verify that User id is valid.
	 * @param User User
	 * @return boolean
	 */
	private boolean hasLinkToUser(Faq faq) {
		if(faq.getUserId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected ModelMapper getModelMapper() {
		return modelMapper;
	}

	protected void setModelMapper(ModelMapper modelMapper) {
		this.modelMapper = modelMapper;
	}

}