/*
 * Created on 7 Apr 2017 ( Time 17:33:11 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.business.service.mapping;

import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import org.trams.hello.bean.UserReceiveMessage;
import org.trams.hello.bean.jpa.MessageEntity;
import org.trams.hello.bean.jpa.UserEntity;
import org.trams.hello.bean.jpa.UserReceiveMessageEntity;

/**
 * Mapping between entity beans and display beans.
 */
@Component
public class UserReceiveMessageServiceMapper extends AbstractServiceMapper {

	/**
	 * ModelMapper : bean to bean mapping library.
	 */
	private ModelMapper modelMapper;
	
	/**
	 * Constructor.
	 */
	public UserReceiveMessageServiceMapper() {
		modelMapper = new ModelMapper();
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}

	/**
	 * Mapping from 'UserReceiveMessageEntity' to 'UserReceiveMessage'
	 * @param userReceiveMessageEntity
	 */
	public UserReceiveMessage mapUserReceiveMessageEntityToUserReceiveMessage(UserReceiveMessageEntity userReceiveMessageEntity) {
		if(userReceiveMessageEntity == null) {
			return null;
		}

		//--- Generic mapping 
		UserReceiveMessage userReceiveMessage = map(userReceiveMessageEntity, UserReceiveMessage.class);

		//--- Link mapping ( link to User )
		if(userReceiveMessageEntity.getUser() != null) {
			userReceiveMessage.setUserId(userReceiveMessageEntity.getUser().getId());
		}
		//--- Link mapping ( link to Message )
		if(userReceiveMessageEntity.getMessage() != null) {
			userReceiveMessage.setMessageId(userReceiveMessageEntity.getMessage().getId());
		}
		return userReceiveMessage;
	}
	
	/**
	 * Mapping from 'UserReceiveMessage' to 'UserReceiveMessageEntity'
	 * @param userReceiveMessage
	 * @param userReceiveMessageEntity
	 */
	public void mapUserReceiveMessageToUserReceiveMessageEntity(UserReceiveMessage userReceiveMessage, UserReceiveMessageEntity userReceiveMessageEntity) {
		if(userReceiveMessage == null) {
			return;
		}

		//--- Generic mapping 
		map(userReceiveMessage, userReceiveMessageEntity);

		//--- Link mapping ( link : userReceiveMessage )
		if( hasLinkToUser(userReceiveMessage) ) {
			UserEntity user1 = new UserEntity();
			user1.setId( userReceiveMessage.getUserId() );
			userReceiveMessageEntity.setUser( user1 );
		} else {
			userReceiveMessageEntity.setUser( null );
		}

		//--- Link mapping ( link : userReceiveMessage )
		if( hasLinkToMessage(userReceiveMessage) ) {
			MessageEntity message2 = new MessageEntity();
			message2.setId( userReceiveMessage.getMessageId() );
			userReceiveMessageEntity.setMessage( message2 );
		} else {
			userReceiveMessageEntity.setMessage( null );
		}

	}
	
	/**
	 * Verify that User id is valid.
	 * @param User User
	 * @return boolean
	 */
	private boolean hasLinkToUser(UserReceiveMessage userReceiveMessage) {
		if(userReceiveMessage.getUserId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that Message id is valid.
	 * @param Message Message
	 * @return boolean
	 */
	private boolean hasLinkToMessage(UserReceiveMessage userReceiveMessage) {
		if(userReceiveMessage.getMessageId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected ModelMapper getModelMapper() {
		return modelMapper;
	}

	protected void setModelMapper(ModelMapper modelMapper) {
		this.modelMapper = modelMapper;
	}

}