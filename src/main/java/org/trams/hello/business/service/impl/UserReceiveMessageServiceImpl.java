/*
 * Created on 10 thg 1 2017 ( Time 14:04:47 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.business.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.annotation.Resource;
import javax.persistence.EntityManager;
import javax.persistence.Query;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import org.trams.hello.bean.UserReceiveMessage;
import org.trams.hello.bean.api.InboxMessage;
import org.trams.hello.bean.jpa.MessageEntity;
import org.trams.hello.bean.jpa.UserReceiveMessageEntity;
import org.trams.hello.business.service.CounselorService;
import org.trams.hello.business.service.MessageService;
import org.trams.hello.business.service.UserReceiveMessageService;
import org.trams.hello.business.service.mapping.UserReceiveMessageServiceMapper;
import org.trams.hello.data.repository.jpa.UserReceiveMessageJpaRepository;
/**
 * Implementation of UserReceiveMessageService
 */
@Component
@Transactional
public class UserReceiveMessageServiceImpl implements UserReceiveMessageService {

	@Resource
	private UserReceiveMessageJpaRepository userReceiveMessageJpaRepository;
	
	@Resource
	private MessageService messageService;
	
	@Resource
	private CounselorService counselorService;

	private static final Integer PAGE_SIZE   = 15;
	
	@Autowired
	private EntityManager em;

	@Resource
	private UserReceiveMessageServiceMapper userReceiveMessageServiceMapper;
	
	@Override
	public UserReceiveMessage findById(Integer id) {
		UserReceiveMessageEntity userReceiveMessageEntity = userReceiveMessageJpaRepository.findOne(id);
		return userReceiveMessageServiceMapper.mapUserReceiveMessageEntityToUserReceiveMessage(userReceiveMessageEntity);
	}

	@Override
	public Page<UserReceiveMessageEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return userReceiveMessageJpaRepository.findAll(request);
	}

	@Override
	public List<UserReceiveMessage> findAll() {
		Iterable<UserReceiveMessageEntity> entities = userReceiveMessageJpaRepository.findAll();
		List<UserReceiveMessage> beans = new ArrayList<UserReceiveMessage>();
		for(UserReceiveMessageEntity userReceiveMessageEntity : entities) {
			beans.add(userReceiveMessageServiceMapper.mapUserReceiveMessageEntityToUserReceiveMessage(userReceiveMessageEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = userReceiveMessageJpaRepository.count();
		return count;
	}

	@Override
	public UserReceiveMessage save(UserReceiveMessage userReceiveMessage) {
		return update(userReceiveMessage) ;
	}

	@Override
	public UserReceiveMessage create(UserReceiveMessage userReceiveMessage) {
/*
		UserReceiveMessageEntity userReceiveMessageEntity = userReceiveMessageJpaRepository.findOne(userReceiveMessage.getId());
		if( userReceiveMessageEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		userReceiveMessageEntity = new UserReceiveMessageEntity();
		userReceiveMessageServiceMapper.mapUserReceiveMessageToUserReceiveMessageEntity(userReceiveMessage, userReceiveMessageEntity);
		UserReceiveMessageEntity userReceiveMessageEntitySaved = userReceiveMessageJpaRepository.save(userReceiveMessageEntity);
		return userReceiveMessageServiceMapper.mapUserReceiveMessageEntityToUserReceiveMessage(userReceiveMessageEntitySaved);
*/
		UserReceiveMessageEntity userReceiveMessageEntity = new UserReceiveMessageEntity();
		userReceiveMessageServiceMapper.mapUserReceiveMessageToUserReceiveMessageEntity(userReceiveMessage, userReceiveMessageEntity);
		UserReceiveMessageEntity userReceiveMessageEntitySaved = userReceiveMessageJpaRepository.save(userReceiveMessageEntity);
		return userReceiveMessageServiceMapper.mapUserReceiveMessageEntityToUserReceiveMessage(userReceiveMessageEntitySaved);
	}

	@Override
	public UserReceiveMessage update(UserReceiveMessage userReceiveMessage) {
		UserReceiveMessageEntity userReceiveMessageEntity = userReceiveMessageJpaRepository.findOne(userReceiveMessage.getId());
		userReceiveMessageServiceMapper.mapUserReceiveMessageToUserReceiveMessageEntity(userReceiveMessage, userReceiveMessageEntity);
		UserReceiveMessageEntity userReceiveMessageEntitySaved = userReceiveMessageJpaRepository.save(userReceiveMessageEntity);
		return userReceiveMessageServiceMapper.mapUserReceiveMessageEntityToUserReceiveMessage(userReceiveMessageEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		userReceiveMessageJpaRepository.delete(id);
	}

	public UserReceiveMessageJpaRepository getUserReceiveMessageJpaRepository() {
		return userReceiveMessageJpaRepository;
	}

	public void setUserReceiveMessageJpaRepository(UserReceiveMessageJpaRepository userReceiveMessageJpaRepository) {
		this.userReceiveMessageJpaRepository = userReceiveMessageJpaRepository;
	}

	public UserReceiveMessageServiceMapper getUserReceiveMessageServiceMapper() {
		return userReceiveMessageServiceMapper;
	}

	public void setUserReceiveMessageServiceMapper(UserReceiveMessageServiceMapper userReceiveMessageServiceMapper) {
		this.userReceiveMessageServiceMapper = userReceiveMessageServiceMapper;
	}

	@Override
	public Page<UserReceiveMessageEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return userReceiveMessageJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public Page<UserReceiveMessageEntity> filterByUser(Integer userId, Short[] statuses, Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return userReceiveMessageJpaRepository.filterByUser(userId, statuses, pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	@Override
	public List<InboxMessage> filterByUser(Integer userId) {
		try {
			List<Object[]> result = userReceiveMessageJpaRepository.filterByUser(userId);
			List<InboxMessage> list = new ArrayList<>();
			for (Object[] obj : result) {
				InboxMessage i = new InboxMessage();
				i.setThumbnailUrlCounselor((String) obj[0]);
				i.setCounselorId((Integer) obj[1]);
				i.setFullNameCounselor((String) obj[2]);
				i.setRecieveDate((Date) obj[3]);
				i.setContentMessage((String) obj[4]);
				i.setStatusMessage((Short) obj[5]);
				i.setId((Integer) obj[6]);
				i.setEmailCounselor((String) obj[7]);
				list.add(i);
			}
			return list;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	@Override
	public InboxMessage findByUserReceiMessageId(Integer userRecMessId, Integer userId) {
		try {
			String str_clause = "SELECT c.thumbnail_url, c.id, u.fullname, m.recieve_date, m.content, um.status, um.id as iyu, u.email FROM user_receive_message um "
					+ " INNER JOIN message m on um.message_id = m.id "
					+ " INNER JOIN user u on u.id = m.send_user_id "
					+ " INNER JOIN counselor c on u.id = c.id "
					+ " WHERE um.user_id = "+userId+" and um.id = "+userRecMessId+" ";
			
			InboxMessage i = new InboxMessage();
			Query q = em.createNativeQuery(str_clause);
			Object[] results = (Object[]) q.getSingleResult();
			i.setThumbnailUrlCounselor((String) results[0]);
			i.setCounselorId((Integer) results[1]);
			i.setFullNameCounselor((String) results[2]);
			i.setRecieveDate((Date) results[3]);
			i.setContentMessage((String) results[4]);
			i.setStatusMessage((Short) results[5]);
			i.setId((Integer) results[6]);
			i.setEmailCounselor((String) results[7]);
			
			return i;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	@Override
	public InboxMessage findByUserReceiMessageIdInApp(Integer userRecMessId, Integer userId) {
		try {
			String str_clause = "SELECT c.thumbnail_url, c.id, u.fullname, m.recieve_date, m.content, um.`status`, um.id as iyu, u.email "
					+ " FROM user_receive_message um "
					+ " INNER JOIN message m ON um.message_id = m.id "
					+ " INNER JOIN `user` u on u.id = um.user_id "
					+ " INNER JOIN `counselor` c on c.id = u.id  WHERE um.id = "+userRecMessId+" and m.send_user_id = "+userId+" ";
			
			InboxMessage i = new InboxMessage();
			Query q = em.createNativeQuery(str_clause);
			Object[] results = (Object[]) q.getSingleResult();
			i.setThumbnailUrlCounselor((String) results[0]);
			i.setCounselorId((Integer) results[1]);
			i.setFullNameCounselor((String) results[2]);
			i.setRecieveDate((Date) results[3]);
			i.setContentMessage((String) results[4]);
			i.setStatusMessage((Short) results[5]);
			i.setId((Integer) results[6]);
			i.setEmailCounselor((String) results[7]);
			
			return i;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	@Override
	public List<InboxMessage> listSentMessage(Integer userId) {
		try {
			List<Object[]> result = userReceiveMessageJpaRepository.listSentMessage(userId);
			List<InboxMessage> list = new ArrayList<>();
			for (Object[] obj : result) {
				InboxMessage i = new InboxMessage();
				i.setThumbnailUrlCounselor((String) obj[0]);
				i.setCounselorId((Integer) obj[1]);
				i.setFullNameCounselor((String) obj[2]);
				i.setRecieveDate((Date) obj[3]);
				i.setContentMessage((String) obj[4]);
				i.setStatusMessage((Short) obj[5]);
				i.setId((Integer) obj[6]);
				i.setEmailCounselor((String) obj[7]);
				list.add(i);
			}
			return list;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public List<UserReceiveMessageEntity> listInboxMessByUserId(Integer userId) {
		return userReceiveMessageJpaRepository.listInboxMessByUserId(userId);
	}
	
	@Override
	public List<MessageEntity> listSendMessByUserId(Integer userId) {
		return userReceiveMessageJpaRepository.listSendMessByUserId(userId);
	}

	@Override
	public void updateIsDeleteByMessageId(Integer id) {
		try {
			userReceiveMessageJpaRepository.updateIsDeleteByMessageId(id);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

}
