/*
 * Created on 7 Mar 2017 ( Time 16:52:28 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.business.service;

import java.util.Date;
import java.util.List;
import java.util.Map;

import org.springframework.data.domain.Page;
import org.trams.hello.bean.UserQuestionaire;
import org.trams.hello.bean.api.LatestSelfDiagnosisResult;
import org.trams.hello.bean.jpa.UserQuestionaireEntity;

/**
 * Business Service Interface for entity UserQuestionaire.
 */
public interface UserQuestionaireService { 

	/**
	 * Loads an entity from the database using its Primary Key
	 * @param id
	 * @return entity
	 */
	UserQuestionaire findById( Integer id  ) ;

	/** 
	 * Loads all entities.
	 * @return all entities
	 */
	List<UserQuestionaire> findAll();
	
	/**
	 * Loads entities in page number.
	 * @return entities
	 */

	Page<UserQuestionaireEntity> findAll(Integer page);

	/**
	 * Count all entities
	 * @return Long
	 */
	Long countTotal();
	

	/**
	 * Saves the given entity in the database (create or update)
	 * @param entity
	 * @return entity
	 */
	UserQuestionaire save(UserQuestionaire entity);

	/**
	 * Updates the given entity in the database
	 * @param entity
	 * @return
	 */
	UserQuestionaire update(UserQuestionaire entity);

	/**
	 * Creates the given entity in the database
	 * @param entity
	 * @return
	 */
	UserQuestionaire create(UserQuestionaire entity);
	
	/**
	 * Deletes an entity using its Primary Key
	 * @param id
	 */
	void delete( Integer id );
	
	UserQuestionaireEntity findOne(Integer id);

	Page<UserQuestionaireEntity> listPaging(Integer page,Integer size);
	
	Page<UserQuestionaireEntity> listPagingByUserId( Integer page, Integer size, Integer userId);

	Page<UserQuestionaireEntity> filter(Map<String, Object> params);
	
	Page<UserQuestionaireEntity> listPagingByType( Short type, Integer page, Integer size);
	
	Page<UserQuestionaireEntity> listPagingBy_QuestionaireTypeAndTimeAndUserNameAndCounselorNameAndComment( Short type, Date startTiem, Date endTime, String username, String counselorName,String comment, Integer page, Integer size);
	
	Page<UserQuestionaireEntity> listPagingBy_QuestionaireTypeAndUserNameAndCounselorNameAndComment( Short type, String username, String counselorName, String comment, Integer page, Integer size);
	
	Page<UserQuestionaireEntity> filterAdmin(Short typeQuestion, String startTime, String endTime, String type, String key, Integer page, Integer size , String orderBy) ;
	
	UserQuestionaire getHistoryMindcheck(Integer userId);
		 
	List<UserQuestionaireEntity> listPagingByUserIdAndType(Integer userId, short type, Integer page, Integer size, String orderBy);

	Float totalPointCounsolerId(Integer counsolerId);
	
	Integer totalTestMindCheckByUserId(Integer userId);
	
	LatestSelfDiagnosisResult findLatestResult(Integer userId, Integer questionaireId);

	List<UserQuestionaireEntity> listSeftDiagnosisByUserIdAndType(Integer userId, short type);
	
	Page<Object[]> listCommentByCounselorId(Integer counselorId, Integer page, Integer size);
	
	Integer totalRecommendBYCounselorId(Integer counsolerId);
	
	void updatePointByUserQuestionAire(Integer userQuestionId);
	
	Page<UserQuestionaireEntity> listUserQuestionareByCouselorId(Integer couselorId, Short type,Integer page, Integer size);
	
	UserQuestionaireEntity getStatisficEvolutionBy_CounselingSessionId(Integer counselingSessionId);
	
	UserQuestionaireEntity getLatestMindcheckResult(Integer userId);
	
}
