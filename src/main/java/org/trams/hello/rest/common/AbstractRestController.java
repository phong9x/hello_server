/*
 * Created on 4 May 2015 ( Time 15:47:17 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.rest.common;


import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
public abstract class AbstractRestController {
	
	protected static Logger log = LoggerFactory.getLogger(AbstractRestController.class);
	
	public static HashMap<String, Object> SUCCESS(Object data)
	{HashMap<String, Object> ret = new HashMap<String, Object> ();
		ret.put("status", 200);
		ret.put("message", "Process success!");
		ret.put("data", data);
		log.debug("success:"+ret.toString());
		return ret;
	}
	
	public static HashMap<String, Object> SUCCESS_DUPLICATE_PHONE(Object data, boolean isDuplicate)
	{
		HashMap<String, Object> ret = new HashMap<String, Object> ();
		if (isDuplicate) {
			ret.put("status", 100);
		} else {
			ret.put("status", 200);
		}
		ret.put("message", "Process success!");
		ret.put("data", data);
		log.debug("success:"+ret.toString());
		return ret;
	}
	
	public static HashMap<String, Object> SUCCESS_GENERATETOKEN_PHONE(Object data, boolean isDuplicate)
	{
		HashMap<String, Object> ret = new HashMap<String, Object> ();
		if (isDuplicate) {
			ret.put("status", 100);
		} else {
			ret.put("status", 200);
		}
		ret.put("message", "Process success!");
		ret.put("data", data);
		log.debug("success:"+ret.toString());
		return ret;
	}
	
	public static HashMap<String, Object> SUCCESS()
	{HashMap<String, Object> ret = new HashMap<String, Object> ();
		Map<String, Object> result = new HashMap<>();
		ret.put("status", 200);
		ret.put("message", "Process success!");
		ret.put("data", result);
		log.debug("success:"+ret.toString());
		return ret;
	}
	
	public static HashMap<String, Object> SUCCESS(String message)
	{
		HashMap<String, Object> ret = new HashMap<String, Object> ();
		ret.put("status", 200);
		ret.put("message", message);
		ret.put("data", null);
		log.debug("success:"+ret.toString());
		return ret;
	}
	
	public static HashMap<String, Object> SUCCESS(Object data,String message)
	{
		HashMap<String, Object> ret = new HashMap<String, Object> ();
		ret.put("status", 200);
		ret.put("message", message);
		ret.put("data", data);
		log.debug("success:"+ret.toString());
		return ret;
	}
	
	public static HashMap<String, Object> FAIL(String message)
	{
		HashMap<String, Object> ret = new HashMap<String, Object> ();
		HashMap<String, Object> data = new HashMap<String, Object> ();
		ret.put("status", 100);
		ret.put("message", message);
		ret.put("data", data);
		log.debug("fail:"+ret.toString());
		return ret;
	}
	
	public static HashMap<String, Object> FAIL_LOGOUT(Object data)
	{
		HashMap<String, Object> ret = new HashMap<String, Object> ();
		ret.put("status", 100);
		ret.put("message", "fail");
		ret.put("data", data);
		log.debug("fail:"+ret.toString());
		return ret;
	}
	
	public static HashMap<String, Object> SUCCESS_MEMBER_WITHDRAWAl(Object data)
	{
		HashMap<String, Object> ret = new HashMap<String, Object> ();
		ret.put("status", 200);
		ret.put("message", "탈퇴가 완료되었습니다. Hello를 이용해주셔서 감사합니다.");
		ret.put("data", data);
		log.debug("success:"+ret.toString());
		return ret;
	}
	
	public static HashMap<String, Object> FAIL_MEMBER_WITHDRAWAl_1(Object data)
	{
		HashMap<String, Object> ret = new HashMap<String, Object> ();
		ret.put("status", 800);
		ret.put("message", "비밀번호가 올바르지 않습니다.");
		ret.put("data", data);
		log.debug("fail:"+ret.toString());
		return ret;
	}
	
	public static HashMap<String, Object> FAIL_MEMBER_WITHDRAWAl_2(Object data)
	{
		HashMap<String, Object> ret = new HashMap<String, Object> ();
		ret.put("status", 900);
		ret.put("message", "상담 예약이 있습니다. 예약 취소 후 탈퇴를 진행해주세요.");
		ret.put("data", data);
		log.debug("fail:"+ret.toString());
		return ret;
	}
	
	public static HashMap<String, Object> FAIL()
	{
		HashMap<String, Object> ret = new HashMap<String, Object> ();
		ret.put("status", 100);
		ret.put("data", null);
		ret.put("message", "Wrong!");
		log.debug("fail:"+ret.toString());
		return ret;
	}
	
	public static HashMap<String, Object> FAIL_RESERVATION()
	{
		HashMap<String, Object> ret = new HashMap<String, Object> ();
		ret.put("status", 100);
		ret.put("data", null);
		ret.put("message", "현재 상담사가 상담중입니다.");
		log.debug("fail:"+ret.toString());
		return ret;
	}
	
	public static HashMap<String, Object> ERROR(String message)
	{
		HashMap<String, Object> ret = new HashMap<String, Object> ();
		ret.put("status", 0);
		ret.put("message", message);
		ret.put("data", null);
		log.debug("fail:"+ret.toString());
		return ret;
	}
	
	public static HashMap<String, Object> AjaxSuccess(Object data)
	{HashMap<String, Object> ret = new HashMap<String, Object> ();
		ret.put("code", 0);
		ret.put("message", "Get data success!");
		ret.put("data", data);
		log.debug("success:"+ret.toString());
		return ret;
	}
	
	public static HashMap<String, Object> AjaxFail()
	{
		HashMap<String, Object> ret = new HashMap<String, Object> ();
		ret.put("code", 1);
		ret.put("message", "No data!");
		ret.put("data", null);
		log.debug("fail:"+ret.toString());
		return ret;
	}
	
	public static HashMap<String, Object> AjaxFail(String mesage)
	{
		HashMap<String, Object> ret = new HashMap<String, Object> ();
		ret.put("code", 1);
		ret.put("message", "Error: "+mesage);
		ret.put("data", null);
		log.debug("fail:"+ret.toString());
		return ret;
	}
	
	public static HashMap<String, Object> FAIL_CHANGEPASS_OLDNOTMATCH(Object data)
	{
		HashMap<String, Object> ret = new HashMap<String, Object> ();
		ret.put("status", 800);
		ret.put("message", "현재 비밀번호가 올바르지 않습니다.");
		ret.put("data", data);
		log.debug("fail:"+ret.toString());
		return ret;
	}
	
	public static HashMap<String, Object> FAIL_CHANGEPASS(Object data)
	{
		HashMap<String, Object> ret = new HashMap<String, Object> ();
		ret.put("status", 900);
		ret.put("message", "입력하신 비밀번호는 사용할 수 없습니다. 다른 비밀번호를 입력해주세요.");
		ret.put("data", data);
		log.debug("fail:"+ret.toString());
		return ret;
	}
	
	public static HashMap<String, Object> SUCCESS_CHANGEPASS(Object data)
	{
		HashMap<String, Object> ret = new HashMap<String, Object> ();
		ret.put("status", 200);
		ret.put("message", "");
		ret.put("data", data);
		log.debug("fail:"+ret.toString());
		return ret;
	}
	
}