/*
 * Created on 23 thg 12 2016 ( Time 16:57:52 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.rest.controller;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpSession;

import org.json.simple.parser.ParseException;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.trams.hello.bean.UserNotification;
import org.trams.hello.bean.jpa.UserNotificationEntity;
import org.trams.hello.business.service.UserNotificationService;
import org.trams.hello.business.service.mapping.UserNotificationServiceMapper;
import org.trams.hello.rest.common.AbstractRestController;
/**
 * Spring MVC controller for 'UserNotification' management.
 */
@RequestMapping("/v1/userNotification")
@Controller
public class UserNotificationRestController extends AbstractRestController{

	@Resource
	private UserNotificationService userNotificationService;
	@Resource
	private UserNotificationServiceMapper userNotificationServiceMapper;
	
		
	@RequestMapping( value="/all",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> findAll(
	) {
		
		try {
			List<UserNotification> list = userNotificationService.findAll();
			return SUCCESS(list);
		} catch (Exception e) {
			e.printStackTrace();
			return FAIL("HAVE ERROR: "+e);
		}
	} 
	
	@RequestMapping( value="/paging",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> findAllPaging(
	@RequestParam(value="" , defaultValue ="1") Integer page,
	HttpSession session
	) throws ParseException {
		//UserItem userItem = Login.getMobileLogin(session);
		HashMap<String, Object> ret =new HashMap<String, Object>();
		try {
			Page<UserNotificationEntity> list = userNotificationService.findAll(page);
			if(list.getContent()!=null){
				List<UserNotification> list_2 = new ArrayList<>();
				for (UserNotificationEntity i : list) {
					UserNotification u = userNotificationServiceMapper.mapUserNotificationEntityToUserNotification(i);
					list_2.add(u);
				}
				ret.put("list",list_2);
				ret.put("page", page);
				ret.put("totalPage", list.getTotalPages());
				return SUCCESS(ret);
			}else{
				return SUCCESS();
			}
		} catch (Exception e) {
			e.printStackTrace();
			return FAIL("HAVE ERROR: "+e);
		}
		
	} 


	@RequestMapping( value="/item/{id}",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> findOne(
	@PathVariable("id") Integer id,
	HttpSession session,
	@RequestHeader(value="token",required=false) String token
		) {
		//UserItem userItem = Login.getMobileLogin(session);
		try {
			UserNotification item= userNotificationService.findById(id);
			if(item!=null){
				return SUCCESS(item);
			}else{
				return SUCCESS();
			}
		} catch (Exception e) {
			e.printStackTrace();
			return FAIL("HAVE ERROR: "+e);
		}
		
	}
	
	@RequestMapping( value="/create",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> create(
	HttpSession session,
	@RequestBody UserNotification item
	) {
	try{
			item.setCreateDate(new Date());
			item.setUpdateDate(new Date());
			UserNotification create= userNotificationService.create(item);
			return SUCCESS(create);
		}catch(Exception e){
			e.printStackTrace();
			return FAIL("HAVE ERROR: "+e);
		}
	}

	@RequestMapping( value="/edit",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> edit(
	HttpSession session,
	@RequestBody UserNotification item
	) {
	try{
			item.setUpdateDate(new Date());
			UserNotification edit=userNotificationService.update(item);
			return SUCCESS(edit);
		}catch(Exception e){
			e.printStackTrace();
			return FAIL("HAVE ERROR: "+e);
		}
	}

	@RequestMapping( value="/delete/{id}",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> delete(
	@RequestHeader(value="token",required=false) String token,
	@PathVariable("id") Integer id) {
		try{
				userNotificationService.delete(id);
				return SUCCESS();
		}catch(Exception e){
				e.printStackTrace();
				return FAIL("HAVE ERROR: "+e);
		}
	}
	
}



