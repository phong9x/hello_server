/*
 * Created on 23 thg 12 2016 ( Time 14:27:41 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.rest.controller;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpSession;

import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.trams.hello.bean.Inquiry;
import org.trams.hello.bean.jpa.InquiryEntity;
import org.trams.hello.business.service.InquiryService;
import org.trams.hello.rest.common.AbstractRestController;
import org.trams.hello.web.common.utils.DataUtils;
/**
 * Spring MVC controller for 'Inquiry' management.
 */
@RequestMapping("/v1/inquiry")
@Controller
public class InquiryRestController extends AbstractRestController{

	@Resource
	private InquiryService inquiryService;
		
	@RequestMapping(value = "/all", method = { RequestMethod.POST, RequestMethod.GET }, produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> findAll() {

		try {
			List<Inquiry> list = inquiryService.findAll();
			return SUCCESS(list);
		} catch (Exception e) {
			e.printStackTrace();
			return FAIL("HAVE ERROR: " + e);
		}
	}

	@RequestMapping(value = "/paging", method = { RequestMethod.POST, RequestMethod.GET }, produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> findAllPaging(@RequestBody String json, HttpSession session) throws ParseException {
		// UserItem userItem = Login.getMobileLogin(session);
		HashMap<String, Object> ret = new HashMap<String, Object>();
		try {
			JSONParser parser = new JSONParser();
			JSONObject jsonObj = (JSONObject) parser.parse(json);
			Integer page = DataUtils.parseInt(jsonObj.get("page"));
			Page<InquiryEntity> list = inquiryService.findAll(page);
			if (list.getContent() != null) {
				ret.put("list", list.getContent());
				ret.put("page", page);
				ret.put("totalPage", list.getTotalPages());
				return SUCCESS(ret);
			} else {
				return SUCCESS();
			}
		} catch (Exception e) {
			e.printStackTrace();
			return FAIL("HAVE ERROR: " + e);
		}

	}

	@RequestMapping(value = "/item/{id}", method = { RequestMethod.POST, RequestMethod.GET }, produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> findOne(@PathVariable("id") Integer id, HttpSession session,
			@RequestHeader(value = "token", required = false) String token) {
		// UserItem userItem = Login.getMobileLogin(session);
		try {
			Inquiry item = inquiryService.findById(id);
			if (item != null) {
				return SUCCESS(item);
			} else {
				return SUCCESS();
			}
		} catch (Exception e) {
			e.printStackTrace();
			return FAIL("HAVE ERROR: " + e);
		}

	}

	@RequestMapping(value = "/create", method = { RequestMethod.POST, RequestMethod.GET }, produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> create(HttpSession session, @RequestBody Inquiry item) {
		try {
			item.setCreateDate(new Date());
			item.setUpdateDate(new Date());
			Inquiry create = inquiryService.create(item);
			return SUCCESS(create);
		} catch (Exception e) {
			e.printStackTrace();
			return FAIL("HAVE ERROR: " + e);
		}
	}

	@RequestMapping(value = "/edit", method = { RequestMethod.POST, RequestMethod.GET }, produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> edit(HttpSession session, @RequestBody Inquiry item) {
		try {
			item.setUpdateDate(new Date());
			Inquiry edit = inquiryService.update(item);
			return SUCCESS(edit);
		} catch (Exception e) {
			e.printStackTrace();
			return FAIL("HAVE ERROR: " + e);
		}
	}

	@RequestMapping(value = "/delete/{id}", method = { RequestMethod.POST, RequestMethod.GET }, produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> delete(@RequestHeader(value = "token", required = false) String token,
			@PathVariable("id") Integer id) {
		try {
			inquiryService.delete(id);
			return SUCCESS();
		} catch (Exception e) {
			e.printStackTrace();
			return FAIL("HAVE ERROR: " + e);
		}
	}
	
}



