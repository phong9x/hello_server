/*
 * Created on 20 thg 12 2016 ( Time 10:30:21 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.rest.controller;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Row;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.multipart.MultipartFile;
import org.trams.hello.bean.Business;
import org.trams.hello.bean.BusinessSub;
import org.trams.hello.bean.PageCustom;
import org.trams.hello.bean.PaymentHistory;
import org.trams.hello.bean.PaymentProfitData;
import org.trams.hello.bean.User;
import org.trams.hello.bean.api.CounselorProfitProcess;
import org.trams.hello.bean.jpa.BusinessEntity;
import org.trams.hello.bean.jpa.UserEntity;
import org.trams.hello.business.service.BusinessService;
import org.trams.hello.business.service.BusinessSubService;
import org.trams.hello.business.service.CounselingSessionService;
import org.trams.hello.business.service.PaymentHistoryService;
import org.trams.hello.business.service.UserService;
import org.trams.hello.business.service.mapping.BusinessServiceMapper;
import org.trams.hello.business.service.mapping.UserServiceMapper;
import org.trams.hello.rest.common.AbstractRestController;
import org.trams.hello.web.bean.search.SearchPushMember;
import org.trams.hello.web.common.ApplicationDefine;
import org.trams.hello.web.common.utils.KakaoPay;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.lgcns.kmpay.dto.DealApproveDto;
import com.lgcns.kmpay.service.CallWebService4NS;

import net.sf.json.JSONObject;

/**
 * Spring MVC controller for 'Question' management.
 */
@RequestMapping("/v1/public")
@Controller
public class AjaxRestControlor extends AbstractRestController {

	@Resource
	private UserService userService;
	@Resource
	private UserServiceMapper userServiceMapper;
	@Resource
	private BusinessService businessService;
	@Resource
	private PaymentHistoryService paymentHistoryService;
	@Resource
	private BusinessServiceMapper businessServiceMapper;
	
	@Resource
    private BusinessSubService businessSubService;
	@Resource
    private CounselingSessionService counselingSessionService;
	

	@RequestMapping( value="/getSubBusiness",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> getSubBusiness(
			@RequestParam(value = "bussinessId", defaultValue = "") Integer bussinessId,
			HttpSession session
			) {
		try {
				Page<BusinessEntity> list_bussiness =  businessService.listPagingBy_ParentBusinessId(bussinessId, 1, Integer.MAX_VALUE);
				if(list_bussiness.getContent() != null){
					List<Business> list = new ArrayList<>();
					for (BusinessEntity business : list_bussiness.getContent()) {
						list.add(businessServiceMapper.mapBusinessEntityToBusiness(business));
					}
					return AjaxSuccess(list);
				}
		} catch (Exception e) {
			e.printStackTrace();
		} 
		return AjaxFail();
	}
	
	@RequestMapping( value="/serchMemberByUsername",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> getMemberByBussiness(
			@RequestParam(value = "username", defaultValue = "") String username,
			HttpSession session
			) {
		try {
				UserEntity ue = userService.findOneBy_Username(username);
				if(ue != null){
					User  u = userServiceMapper.mapUserEntityToUser(ue);
					return AjaxSuccess(u);
				}else{
					return AjaxFail();
				}

		} catch (Exception e) {
			e.printStackTrace();
			return AjaxFail();
		} 
		
	}

	@RequestMapping( value="/business/manage-year",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> getManageYear(
			@RequestParam(value = "businessId", defaultValue = "0") Integer businessId,
			HttpSession session
			) {
		try {
			List<BusinessSub> manageYearList = new ArrayList<BusinessSub>();
			if(businessId > 0){
				manageYearList = businessSubService.findByBusinessId(businessId);
			}
			return AjaxSuccess(manageYearList);
		} catch (Exception e) {
			e.printStackTrace();
		} 
		return AjaxFail();
	}
	
	@RequestMapping( value="/business/manage-year/business-type",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> getManageYearByType(
			@RequestParam(value = "businessType", defaultValue = "") Short businessType,
			HttpSession session
			) {
		try {
			List<Integer> manageYearList = new ArrayList<Integer>();
			if(businessType != null){
				manageYearList = businessSubService.getListManageYearByType(businessType);
			}
			return AjaxSuccess(manageYearList);
		} catch (Exception e) {
			e.printStackTrace();
		} 
		return AjaxFail();
	}
	
	@RequestMapping( value="/business/business-sub/manager-year",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> getBusinessSubByManagerYear(
			@RequestParam(value = "manageYear", defaultValue = "") Integer manageYear,
			@RequestParam(value = "businessType", defaultValue = "") Short businessType,
			HttpSession session
			) {
		try {
			List<BusinessSub> manageYearList = new ArrayList<BusinessSub>();
			if(manageYear != null){
				manageYearList = businessSubService.listPagingByManagerYearAndBusinessType(manageYear, businessType);
			}
			return AjaxSuccess(manageYearList);
		} catch (Exception e) {
			e.printStackTrace();
		} 
		return AjaxFail();
	}
	
	@RequestMapping( value="/business/business-sub",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> getBusinessSub(
			@RequestParam(value = "businessId", defaultValue = "0") Integer businessId,
			@RequestParam(value = "manageYear", defaultValue = "0") Integer manageYear,
			HttpSession session
			) {
		try {
			List<BusinessSub> manageYearList = new ArrayList<BusinessSub>();
			if(businessId > 0 && manageYear > 0){
				manageYearList = businessSubService.findByBusinessIdAndManageYear(businessId, manageYear);
			}
			return AjaxSuccess(manageYearList);
		} catch (Exception e) {
			e.printStackTrace();
		} 
		return AjaxFail();
	}
	
	@RequestMapping( value="/processPayment",
			method = RequestMethod.POST,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> processPayment(
			@RequestParam(value = "userId", defaultValue = "") Integer userId,
			@RequestParam(value = "paymethod", defaultValue = "") String paymethod,
			@RequestParam(value = "fee", defaultValue = "") Integer fee,
			@RequestParam(value = "osName", defaultValue = "") String osName
			) {
		try {
			PaymentHistory p = new PaymentHistory();
			p.setCreateDate(new Date());
			p.setMoney(0);
			p.setOsName(osName);
			
			p.setStatus(ApplicationDefine.Recharge_Status.Watting.getCode());
			p.setTypeCoin(ApplicationDefine.Payment_TypeCoin.Coin.getCode());
			p.setTypePayment(ApplicationDefine.Payment_TypePaymentStatus.Recharge.getCode());
			p.setTypeUse(ApplicationDefine.Recharge_TypeUse.NormalCharging.getCode());
			p.setReason(ApplicationDefine.Recharge_Reson.NormalCharging.getCode());
			Integer paymentMethodId = ApplicationDefine.PaymentHistory_PaymentMethod.CellPhone.getCode(); 
			if(paymethod.equals("wcard")){
				paymentMethodId= ApplicationDefine.PaymentHistory_PaymentMethod.Card.getCode();
			}else if(paymethod.equals("KAKAOPAY")){
				paymentMethodId = ApplicationDefine.PaymentHistory_PaymentMethod.Kakao.getCode();
			}
			p.setPaymentMethodId(paymentMethodId);
			p.setCoin(fee);
			p.setUpdateDate(new Date());
			p.setUserId(userId);
			p = paymentHistoryService.create(p);
			return AjaxSuccess(p.getId());
		} catch (Exception e) {
			e.printStackTrace();
			return AjaxFail(e.getMessage());
		} 
		
	}
	
	@RequestMapping( value="/push-member",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> getBusinessSub(
			@ModelAttribute SearchPushMember s,
			HttpServletRequest request,
			HttpSession session
			) {
		try {
			PageCustom<User> listPage = userService.filterPushMember(s, 1, 30);
			session.setAttribute("search_member_push", s);
			return AjaxSuccess(listPage);
		} catch (Exception e) {
			e.printStackTrace();
		} 
		return AjaxFail();
	}
	
	@RequestMapping( value="/push-member/paging",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> pushMember(
			@RequestParam(value ="page", defaultValue="1") Integer page,
			HttpServletRequest request,
			HttpSession session
			) {
		try {
			SearchPushMember s  = (SearchPushMember)session.getAttribute("search_member_push");
			PageCustom<User> listPage = userService.filterPushMember(s, page, 30);
			session.setAttribute("search_member_push", s);
			return AjaxSuccess(listPage);
		} catch (Exception e) {
			e.printStackTrace();
		} 
		return AjaxFail();
	}
	
	@RequestMapping( value="/push-member/delete",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> pushMember_delete(
			@RequestParam(value ="deleteUserIds[]", defaultValue="") Integer[] deleteUserIds,
			HttpServletRequest request,
			HttpSession session
			) {
		try {
			
			System.out.println(deleteUserIds[0]);
			SearchPushMember s  = (SearchPushMember)session.getAttribute("search_member_push");
			if(s.getDeleteUserIds() == null){
				s.setDeleteUserIds(deleteUserIds);
			}else{
				List<Integer> list_delete = Arrays.asList(s.getDeleteUserIds()); 
				for (Integer i : deleteUserIds) {
					list_delete.add(i);
				}
				Integer[] deleteCovert = new Integer[list_delete.size()];
				s.setDeleteUserIds(list_delete.toArray(deleteCovert));
			}
			PageCustom<User> listPage = userService.filterPushMember(s, 1, 30);
			session.setAttribute("search_member_push", s);
			return AjaxSuccess(listPage);
		} catch (Exception e) {
			e.printStackTrace();
		} 
		return AjaxFail();
	}
	
	
	@RequestMapping( value="/push-device",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> push_device(
			@ModelAttribute SearchPushMember s,
			HttpServletRequest request,
			HttpSession session
			) {
		try {
			PageCustom<User> listPage = userService.filterPushMember(s, 1, 30);
			session.setAttribute("search_device_push", s);
			return AjaxSuccess(listPage);
		} catch (Exception e) {
			e.printStackTrace();
		} 
		return AjaxFail();
	}
	
	@RequestMapping( value="/push-device/paging",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> push_device_paging(
			@RequestParam(value ="page", defaultValue="1") Integer page,
			HttpServletRequest request,
			HttpSession session
			) {
		try {
			SearchPushMember s  = (SearchPushMember)session.getAttribute("search_device_push");
			PageCustom<User> listPage = userService.filterPushMember(s, page, 30);
			session.setAttribute("search_device_push", s);
			return AjaxSuccess(listPage);
		} catch (Exception e) {
			e.printStackTrace();
		} 
		return AjaxFail();
	}
	
	@RequestMapping( value="/push-device/delete",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> push_device_delete(
			@RequestParam(value ="deleteUserIds[]", defaultValue="") Integer[] deleteUserIds,
			HttpServletRequest request,
			HttpSession session
			) {
		try {
			
			SearchPushMember s  = (SearchPushMember)session.getAttribute("search_device_push");
			if(s.getDeleteUserIds() == null){
				s.setDeleteUserIds(deleteUserIds);
			}else{
				List<Integer> list_delete = new ArrayList<>();
				list_delete.addAll(Arrays.asList(s.getDeleteUserIds())); 
				for (Integer i : deleteUserIds) {
					System.out.println(i);
					list_delete.add(i);
				}
				Integer[] deleteCovert = new Integer[list_delete.size()];
				s.setDeleteUserIds(list_delete.toArray(deleteCovert));
			}
			PageCustom<User> listPage = userService.filterPushMember(s, 1, 30);
			session.setAttribute("search_device_push", s);
			return AjaxSuccess(listPage);
		} catch (Exception e) {
			e.printStackTrace();
		} 
		return AjaxFail();
	}
	
	@RequestMapping( value="/counselor-profit/upload-excel",
			method = RequestMethod.POST,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> counselor_profit(
			@ModelAttribute CounselorProfitProcess c,
			HttpServletRequest request,
			HttpSession session
			) {
		try {
			MultipartFile file_excel = c.getExcel();
			if(file_excel.getSize() > 0){
				System.out.println(file_excel.getOriginalFilename());
				//File convFile = new File("D:\\"+file_excel.getOriginalFilename());
				
				//file_excel.transferTo(convFile);
				
		        //FileInputStream file = new FileInputStream(convFile );

		        //Create Workbook instance holding reference to .xlsx file
		        HSSFWorkbook workbook = new HSSFWorkbook(c.getExcel().getInputStream());

		        //Get first/desired sheet from the workbook
		        HSSFSheet sheet = workbook.getSheetAt(0);

		        //Iterate through each rows one by one
		        Iterator<Row> rowIterator = sheet.iterator();
		        int index=0;
		        System.out.println("Read file excel..............");
		        while (rowIterator.hasNext())
		        {
		            Row row = rowIterator.next();
		            if(index++ <3){
		            	continue;
		            }
		            
		            //For each row, iterate through all the columns
		            try {
		            	String fullname =row.getCell(3).toString().trim();
		            	String username =row.getCell(4).toString().trim();
		            	System.out.println("--------------------");
		            	System.out.println("fullname: "+fullname);
		            	System.out.println("username: "+username);
		            	if(!fullname.isEmpty() && !username.isEmpty()){
		            		String statusName =row.getCell(11).toString().trim();
		            		System.out.println("statusName: "+statusName);
		            		Short status = 0;
		            		if(statusName.equals("지급완료")){
		            			status = 1;
		            		}
		            		System.out.println("status: "+status);
		            		boolean exists = false;
		            		 for (PaymentProfitData p : c.getProfit()) {
		            			 if (p.getName().equals(fullname) && p.getUsername().equals(username)) {
		            		            p.setStatus(status);
		            		            p.setType((short)1);
		            		            exists = true;
		            		        }
							} 
		            		 if(exists == false){
		            			 return AjaxFail("Data in excel have not exists in db");
		            		 }
		            	}else{
		            		return AjaxFail("Data in excel have incorrect format");
		            	}
					} catch (Exception e) {
						e.printStackTrace();
						return AjaxFail(e.getMessage());
					}
		            index++;
		        }
		        System.out.println("End file excel..............");
		        workbook.close();
		        return AjaxSuccess(c.getProfit());
			}else{
				return AjaxFail("No File");
			}
			
			
		} catch (Exception e) {
			e.printStackTrace();
			return AjaxFail(e.getMessage());
		} 
	}
	

	@SuppressWarnings("unchecked")
	@RequestMapping( value="/kakaopay/txnid",
			method = RequestMethod.POST,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> getTxnId(HttpServletRequest request,
			HttpSession session,
			@ModelAttribute DealApproveDto approveDto
			) {
		// 가맹점에서 MPay로 전문을 보내기 위한 객체 생성
		// 타임아웃 설정
		int timeOut = 20;
		// 모듈이 설치되어 있는 경로 설정
		CallWebService4NS webService = new CallWebService4NS(timeOut);

		// 로그 디렉토리 생성
		webService.setLogHome(KakaoPay.logHome);
		// 프로퍼티 위치지정
		webService.setKMPayHome(KakaoPay.cnsPayHome);
		
		// 서버로부터 받은 결과값 저장 JSONObject
	    JSONObject  resultJSONObject =  new JSONObject();
	    HashMap<String, Object> result = null;
		try {
		    resultJSONObject = webService.requestDealApprove(approveDto);
			result = new ObjectMapper().readValue(resultJSONObject.toString(), HashMap.class);
		} catch (Exception e) {
			e.printStackTrace();
		}
	    
		return AjaxSuccess(result);
	}
	
	@RequestMapping( value="/member/checkWithDrawl",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> getBusinessSub(
			@RequestParam(value = "userId", defaultValue = "0") Integer userId,
			HttpSession session
			) {
		try {
			Integer total = counselingSessionService.countCounselingSessionHaveCounselYet(userId, new Date());
			return AjaxSuccess(total);
		} catch (Exception e) {
			e.printStackTrace();
		} 
		return AjaxFail();
	}
}
