/*
 * Created on 20 thg 12 2016 ( Time 10:30:21 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.rest.controller;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Pattern;

import javax.annotation.Resource;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang3.RandomStringUtils;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationEventPublisher;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.multipart.MultipartFile;
import org.trams.hello.bean.Category;
import org.trams.hello.bean.Faq;
import org.trams.hello.bean.Inquiry;
import org.trams.hello.bean.LoginHistory;
import org.trams.hello.bean.Message;
import org.trams.hello.bean.Notice;
import org.trams.hello.bean.PasswordHistory;
import org.trams.hello.bean.Policy;
import org.trams.hello.bean.PushNotification;
import org.trams.hello.bean.ReportDaily;
import org.trams.hello.bean.RequestUserPsychological;
import org.trams.hello.bean.User;
import org.trams.hello.bean.UserItem;
import org.trams.hello.bean.UserNotification;
import org.trams.hello.bean.UserPsychological;
import org.trams.hello.bean.UserPsychologicalFile;
import org.trams.hello.bean.UserReceiveMessage;
import org.trams.hello.bean.api.PromotionPageApi;
import org.trams.hello.bean.jpa.BusinessEntity;
import org.trams.hello.bean.jpa.CategoryEntity;
import org.trams.hello.bean.jpa.CounselorEntity;
import org.trams.hello.bean.jpa.NotificationEntity;
import org.trams.hello.bean.jpa.PromotionPageEntity;
import org.trams.hello.bean.jpa.PromotionPageLinkEntity;
import org.trams.hello.bean.jpa.PushNotificationEntity;
import org.trams.hello.bean.jpa.ReportDailyEntity;
import org.trams.hello.bean.jpa.RequestUserPsychologicalEntity;
import org.trams.hello.bean.jpa.UserEntity;
import org.trams.hello.bean.jpa.UserNotificationEntity;
import org.trams.hello.bean.jpa.UserQuestionaireEntity;
import org.trams.hello.bean.jpa.VersionAppEntity;
import org.trams.hello.business.event.FindPasswordEvent;
import org.trams.hello.business.event.GenerateTokenEvent;
import org.trams.hello.business.listener.CounselingSessionRealtimeAddedListener;
import org.trams.hello.business.listener.CounselingSessionScheduleAddedListener;
import org.trams.hello.business.listener.CounselorMessageAddedListener;
import org.trams.hello.business.listener.PsyTestPaymentAddedListener;
import org.trams.hello.business.service.BusinessService;
import org.trams.hello.business.service.BusinessSubService;
import org.trams.hello.business.service.CategoryService;
import org.trams.hello.business.service.CounselorService;
import org.trams.hello.business.service.DeviceService;
import org.trams.hello.business.service.FaqService;
import org.trams.hello.business.service.InquiryService;
import org.trams.hello.business.service.LoginHistoryService;
import org.trams.hello.business.service.MessageService;
import org.trams.hello.business.service.NoticeService;
import org.trams.hello.business.service.NotificationService;
import org.trams.hello.business.service.PasswordHistoryService;
import org.trams.hello.business.service.PolicyService;
import org.trams.hello.business.service.PromotionPageLinkService;
import org.trams.hello.business.service.PromotionPageService;
import org.trams.hello.business.service.PushNotificationService;
import org.trams.hello.business.service.ReportDailyService;
import org.trams.hello.business.service.RequestUserPsychologicalService;
import org.trams.hello.business.service.UserBusinessService;
import org.trams.hello.business.service.UserNotificationService;
import org.trams.hello.business.service.UserPsychologicalFileService;
import org.trams.hello.business.service.UserPsychologicalService;
import org.trams.hello.business.service.UserQuestionaireService;
import org.trams.hello.business.service.UserReceiveMessageService;
import org.trams.hello.business.service.UserService;
import org.trams.hello.business.service.VersionAppService;
import org.trams.hello.business.service.mapping.CategoryServiceMapper;
import org.trams.hello.business.service.mapping.ReportDailyServiceMapper;
import org.trams.hello.business.service.mapping.UserNotificationServiceMapper;
import org.trams.hello.business.service.mapping.UserServiceMapper;
import org.trams.hello.common.mail.Mail;
import org.trams.hello.rest.common.AbstractRestController;
import org.trams.hello.rest.common.AuthorizationToken;
import org.trams.hello.rest.common.ReturnObjectData;
import org.trams.hello.rest.model.enumeration.LoginType;
import org.trams.hello.web.common.ApplicationDefine;
import org.trams.hello.web.common.Login;
import org.trams.hello.web.common.utils.DataUtils;
import org.trams.hello.web.common.utils.EncryptionUtils;
import org.trams.hello.web.common.utils.FileUtils;

import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

/**
 * Spring MVC controller for 'Question' management.
 */
@RequestMapping("/v1/public")
@Controller
public class PublicRestControlor extends AbstractRestController {

	private static final Pattern EMAIL_PATTERN = Pattern.compile("^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,6}$",
			Pattern.CASE_INSENSITIVE);
	@Resource
	private PromotionPageLinkService promotionPageLinkService;
	@Resource
	private UserNotificationServiceMapper userNotificationServiceMapper;
	@Resource
	private UserQuestionaireService userQuestionaireService;
	@Resource
	private ReportDailyService reportDailyService;
	@Resource
	private RequestUserPsychologicalService requestUserPsychologicalService;
	@Resource
	private PushNotificationService pushNotificationService;
	@Resource
	private ReportDailyServiceMapper reportDailyServiceMapper;
	@Resource
	private CounselorService counselorService;
	@Resource
	private UserService userService;
	@Resource
	private UserBusinessService userBusinessService;
	@Resource
	private UserServiceMapper userServiceMapper;
	@Resource
	private UserNotificationService userNotificationService;
	@Resource
	private DeviceService deviceService;
	@Resource
	private BusinessService businessService;
	@Resource
	private BusinessSubService businessSubService;
	@Resource
	private NotificationService notificationService;
	@Resource
	private PromotionPageService promotionPageService;
	@Resource
	private CategoryService categoryService;
	@Resource
	private CategoryServiceMapper categoryServiceMapper;
	@Resource
	private InquiryService inquiryService;
	@Resource
	private VersionAppService versionAppService;
	@Resource
	private UserPsychologicalService userPsychologicalService;
	@Resource
	private ServletContext servletContext;
	@Resource
	private MessageService messageService;
	@Resource
	private UserPsychologicalFileService userPsychologicalFileService;
	@Resource
	private UserReceiveMessageService userReceiveMessageService;
	@Autowired
	private PasswordHistoryService passwordHistoryService;
	@Autowired
	private ApplicationEventPublisher applicationEventPublisher;
	@Autowired
	private CounselingSessionRealtimeAddedListener counselingSessionRealtimeAddedListener;
	@Autowired
	private CounselingSessionScheduleAddedListener counselingSessionScheduleAddedListener;
	@Autowired
	private PsyTestPaymentAddedListener psyTestPaymentAddedListener;
	@Autowired
	private CounselorMessageAddedListener counselorMessageAddedListener;
	@Autowired
	private NoticeService noticeService;
	@Autowired
	private FaqService faqService;
	@Autowired
	private PolicyService policyService;
	@Autowired
	private LoginHistoryService loginHistoryService;

	@RequestMapping(value = "/logout", method = RequestMethod.POST)
	@ResponseBody
	@ResponseStatus(HttpStatus.OK)
	public HashMap<String, Object> logout(@RequestParam Map<String, Object> params, HttpSession session,
			HttpServletRequest httpRequest) {
		HashMap<String, Object> ret = new HashMap<String, Object>();
		String token = httpRequest.getHeader("token");
		if (token != null) {
			UserItem user = AuthorizationToken.convertToObject(token);
			if (user != null) {
				return SUCCESS(ret);
			} else {
				return FAIL_LOGOUT(ret);
			}
		}
		return ret;
	}

	@RequestMapping(value = "/newestVersion", method = { RequestMethod.POST,
			RequestMethod.GET }, produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> findAll(@RequestParam(required = true) Short os) {
		try {
			List<VersionAppEntity> list = versionAppService.listBy_Os(os, 1, 1);
			if (list.size() > 0) {
				return SUCCESS(list.get(0));
			} else {
				return FAIL();
			}
		} catch (Exception e) {
			e.printStackTrace();
			return FAIL("HAVE ERROR: " + e);
		}
	}

	@RequestMapping(value = "/generatetoken", method = RequestMethod.POST)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> generateCode(@RequestParam Map<String, Object> params) {
		try {
			String phone = String.valueOf(params.get("phone"));
			if (userService.isDuplicatePhone(phone)) {
				return SUCCESS_DUPLICATE_PHONE(Collections.singletonMap("token", null), true);
			} else {
				String token = RandomStringUtils.randomNumeric(6);
				applicationEventPublisher.publishEvent(new GenerateTokenEvent(this, phone, token));
				return SUCCESS_DUPLICATE_PHONE(Collections.singletonMap("token", token), false);
			}
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR("HAVE ERROR: " + e);
		}
	}

	@RequestMapping(value = "/generateemailtoken", method = RequestMethod.POST)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> generateCodeEmail(@RequestParam Map<String, Object> params) {
		try {
			String email = String.valueOf(params.get("email"));
			UserEntity existedUser = userService.findOneByEmail(email);
			if (existedUser != null) {
				return FAIL("이미 등록된 이메일 주소입니다.");
			}

			String token = RandomStringUtils.randomNumeric(6);

			Map<String, Object> mailModel = new HashMap<>();
			mailModel.put("token", token);
			mailModel.put("subject", "[Hello] 회원가입 이메일 인증");
			Mail.sendEmailTemplate(email, mailModel, Mail.EmailTemplate.AUTHEN_REGISTER_EMAIL,
					ApplicationDefine.EmailSubject.AUTHEN_REGISTER_EMAIL.getCode());

			return SUCCESS(Collections.singletonMap("token", token));
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR("HAVE ERROR: " + e);
		}
	}

	@RequestMapping(value = "/generateemailtokenunchecked", method = RequestMethod.POST)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> generateCodeEmailUnchecked(@RequestParam Map<String, Object> params) {
		try {
			String email = String.valueOf(params.get("email"));
			String dayOfBirth = String.valueOf(params.get("dayOfBirth"));
			DateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
			UserEntity existedUser = userService.findOneByEmailAndBirthDay(email, formatter.parse(dayOfBirth));
			if (existedUser == null) {
				return FAIL("입력하신 정보와 일치하는 회원이 없습니다.");
			} else {

				String token = RandomStringUtils.randomNumeric(6);

				Map<String, Object> mailModel = new HashMap<>();
				mailModel.put("token", token);
				mailModel.put("subject", "[Hello] 비밀번호 찾기 이메일 인증");
				Mail.sendEmailTemplate(email, mailModel, Mail.EmailTemplate.VERYFY_EMAIL,
						ApplicationDefine.EmailSubject.FINDPW_VERYFY_EMAIL.getCode());

				return SUCCESS(Collections.singletonMap("token", token));
			}
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR("HAVE ERROR: " + e);
		}
	}

	@RequestMapping(value = "/register/complete", method = RequestMethod.POST)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> register(@RequestParam Map<String, Object> params) throws ParseException {

		String mail = String.valueOf(params.get("mail"));
		String password = String.valueOf(params.get("password"));
		String name = String.valueOf(params.get("name"));
		String birthDay = String.valueOf(params.get("birthDay"));
		String gender = String.valueOf(params.get("gender"));
		String phone = String.valueOf(params.get("phone"));
		String uuid = String.valueOf(params.get("uuid"));
		String osName = String.valueOf(params.get("osName"));
		String osVersion = String.valueOf(params.get("osVersion"));
		Integer appVesionId = 1;
		try {
			appVesionId = Integer.parseInt(String.valueOf(params.get("appVesionId")));
		} catch (Exception e) {
			appVesionId = 1;
		}
		String deviceName = String.valueOf(params.get("deviceName"));

		// validate input
		if (mail.equals("null") || !EMAIL_PATTERN.matcher(mail).find()) {
			return FAIL("Mail is wrong");
		} else {
			UserEntity existedUser = userService.findOneByEmail(mail);
			if (existedUser != null) {
				return FAIL("이미 등록된 이메일 주소입니다.");
			}
		}

		if (password.equals("null") || password.length() < 8) {
			return FAIL("비밀번호는 8~20자 이내로 입력해주세요.");
		}
		if (name.equals("null") || name.trim().isEmpty()) {
			return FAIL("Name is wrong");
		}
		if (birthDay.equals("null") || birthDay.trim().isEmpty()) {
			return FAIL("Birthday is wrong");
		}
		if (gender.equals("null") || gender.trim().isEmpty()) {
			return FAIL("Gender is wrong");
		}

		try {
			User user = new User();

			user.setOsName(osName.toLowerCase());
			user.setOsVersion(osVersion);
			user.setAppVesionId(appVesionId);
			user.setDeviceName(deviceName);
			user.setDeviceId(uuid);
			user.setUsername(mail);
			user.setEmail(mail);
			user.setFullname(name);
			if (!phone.isEmpty() && !"null".equals(phone)) {
				user.setPhone(phone);
				user.setIsForeign((short)0);
			}else{
				user.setIsForeign((short)1);
			}
			user.setPassword(EncryptionUtils.jwtBuild(password));
			user.setGender(Short.valueOf(gender));
			user.setDayOfBirth(new Date(Long.parseLong(birthDay)));
			user.setStatusActive((short) 0);
			user.setLoginFirst(1);
			user.setUpdateDate(new Date());
			user.setCoin(0);
			user.setHeart(0);
			user.setBannedNumber(0);
			user.setChargeNumber(0);
			user.setTestPsychologicalNumber(0);
			user.setSettingAll((short) 1);
			user.setEventNoticeNotification((short) 1);
			user.setIniquiryNotification((short) 1);
			user.setMessageNotification((short) 1);
			user.setReservationNotification((short) 1);
			user.setChangeHeartDate(new Date());
			user.setCreateDate(new Date());
			user.setUpdateDate(new Date());
			user.setVoucherNumber(0);
			user.setIsDelete(0);
			user.setRoleId(ApplicationDefine.USER_ROLE_USER);
			// get data
			User createdUser = userService.create(user);
			userBusinessService.checkBusinessMember(createdUser);
			
			return SUCCESS();
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR("HAVE ERROR: " + e);
		}
	}

	@RequestMapping(value = "/login", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> login(@RequestParam Map<String, Object> params, HttpServletResponse response,
			HttpSession session) throws ParseException {
		String username = String.valueOf(params.get("username"));
		String password = String.valueOf(params.get("password"));
		String remember = String.valueOf(params.get("remember"));
		String uuid = String.valueOf(params.get("uuid"));
		String osName = String.valueOf(params.get("osName"));
		String osVersion = String.valueOf(params.get("osVersion"));
		Integer appVesionId = 1;
		if (osName == null) {
			osName = "android";
		}
		try {
			appVesionId = Integer.parseInt(String.valueOf(params.get("appVesionId")));
		} catch (Exception e) {
			appVesionId = 1;
		}
		String deviceName = String.valueOf(params.get("deviceName"));
		try {
			User user = userService.loginApp(username);
			if (user == null) {
				return FAIL("아이디 또는 비밀번호가 일치하지 않습니다.");
			}
			Calendar c = Calendar.getInstance();
			HashMap<String, Object> ret = new HashMap<String, Object>();
			if (user.getPassword().equals(EncryptionUtils.jwtBuild(password))) {

				user.setOsName(osName.toLowerCase());
				user.setOsVersion(osVersion);
				user.setAppVesionId(appVesionId);
				user.setDeviceName(deviceName);
				user.setDeviceId(uuid);
				user.setLastLogin(c.getTime());
				userService.update(user);

				// login history
				if(!user.getDeviceId().isEmpty() && !user.getDeviceId().equals("")){
					LoginHistory loginHistory = loginHistoryService.listPagingByDeviceIdAndUserIdAndCreateDate(uuid, user.getId(),
							new Date());
					if (loginHistory == null) {
						LoginHistory l = new LoginHistory();
						l.setCreateDate(new Date());
						Calendar birthDay = Calendar.getInstance();
						birthDay.setTime(user.getDayOfBirth());
						int age = c.get(Calendar.YEAR) - birthDay.get(Calendar.YEAR);
						if (age < 20) {
							l.setAge((short) 1);
						} else if (age < 30) {
							l.setAge((short) 2);
						} else if (age < 40) {
							l.setAge((short) 3);
						} else if (age < 50) {
							l.setAge((short) 4);
						} else {
							l.setAge((short) 5);
						}
						l.setGender(user.getGender());
						l.setDeviceId(user.getDeviceId());
						l.setUserId(user.getId());
						l.setTypeOs(osName);
						if (user.getRoleId() == ApplicationDefine.USER_ROLE_USER) {
							l.setTypeUser((short) 1);
						} else {
							l.setTypeUser((short) 2);
						}
						l.setLoginLast(new Date());
						loginHistoryService.create(l);
						if(user.getRoleId().equals(ApplicationDefine.USER_ROLE_USER)
						|| user.getRoleId().equals(ApplicationDefine.USER_ROLE_MEMBER_BUSSINESS)){
							userBusinessService.checkBusinessMember(user);
						}
						
						ReportDaily reportDaily = reportDailyService.findByCreateDate(c.getTime());
						if(reportDaily == null){
							reportDaily = new ReportDaily();
							reportDaily.setCreateDate(new Date());
							reportDaily.setLoginNumber(1);
							reportDailyService.create(reportDaily);
						}else{
							reportDaily.setLoginNumber(reportDaily.getLoginNumber() + 1);
							reportDailyService.update(reportDaily);
						}
						
					}else{
						loginHistory.setLoginLast(new Date());
						loginHistoryService.update(loginHistory);
					}
				}
				// save user session
				UserItem u = new UserItem();
				u.setId(user.getId());
				u.setRole(user.getRoleId().toString());
				u.setOsName(osName);
				c.add(Calendar.DATE, 1);
				u.setExpiration(c.getTime().getTime());
				String token = EncryptionUtils.jwtBuild(u);
				// save device
				deviceService.upsert(user.getId(), uuid);
				
				if (user.getStatusActive() == 2) {
					ret.put("login", LoginType.DORMANT.getCode());
					ret.put("token", token);
					return SUCCESS(ret);
				} else {
					if (!remember.equals("null")) {
						c.add(Calendar.MONTH, 1);
						u.setExpiration(c.getTime().getTime());
						token = EncryptionUtils.jwtBuild(u);
					}
					if (user.getRoleId() == 5 && user.getBusinessSubId() != null) {
						ret.put("login", LoginType.BUSINESS.getCode());
						ret.put("token", token);
						return SUCCESS(ret);
					}
					ret.put("login", LoginType.NORMAL.getCode());
					ret.put("token", token);
					return SUCCESS(ret);
				}
				
			} else if (EncryptionUtils.jwtBuild(password).equalsIgnoreCase(user.getPasswordTemp())) {
				UserItem u = new UserItem();
				u.setId(user.getId());
				u.setRole(user.getRoleId().toString());
				c.add(Calendar.DATE, 1);
				u.setExpiration(c.getTime().getTime());
				String token = EncryptionUtils.jwtBuild(u);
				ret.put("login", LoginType.TEMPORARY_PASSWORD.getCode());
				ret.put("token", token);
				return SUCCESS(ret);
			} else {
				return FAIL();
			}
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR("아이디 또는 비밀번호가 일치하지 않습니다.");
		}
	}

	@RequestMapping(value = "/findId", method = RequestMethod.GET)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> findId(@RequestParam Map<String, Object> params) {
		try {
			String name = String.valueOf(params.get("name"));
			String dayOfBirth = String.valueOf(params.get("dayOfBirth"));
			String phone = String.valueOf(params.get("phone"));

			DateFormat formatter = new SimpleDateFormat("YYYY/MM/dd");

			Page<UserEntity> userEntities = userService.findByFullname(name, 1, 10);
			UserEntity userEntity = null;
			for (UserEntity ue : userEntities.getContent()) {
				if (dayOfBirth.equalsIgnoreCase(formatter.format(ue.getDayOfBirth()))) {
					if (!phone.equals("null") && !phone.isEmpty()) {
						if (phone.equalsIgnoreCase(ue.getPhone())) {
							userEntity = ue;
						}
					}
				}
			}
			if (userEntity == null) {
				return FAIL("회원 정보가 일치하지 않습니다");
			} else {
				String username = userEntity.getEmail();
				StringBuilder sb = new StringBuilder(username);
				int indexOfAt = sb.indexOf("@");

				if (indexOfAt > 2) {
					sb.replace(indexOfAt - 2, indexOfAt, "**");
				} else {
					sb.replace(0, indexOfAt, "*");
				}

				return SUCCESS(Collections.singletonMap("id", sb.toString()));
			}
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR("회원 정보가 일치하지 않습니다");
		}
	}
	
	@RequestMapping(value = "/generatetokenPhone", method = RequestMethod.POST)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> generatetokenPhone(@RequestParam Map<String, Object> params) {
		try {
			String phone = String.valueOf(params.get("phone"));
			//ID
			String email = String.valueOf(params.get("email"));
			//birth
			String dayOfBirth = String.valueOf(params.get("dayOfBirth"));
			DateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
			
			UserEntity user = userService.findOneByEmailAndBirthDayAndPhone(email, formatter.parse(dayOfBirth) , phone);
			if (user != null) {
				String token = RandomStringUtils.randomNumeric(6);
				applicationEventPublisher.publishEvent(new GenerateTokenEvent(this, phone, token));
				return SUCCESS_GENERATETOKEN_PHONE(Collections.singletonMap("token", token), false);
			} else {
				return SUCCESS_GENERATETOKEN_PHONE(Collections.singletonMap("token", null), true);
			}
			
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR("HAVE ERROR: " + e);
		}
	}

	@RequestMapping(value = "/findPassword/phone", method = RequestMethod.GET)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> findPasswordPhone(@RequestParam Map<String, Object> params) {
		try {
			String mail = String.valueOf(params.get("mail"));
			String phone = String.valueOf(params.get("phone"));

			UserEntity userEntity = userService.findOneByEmail(mail);

			if (userEntity == null) {
				return FAIL("입력하신 정보와 일치하는 회원이 없습니다.");
			} else {
				if (userEntity.getPhone().equalsIgnoreCase(phone)) {
					User user = userServiceMapper.mapUserEntityToUser(userEntity);
					// generate temporary password
					String tmpPassword = RandomStringUtils.randomAlphabetic(8);
					user.setPasswordTemp(EncryptionUtils.jwtBuild(tmpPassword));
					user.setPassword(user.getPasswordTemp());

					userService.update(user);
					applicationEventPublisher.publishEvent(new FindPasswordEvent(this, phone, tmpPassword));

					return SUCCESS(Collections.singletonMap("tmpPassword", tmpPassword));
				} else {
					return FAIL("입력하신 정보와 일치하는 회원이 없습니다.");
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
			return ERROR("HAVE ERROR: " + e);
		}
	}

	@RequestMapping(value = "/findPassword/email", method = RequestMethod.GET)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> findPasswordEmail(@RequestParam Map<String, Object> params) {
		try {
			String mail = String.valueOf(params.get("mail"));
			String dayOfBirth = String.valueOf(params.get("dayOfBirth"));
			DateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
			UserEntity userEntity = userService.findOneByEmailAndBirthDay(mail, formatter.parse(dayOfBirth));

			if (userEntity == null) {
				return FAIL("입력하신 정보와 일치하는 회원이 없습니다.");
			} else {
				User user = userServiceMapper.mapUserEntityToUser(userEntity);
				// generate temporary password
				String tmpPassword = RandomStringUtils.randomAlphabetic(8);
				user.setPasswordTemp(EncryptionUtils.jwtBuild(tmpPassword));

				// send email
				Map<String, Object> mailModel = new HashMap<>();
				mailModel.put("tmpPassword", tmpPassword);
				mailModel.put("subject", "[Hello] 임시 비밀번호 발송 ");
				Mail.sendEmailTemplate(mail, mailModel, Mail.EmailTemplate.SEND_TMP_PASSWORD,
						ApplicationDefine.EmailSubject.FINDPW_EMAIL.getCode());

				user.setPassword(EncryptionUtils.jwtBuild(tmpPassword));
				userService.update(user);

				PasswordHistory p = new PasswordHistory();
				p.setPassword(EncryptionUtils.jwtBuild(tmpPassword));
				p.setUserId(user.getId());
				p.setCreateDate(new Date());
				p.setUpdateDate(new Date());
				p = passwordHistoryService.create(p);

				return SUCCESS(Collections.singletonMap("tmpPassword", tmpPassword));
			}

		} catch (Exception e) {
			e.printStackTrace();
			return ERROR("입력하신 정보와 일치하는 회원이 없습니다.");
		}
	}

	@RequestMapping(value = "/notifications", method = RequestMethod.GET)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> notifications(@RequestParam Map<String, Object> params,
			HttpServletRequest httpRequest) {
		try {
			String token = httpRequest.getHeader("token");
			HashMap<String, Object> ret = new HashMap<String, Object>();
			UserItem mobileLogin = AuthorizationToken.convertToObject(token);
			if (mobileLogin != null) {
				Integer offSet = 0;
				offSet = Integer.parseInt(params.get("offSet").toString());
				List<NotificationEntity> notificationEntities = notificationService
						.getListNotificationByNotifiId(mobileLogin.getId(), offSet, 10);
				Integer totalElement = notificationService.countListNotificationByNotifiId(mobileLogin.getId());
				ret.put("notifications", notificationEntities);
				ret.put("totalElement", totalElement);
				return SUCCESS(ret);
			} else {
				return ERROR("Not login.");
			}
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR(e.getMessage());
		}
	}

	@RequestMapping(value = "/notifications/countAlarm", method = RequestMethod.POST)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> countAlarm(@RequestParam Map<String, Object> params,
			HttpServletRequest httpRequest) {
		try {
			String token = httpRequest.getHeader("token");
			HashMap<String, Object> ret = new HashMap<String, Object>();
			UserItem mobileLogin = AuthorizationToken.convertToObject(token);
			if (mobileLogin != null) {
				Integer total = notificationService.countNewestNotificationByNotifiId(mobileLogin.getId());
				ret.put("total", total);
				return SUCCESS(ret);
			} else {
				return ERROR("Not login.");
			}
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR(e.getMessage());
		}
	}

	@RequestMapping(value = "/notifications/read", method = RequestMethod.POST)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> notificationRead(@RequestParam Map<String, Object> params,
			HttpServletRequest httpRequest) {
		try {
			String token = httpRequest.getHeader("token");
			UserItem mobileLogin = AuthorizationToken.convertToObject(token);
			Integer id = Integer.valueOf(params.get("notificationId").toString());
			// logged in
			HashMap<String, Object> ret = new HashMap<>();
			if (mobileLogin != null) {
				UserNotificationEntity un = userNotificationService.findEntityByUserIdAndNotifiId(mobileLogin.getId(),
						id);
				if (un != null) {
					UserNotification u = userNotificationServiceMapper.mapUserNotificationEntityToUserNotification(un);
					if (u.getIsRead() == 0) {
						u.setIsRead((short) 1);
						u = userNotificationService.update(u);
						if(un.getNotification().getPushNotificationId() != null){
							PushNotification p = pushNotificationService.findById(un.getNotification().getPushNotificationId());
							p.setOpenApp(p.getOpenApp()+1);
							pushNotificationService.update(p);
						}
					}
					if (un.getNotification().getTypePush() == ApplicationDefine.Notification_Type.Satisfaction
							.getCode()) {
						JsonParser parser = new JsonParser();
						JsonObject jsobObj = (JsonObject) parser.parse(un.getNotification().getInformation());
						Integer counselingId = DataUtils.parseInt(jsobObj.get("id"));
						UserQuestionaireEntity uq = userQuestionaireService
								.getStatisficEvolutionBy_CounselingSessionId(counselingId);
						if (uq != null) {
							ret.put("existsRating", 1);
						} else {
							ret.put("existsRating", 0);
						}
					}
				} else {
					UserNotification uNotification = new UserNotification();
					uNotification.setCreateDate(new Date());
					uNotification.setIsRead((short) 1);
					uNotification.setNotificationId(id);
					uNotification.setUpdateDate(new Date());
					uNotification.setUserId(mobileLogin.getId());
					uNotification = userNotificationService.create(uNotification);
				}

				params.put("userId", mobileLogin.getId());
			}

			return SUCCESS(ret);
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR(e.getMessage());
		}
	}

	@RequestMapping(value = "/inquiry/categories", method = { RequestMethod.POST, RequestMethod.GET })
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> categorysInquiry(@RequestParam Map<String, Object> params,
			HttpServletRequest httpRequest) {
		try {
			HashMap<String, Object> ret = new HashMap<String, Object>();
			List<CategoryEntity> entities = categoryService.findByType((short) 8);
			List<Category> categories = new ArrayList<>();
			for (CategoryEntity categoryEntity : entities) {
				categories.add(categoryServiceMapper.mapCategoryEntityToCategory(categoryEntity));
			}
			ret.put("categories", categories);
			return SUCCESS(ret);
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR(e.getMessage());
		}
	}

	@RequestMapping(value = "/inquiry/write", method = { RequestMethod.POST, RequestMethod.GET })
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> writeInquiry(@RequestParam Map<String, Object> params,
			HttpServletRequest httpRequest) {
		try {
			HashMap<String, Object> ret = new HashMap<String, Object>();
			String email = String.valueOf(params.get("email").toString());
			Integer categoryId = Integer.valueOf(params.get("categoryId").toString());
			String content = String.valueOf(params.get("content").toString());
			String osVersion = String.valueOf(params.get("osVersion").toString());
			String osName = String.valueOf(params.get("osName").toString());
			String deviceName = String.valueOf(params.get("deviceName").toString());

			//Mail.sendEmail("hello_noreply@aimmed.com", content);
			String token = httpRequest.getHeader("token");
			
			Inquiry i = new Inquiry();
			i.setCreateDate(new Date());
			i.setQuestion(content);
			i.setStatus(0);
			i.setTypeUser(1);
			i.setUpdateDate(new Date());
			i.setCategoryId(categoryId);
			i.setVersion(osVersion);
			i.setOsName(osName);
			i.setDeviceName(deviceName);
			if (token != null) {
				UserItem mobileLogin = AuthorizationToken.convertToObject(token);
				if (mobileLogin != null) {
					i.setAskUserId(mobileLogin.getId());
				}
			}
			
			i.setAskEmail(email);

			i = inquiryService.create(i);

			return SUCCESS(ret);
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR(e.getMessage());
		}
	}

	@RequestMapping(value = "/inquiry/counsoler/write", method = { RequestMethod.POST, RequestMethod.GET })
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> writeInquiryCW(@RequestParam Map<String, Object> params,
			HttpServletRequest httpRequest, HttpSession httpSession) {
		try {
			HashMap<String, Object> ret = new HashMap<String, Object>();
			String email = String.valueOf(params.get("email").toString());
			Integer categoryId = Integer.valueOf(params.get("categoryId").toString());
			String content = String.valueOf(params.get("content").toString());

			Mail.sendEmail("hello_counselor@aimmed.com", content);
			Inquiry i = new Inquiry();
			i.setCreateDate(new Date());
			i.setQuestion(content);
			i.setStatus(0);
			i.setTypeUser(2);
			i.setUpdateDate(new Date());
			i.setCategoryId(categoryId);
			UserItem userItem = Login.getLoggedInUser(httpSession);
			i.setAskUserId(userItem.getId());
			i.setAskEmail(email);

			i = inquiryService.create(i);

			return SUCCESS(ret);
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR(e.getMessage());
		}
	}

	/*
	 * counselor web
	 */
	@RequestMapping(value = "/ajax_save_psychological ", method = { RequestMethod.POST,
			RequestMethod.GET }, produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> delivery_ajax_change_status(
			@RequestParam(value = "user_id", defaultValue = "") Integer user_id,
			@RequestParam(value = "test_name", defaultValue = "") String test_name,
			@RequestParam(value = "total_fee", defaultValue = "") Integer total_fee,
			@RequestParam(value = "counselor_id", defaultValue = "") Integer counselor_id,
			@RequestParam(value = "count_test_name", defaultValue = "") Integer count_test_name,
			HttpSession httpSession, HttpServletRequest httpRequest) {
		try {
			List<Integer> testIds = new ArrayList<>();
			test_name.replace("[", "");
			test_name.replace("]", "");
			for (String e : test_name.split(",")) {
				e = e.replace("[", "");
				e = e.replace("]", "");
				e = e.substring(1, e.length() - 1);
				testIds.add(Integer.valueOf(e));
			}

			RequestUserPsychological r = new RequestUserPsychological();
			Calendar currentDate = Calendar.getInstance();
			r.setCounselorId(counselor_id);
			r.setUserId(user_id);
			r.setRequestPsychological(currentDate.getTime());
			r.setStatus((short) 0);
			r.setCreateDate(currentDate.getTime());
			r.setUpdateDate(currentDate.getTime());
			currentDate.add(Calendar.DATE, 3);
			r.setEffectPaymentPsychological(currentDate.getTime());
			r.setPaymentId(null);
			r.setFee(total_fee);
			r = requestUserPsychologicalService.create(r);
			for (Integer testId : testIds) {
				UserPsychological u = new UserPsychological();
				u.setUserId(user_id);
				u.setCounselorId(counselor_id);
				u.setCreateDate(new Date());
				u.setUpdateDate(new Date());
				u.setPsychologicalTestId(testId);
				u.setRequestPsychologicalId(r.getId());
				u = userPsychologicalService.create(u);
			}
			try {
				UserEntity u = userService.findOne(user_id);
				CounselorEntity c = counselorService.findByOne(counselor_id);
				notificationService.createNotification(u, u.getUsername(), "심리검사 결제 안내",
						c.getUser().getFullname() + "심리상담사가 요청한 심리검사를 결제해주세요.", null,
						(short) ApplicationDefine.Notification_Type.PsychologicalTest.getCode(), null);

			} catch (Exception e) {
				e.printStackTrace();
			}

			return SUCCESS();
		} catch (Exception e) {
			return FAIL("HAVE ERROR: " + e);
		}
	}

	@RequestMapping(value = "/ajax_upload_pdf_psychological ", method = { RequestMethod.POST,
			RequestMethod.GET }, produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> ajax_upload_pdf_psychological(@RequestParam(value = "fullPath") MultipartFile file,
			@RequestParam(value = "userPsyTestId", defaultValue = "") Integer userPsyTestId,
			@RequestParam(value = "testName", defaultValue = "") String testName,
			@RequestParam(value = "userPsyFileId", defaultValue = "") Integer userPsyFileId, HttpSession httpSession,
			HttpServletRequest httpRequest) {
		try {
			SimpleDateFormat sf = new SimpleDateFormat("yyyyMMdd");
			String url = "";
			String resultTestName = testName + "_" + sf.format(new Date()) + ".pdf";
			UserPsychologicalFile u = new UserPsychologicalFile();
			if (file != null && file.getSize() > 0) {
				url = FileUtils.saveFileOrigin(file, servletContext);

				if (userPsyFileId != 0) {
					u = userPsychologicalFileService.findById(userPsyFileId);
					u.setFileUrl(url);
					u.setCreateDate(new Date());
					u.setFileName(resultTestName);
					u = userPsychologicalFileService.update(u);
				} else {
					u.setUserPsychologicalId(userPsyTestId);
					u.setFileUrl(url);
					u.setFileName(resultTestName);
					u.setCreateDate(new Date());
					u.setCreateDate(new Date());
					u = userPsychologicalFileService.create(u);
				}
				try {
					UserPsychological psy = userPsychologicalService.findById(userPsyTestId);
					UserEntity user = userService.findOne(psy.getUserId());
					if (user.getSettingAll() == 1 || user.getMessageNotification() == 1) {
						notificationService.createNotification(user, user.getUsername(), "심리검사 결과 확인",
								"심리검사 결과가 등록되었습니다.", null,
								(short) ApplicationDefine.Notification_Type.PsychologicalResult.getCode(), null);
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
			}

			return SUCCESS();
		} catch (Exception e) {
			return FAIL("HAVE ERROR: " + e);
		}
	}

	@RequestMapping(value = "/ajax_cancel_psychological ", method = { RequestMethod.POST,
			RequestMethod.GET }, produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> ajax_cancel_psychological(
			@RequestParam(value = "userPsyFileId", defaultValue = "") Integer userPsyFileId, HttpSession httpSession,
			HttpServletRequest httpRequest) {
		try {
			RequestUserPsychological r = requestUserPsychologicalService.findById(userPsyFileId);
			r.setStatus((short) 4);
			r.setUpdateDate(new Date());
			r = requestUserPsychologicalService.update(r);
			try {
				RequestUserPsychologicalEntity request = requestUserPsychologicalService.findByIdEntity(r.getId());
                notificationService.createNotification(request.getUser(), request.getUser().getUsername(), "심리검사 요청 취소 안내", request.getCounselor().getUser().getFullname() + "심리상담사가 심리검사 요청을 취소하였습니다.", null, (short) ApplicationDefine.Notification_Type.CancelRequestPsychologicalTest.getCode(), null);
			} catch (Exception e) {
				e.printStackTrace();
			}

			return SUCCESS();
		} catch (Exception e) {
			return FAIL("HAVE ERROR: " + e);
		}
	}

	// push message
	@RequestMapping(value = "/ajax_send_email_psychological ", method = { RequestMethod.POST,
			RequestMethod.GET }, produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> ajax_send_email_psychological(
			@RequestParam(value = "content_mess", defaultValue = "") String content_mess,
			@RequestParam(value = "email", defaultValue = "") String email,
			@RequestParam(value = "userId", defaultValue = "") Integer userId, HttpSession httpSession,
			HttpServletRequest httpRequest) {
		Message m = new Message();
		UserReceiveMessage u = new UserReceiveMessage();
		try {
			UserItem userItem = Login.getLoggedInUser(httpSession);
			m.setSendUserId(userItem.getId());
			m.setContent(content_mess);
			m.setTypeUser(0);
			m.setSendDate(new Date());
			m.setRecieveDate(new Date());
			m.setCreateDate(new Date());
			m.setUpdateDate(new Date());
			m = messageService.create(m);

			u.setUserId(userId);
			u.setMessageId(m.getId());
			u.setStatus((short) 0);
			u.setCreateDate(new Date());
			u.setUpdateDate(new Date());

			u = userReceiveMessageService.create(u);
			try {
				UserEntity user = userService.findOne(userId);
				CounselorEntity counselor = counselorService.findByOne(userItem.getId());
				if (user.getSettingAll() == 1 || user.getMessageNotification() == 1) {
					notificationService.createNotification(user, user.getUsername(),
							counselor.getUser().getFullname() + "심리상담사 쪽지", content_mess, m.getId(),
							(short) ApplicationDefine.Notification_Type.Message.getCode(), null);
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
			return SUCCESS();
		} catch (Exception e) {
			if (m != null) {
				messageService.delete(m.getId());
			}
			return FAIL("HAVE ERROR: " + e);
		}
	}

	@RequestMapping(value = "/ajax_delete_message_list", method = { RequestMethod.POST,
			RequestMethod.GET }, produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> ajax_delete_message_list(
			@RequestParam(value = "ids", defaultValue = "") String searchIDs, HttpSession httpSession,
			HttpServletRequest httpRequest) {
		try {
			List<Integer> Ids = new ArrayList<>();
			searchIDs.replace("[", "");
			searchIDs.replace("]", "");
			for (String e : searchIDs.split(",")) {
				e = e.replace("[", "");
				e = e.replace("]", "");
				e = e.substring(1, e.length() - 1);
				if (!e.equals("0")) {
					Ids.add(Integer.valueOf(e));
				}
			}

			for (Integer integer : Ids) {
				userReceiveMessageService.delete(integer);
			}
			return SUCCESS();
		} catch (Exception ex) {
			return FAIL("HAVE ERROR: " + ex);
		}
	}

	// push message
	@RequestMapping(value = "/ajax_send_message_detail", method = { RequestMethod.POST,
			RequestMethod.GET }, produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> ajax_send_message_detail(
			@RequestParam(value = "dataUserId", defaultValue = "") Integer dataUserId,
			@RequestParam(value = "content", defaultValue = "") String content, HttpSession httpSession,
			HttpServletRequest httpRequest) {
		Message m = new Message();
		UserReceiveMessage u = new UserReceiveMessage();
		try {
			UserItem userItem = Login.getLoggedInUser(httpSession);
			m.setSendUserId(userItem.getId());
			m.setContent(content);
			m.setTypeUser(0);
			m.setSendDate(new Date());
			m.setRecieveDate(new Date());
			m.setCreateDate(new Date());
			m.setUpdateDate(new Date());
			m = messageService.create(m);
			u.setUserId(dataUserId);
			u.setMessageId(m.getId());
			u.setStatus((short) 0);
			u.setCreateDate(new Date());
			u.setUpdateDate(new Date());

			u = userReceiveMessageService.create(u);
			try {
				UserEntity user = userService.findOne(dataUserId);
				CounselorEntity counselor = counselorService.findByOne(userItem.getId());
				if (user.getSettingAll() == 1 || user.getMessageNotification() == 1) {
					notificationService.createNotification(user, user.getUsername(),
							counselor.getUser().getFullname() + "심리상담사 쪽지", String.valueOf(content), u.getId(),
							(short) ApplicationDefine.Notification_Type.Message.getCode(), null);
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
			return SUCCESS();
		} catch (Exception ex) {
			if (m != null) {
				messageService.delete(m.getId());
			}
			return FAIL("HAVE ERROR: " + ex);
		}
	}

	@RequestMapping(value = "/ajax_changepassword ", method = { RequestMethod.POST,
			RequestMethod.GET }, produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> ajax_send_email_psychological(
			@RequestParam(value = "current_password", defaultValue = "") String current_password,
			@RequestParam(value = "new_password", defaultValue = "") String new_password, HttpSession session,
			HttpServletRequest httpRequest) {
		UserItem userItem = Login.getLoggedInUser(session);
		PasswordHistory p = new PasswordHistory();
		User u = userService.findById(userItem.getId());
		try {
			HashMap<String, Object> ret = new HashMap<>();
			String currentPasswordConvert = EncryptionUtils.jwtBuild(current_password);
			String newPasswordConvert = EncryptionUtils.jwtBuild(new_password);
			if (!(u.getPassword().equals(currentPasswordConvert))) {
				ret.put("statusPopup", 1);
			} else {
				Integer countNewPwdInDatabase = passwordHistoryService.countChangedPass(userItem.getId(),
						newPasswordConvert);
				if (countNewPwdInDatabase >= 2) {
					ret.put("statusPopup", 2);
				} else {
					p.setUserId(u.getId());
					p.setPassword(newPasswordConvert);
					p.setCreateDate(new Date());
					p.setUpdateDate(new Date());
					p = passwordHistoryService.create(p);

					u.setPassword(newPasswordConvert);
					u.setUpdateDate(new Date());
					u = userService.update(u);
					ret.put("statusPopup", 3);

					applicationEventPublisher.publishEvent(new FindPasswordEvent(this, u.getPhone(), new_password));
				}
			}
			return SUCCESS(ret);
		} catch (Exception e) {
			e.printStackTrace();
			if (p != null) {
				passwordHistoryService.delete(p.getId());
			}
			return null;
		}
	}

	@RequestMapping(value = "/ajax_update_status_message", method = { RequestMethod.POST,
			RequestMethod.GET }, produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> ajax_update_status_message(
			@RequestParam(value = "mess_id", defaultValue = "") Integer mess_id, HttpSession session,
			HttpServletRequest httpRequest) {
		UserReceiveMessage um = userReceiveMessageService.findById(mess_id);
		try {
			if (um.getStatus() == 0) {
				um.setStatus((short) 1);
				um.setUpdateDate(new Date());
				um = userReceiveMessageService.update(um);
			}

			return SUCCESS();
		} catch (Exception e) {
			e.printStackTrace();
			return FAIL();
		}
	}

	/*****************************************************************************************
	 *
	 * API for counselor polling information
	 *
	 *****************************************************************************************/
	@RequestMapping(value = "/polling/{counselorId}", method = RequestMethod.GET)
	@ResponseBody
	public Object polling(@PathVariable Integer counselorId) {

		Map<String, Object> realtime = new HashMap<>(2);
		realtime.put("status",counselingSessionRealtimeAddedListener.getCounselorSessionRealtime().containsKey(counselorId));
		realtime.put("data", counselingSessionRealtimeAddedListener.getCounselorSessionRealtime().get(counselorId));

		Map<String, Object> schedule = new HashMap<>(2);
		schedule.put("status",counselingSessionScheduleAddedListener.getCounselorSessionSchedule().containsKey(counselorId));
		schedule.put("data", counselingSessionScheduleAddedListener.getCounselorSessionSchedule().get(counselorId));

		Map<String, Object> psypayment = new HashMap<>(2);
		psypayment.put("status", psyTestPaymentAddedListener.getPsyPayment().containsKey(counselorId));
		psypayment.put("data", psyTestPaymentAddedListener.getPsyPayment().get(counselorId));

		Map<String, Object> message = new HashMap<>(2);
		message.put("status", counselorMessageAddedListener.getMessageAdded().containsKey(counselorId));
		message.put("data", counselorMessageAddedListener.getMessageAdded().get(counselorId));

		Map<String, Object> result = new HashMap<>(4);
		result.put("realtime", realtime);
		result.put("schedule", schedule);
		result.put("psypayment", psypayment);
		result.put("message", message);

		counselingSessionRealtimeAddedListener.getCounselorSessionRealtime().remove(counselorId);
		counselingSessionScheduleAddedListener.getCounselorSessionSchedule().remove(counselorId);
		psyTestPaymentAddedListener.getPsyPayment().remove(counselorId);
		counselorMessageAddedListener.getMessageAdded().remove(counselorId);

		return SUCCESS(result);
	}

	/*
	 * category = 0 : General category = 1 : bussiness category = 2 : insurance
	 */
	@RequestMapping(value = "/ajax_get_companies_bussiness_insurance", method = { RequestMethod.POST,
			RequestMethod.GET }, produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> ajax_get_companies_bussiness_insurance(
			@RequestParam(value = "category") Integer category, HttpSession session, HttpServletRequest httpRequest) {
		try {
			HashMap<String, Object> ret = new HashMap<>();
			List<BusinessEntity> list = new ArrayList<>();
			if (category > 0) {
				list = businessService.listByBusinessType(category.shortValue());
			}
			System.out.println("list: " + list.size());
			ret.put("list", list);
			return SUCCESS(ret);
		} catch (Exception e) {
			e.printStackTrace();
			return FAIL();
		}
	}

	@RequestMapping(value = "/ajax_edit_notice", method = {
			RequestMethod.POST }, produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> ajax_edit_notice(@RequestParam(value = "category_notice") Short businessType,
			@RequestParam(value = "companies_cate") Integer businessId,
			@RequestParam(value = "data_businessId") Integer dataBusinessId,
			//@RequestParam(value = "json") String jsonOs, 
			@RequestParam(value = "data_isShow") Short isShow,
			@RequestParam(value = "data_title") String title, @RequestParam(value = "data_content") String content,
			@RequestParam(value = "data_noticeId") Integer id,
			@RequestParam(value = "data_type_noticeId") Integer data_type_noticeId, 
			@RequestParam(value = "showAndroid") Boolean showAndroid,
			@RequestParam(value = "showIos") Boolean showIos,
			@RequestParam(value = "showWeb") Boolean showWeb,
			HttpSession session,
			HttpServletRequest httpRequest) {
		try {
			HashMap<String, Object> ret = new HashMap<>();
			Notice notice = noticeService.findById(id);
			notice.setTitle(title);
			notice.setContent(content);
			if (dataBusinessId != null) {
				if (dataBusinessId != 0) {
					notice.setBusinessId(dataBusinessId);
				}
			}
			notice.setBusinessType(businessType);
//			jsonOs = jsonOs.replace("[", "");
//			jsonOs = jsonOs.replace("]", "");
//			jsonOs = jsonOs.replace("\"", "");
//			jsonOs = jsonOs.replace(",", " ");
//			notice.setOsType(jsonOs);
			notice.setIsShow(isShow);
			notice.setShowAndroid(showAndroid);
			notice.setShowIos(showIos);
			notice.setShowWeb(showWeb);
			notice.setUpdateDate(new Date());

			notice = noticeService.update(notice);

			return SUCCESS(ret);
		} catch (Exception e) {
			e.printStackTrace();
			return FAIL();
		}
	}

	@RequestMapping(value = "/ajax_create_notice", method = {
			RequestMethod.POST, RequestMethod.GET }, produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> ajax_create_notice(@RequestParam(value = "category_notice") Short businessType,
			@RequestParam(value = "companies_cate") Integer businessId,
			@RequestParam(value = "data_businessId") Integer dataBusinessId,
			//@RequestParam(value = "json") String jsonOs, 
			@RequestParam(value = "data_isShow") Short isShow,
			@RequestParam(value = "data_title") String title, 
			@RequestParam(value = "data_content") String content,
			@RequestParam(value = "data_type") Short type, 
			@RequestParam(value = "dataAdminId") Integer dataAdminId,
			@RequestParam(value = "showAndroid") Boolean showAndroid,
			@RequestParam(value = "showIos") Boolean showIos,
			@RequestParam(value = "showWeb") Boolean showWeb,
			HttpSession session, HttpServletRequest httpRequest) {
		try {
			HashMap<String, Object> ret = new HashMap<>();
			Notice notice = new Notice();
			notice.setTitle(title);
			notice.setContent(content);
			if (type == 1) {
				notice.setBusinessType(businessType);
			} else {
				notice.setId(businessType.intValue());
			}
			
			if (dataBusinessId != 0) {
				notice.setBusinessId(dataBusinessId);
			}
//			jsonOs = jsonOs.replace("[", "");
//			jsonOs = jsonOs.replace("]", "");
//			jsonOs = jsonOs.replace("\"", "");
//			jsonOs = jsonOs.replace(",", " ");
//			notice.setOsType(jsonOs);
			notice.setIsShow(isShow);
			notice.setUpdateDate(new Date());
			notice.setViewNumber(0);
			notice.setType(type);
			notice.setCreateDate(new Date());
			notice.setAdminId(dataAdminId);
			notice.setShowAndroid(showAndroid);
			notice.setShowIos(showIos);
			notice.setShowWeb(showWeb);
			notice = noticeService.create(notice);
			return SUCCESS(ret);
		} catch (Exception e) {
			e.printStackTrace();
			return FAIL();
		}
	}

	@RequestMapping(value = "/ajax_edit_faq_member", method = {
			RequestMethod.POST }, produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> ajax_edit_faq_member(@RequestParam(value = "data_faqId") Integer id,
			@RequestParam(value = "data_isShow") Short isShow, @RequestParam(value = "json") String jsonOs,
			@RequestParam(value = "data_title") String title, @RequestParam(value = "data_content") String content,
			HttpSession session, HttpServletRequest httpRequest) {
		try {
			HashMap<String, Object> ret = new HashMap<>();
			Faq faq = faqService.findById(id);
			faq.setTitle(title);
			faq.setContent(content);
			jsonOs = jsonOs.replace("[", "");
			jsonOs = jsonOs.replace("]", "");
			jsonOs = jsonOs.replace("\"", "");
			String[] jsonOsArr = jsonOs.split(",");
			if (jsonOsArr.length > 1) {
				faq.setOsDisplay(3);
			} else {
				if (jsonOsArr[0].equals("1")) {
					faq.setOsDisplay(1);
				} else {
					faq.setOsDisplay(2);
				}
			}
			faq.setIsShow(isShow);
			faq.setUpdateDate(new Date());
			faq = faqService.update(faq);

			return SUCCESS(ret);
		} catch (Exception e) {
			e.printStackTrace();
			return FAIL();
		}
	}

	@RequestMapping(value = "/ajax_create_faq_member", method = {
			RequestMethod.POST }, produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> ajax_create_faq_member(@RequestParam(value = "data_isShow") Short isShow,
			@RequestParam(value = "json") String jsonOs, @RequestParam(value = "data_title") String title,
			@RequestParam(value = "data_content") String content,
			@RequestParam(value = "dataAdminId") Integer dataAdminId, HttpSession session,
			HttpServletRequest httpRequest) {
		try {
			HashMap<String, Object> ret = new HashMap<>();
			Faq faq = new Faq();
			faq.setTitle(title);
			faq.setContent(content);
			faq.setUserId(dataAdminId);
			faq.setViewCount(0);

			jsonOs = jsonOs.replace("[", "");
			jsonOs = jsonOs.replace("]", "");
			jsonOs = jsonOs.replace("\"", "");
			String[] jsonOsArr = jsonOs.split(",");
			if (jsonOsArr.length > 1) {
				faq.setOsDisplay(3);
			} else {
				if (jsonOsArr[0].equals("1")) {
					faq.setOsDisplay(1);
				} else {
					faq.setOsDisplay(2);
				}
			}

			faq.setIsShow(isShow);
			faq.setOrderNumber(0);
			faq.setType((short) 1);
			faq.setCreateDate(new Date());
			faq.setUpdateDate(new Date());
			faq = faqService.create(faq);

			return SUCCESS(ret);
		} catch (Exception e) {
			e.printStackTrace();
			return FAIL();
		}
	}

	@RequestMapping(value = "/ajax_save_faq_changed", method = {
			RequestMethod.POST }, produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> ajax_save_faq_changed(@RequestParam("data") String data,
			@RequestParam("adminId") Integer adminId, HttpSession session, HttpServletRequest httpRequest) {
		try {
			JSONParser parser = new JSONParser();
			JSONObject json = (JSONObject) parser.parse(data);
			JSONArray olds = (JSONArray) json.get("old");
			JSONArray news = (JSONArray) json.get("new");

			for (Object o : olds) {
				JSONObject jsonLineItem = (JSONObject) o;
				String content = (String) jsonLineItem.get("content_counselor");
				Integer idd = Integer.valueOf(jsonLineItem.get("id").toString());
				Short isShow = Short.valueOf(jsonLineItem.get("is_show").toString());
				Integer orderNumber = Integer.valueOf(jsonLineItem.get("seq").toString());
				String title = (String) jsonLineItem.get("title_counselor");

				Faq faq = faqService.findById(idd);
				faq.setContent(content);
				faq.setTitle(title);
				faq.setIsShow(isShow);
				faq.setOrderNumber(orderNumber);
				faq.setUpdateDate(new Date());
				faq = faqService.update(faq);
			}

			for (Object n : news) {
				JSONObject jsonLineItem = (JSONObject) n;
				String content = (String) jsonLineItem.get("content_counselor");
				Short isShow = Short.valueOf(jsonLineItem.get("is_show").toString());
				Integer orderNumber = Integer.valueOf(jsonLineItem.get("seq").toString());
				String title = (String) jsonLineItem.get("title_counselor");
				Faq faq = new Faq();
				faq.setContent(content);
				faq.setTitle(title);
				faq.setIsShow(isShow);
				faq.setUserId(adminId);
				faq.setViewCount(0);
				faq.setOsDisplay(1);
				faq.setOrderNumber(orderNumber);
				faq.setType((short) 2);
				faq.setUpdateDate(new Date());
				faq.setCreateDate(new Date());
				faq = faqService.create(faq);
			}

			System.out.println("data:" + json);
			return SUCCESS();
		} catch (Exception e) {
			e.printStackTrace();
			return FAIL();
		}
	}

	@RequestMapping(value = "/ajax_order_faq_changed", method = {
			RequestMethod.POST }, produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> ajax_order_faq_changed(@RequestParam("data") String data,
			@RequestParam("type_order") Integer type_order, HttpSession session, HttpServletRequest httpRequest) {
		try {
			JSONParser parser = new JSONParser();
			JSONObject json = (JSONObject) parser.parse(data);
			JSONArray olds = (JSONArray) json.get("old");

			if (type_order == 2) {
				for (int i = 1; i < olds.size(); i++) {
					JSONObject list_i = (JSONObject) olds.get(i);
					Integer idd_i = Integer.valueOf(list_i.get("id").toString());
					Integer orderNumber_i = Integer.valueOf(list_i.get("seq").toString());
					Integer statusRadioOrder_i = Integer.valueOf(list_i.get("service").toString());
					int mid = orderNumber_i;
					if (statusRadioOrder_i == 1) {
						JSONObject list_i_1 = (JSONObject) olds.get(i - 1);
						Integer orderNumber_i_1 = Integer.valueOf(list_i_1.get("seq").toString());
						Integer idd_i_1 = Integer.valueOf(list_i_1.get("id").toString());

						Faq faq_i = faqService.findById(idd_i);
						faq_i.setOrderNumber(orderNumber_i_1);
						faq_i.setUpdateDate(new Date());
						faq_i = faqService.update(faq_i);

						Faq faq_i_1 = faqService.findById(idd_i_1);
						faq_i_1.setOrderNumber(mid);
						faq_i_1.setUpdateDate(new Date());
						faq_i_1 = faqService.update(faq_i_1);

					}
				}
			} else {
				for (int i = 0; i < olds.size(); i++) {
					JSONObject list_i = (JSONObject) olds.get(i);
					Integer idd_i = Integer.valueOf(list_i.get("id").toString());
					Integer orderNumber_i = Integer.valueOf(list_i.get("seq").toString());
					Integer statusRadioOrder_i = Integer.valueOf(list_i.get("service").toString());
					int mid = orderNumber_i;
					if (statusRadioOrder_i == 1) {
						JSONObject list_i_1 = (JSONObject) olds.get(i + 1);
						Integer orderNumber_i_1 = Integer.valueOf(list_i_1.get("seq").toString());
						Integer idd_i_1 = Integer.valueOf(list_i_1.get("id").toString());

						Faq faq_i = faqService.findById(idd_i);
						faq_i.setOrderNumber(orderNumber_i_1);
						faq_i.setUpdateDate(new Date());
						faq_i = faqService.update(faq_i);

						Faq faq_i_1 = faqService.findById(idd_i_1);
						faq_i_1.setOrderNumber(mid);
						faq_i_1.setUpdateDate(new Date());
						faq_i_1 = faqService.update(faq_i_1);
					}
				}
			}

			return SUCCESS();
		} catch (Exception e) {
			e.printStackTrace();
			return FAIL();
		}
	}

	@RequestMapping(value = "/ajax_reply_inquiry", method = {
			RequestMethod.POST }, produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> ajax_reply_inquiry(
			@RequestParam(value = "inquiryId") Integer id,
			@RequestParam(value = "emailUser") String emailUser, 
			@RequestParam(value = "adminId") Integer adminId,
			@RequestParam(value = "contentReply") String content, HttpSession session, HttpServletRequest httpRequest) {
		try {
			HashMap<String, Object> ret = new HashMap<>();
			Inquiry inquiry = inquiryService.findById(id);
			inquiry.setAnswer(content);
			inquiry.setAnswerUserId(adminId);
			inquiry.setStatus(2);
			inquiry.setUpdateDate(new Date());
			inquiry.setAnswerDate(new Date());
			inquiry = inquiryService.update(inquiry);
			try {
				HashMap<String, Object> params = new HashMap<>();
				params.put("question", inquiry.getQuestion());
				params.put("answer", inquiry.getAnswer());
				String email="";
				String fullname = "";
				if(inquiry.getAskUserId() != null){
					User u  = userService.findById(inquiry.getAskUserId());
					fullname = u.getFullname();
					
				}else{
					fullname = "회원";
				}
				params.put("fullname",fullname);
				email = inquiry.getAskEmail();
				
				
				Mail.sendEmailTemplate(email, params, Mail.EmailTemplate.INIQUIRY,"[Hello]"+"["+fullname+"]"+"님 1:1 문의 답변 드립니다." );
			} catch (Exception ex) {
				ex.printStackTrace();
			}

			return SUCCESS(ret);
		} catch (Exception e) {
			e.printStackTrace();
			return FAIL();
		}
	}

	@RequestMapping(value = "/ajax_change_status_inquiry", method = {
			RequestMethod.POST }, produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> ajax_change_status_inquiry(@RequestParam(value = "inquiryId") Integer id,
			HttpSession session, HttpServletRequest httpRequest) {
		try {
			HashMap<String, Object> ret = new HashMap<>();
			Inquiry inquiry = inquiryService.findById(id);
			inquiry.setStatus(1);
			inquiry.setUpdateDate(new Date());
			inquiry = inquiryService.update(inquiry);

			return SUCCESS(ret);
		} catch (Exception e) {
			e.printStackTrace();
			return FAIL();
		}
	}

	@RequestMapping(value = "/ajax_message_get_list_user", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public ReturnObjectData<Object> ajax_message_get_list_user(
			@RequestParam(value = "keyword", defaultValue = "") String keyword, HttpSession httpSession) {
		ReturnObjectData<Object> data = new ReturnObjectData<Object>(1, "error", 0, 0);
		try {
			if (keyword == null) {
				keyword = "";
			}
			List<User> counselors = userService.getCounselorsByFullName(keyword);

			if (counselors.size() > 0) {
				data = new ReturnObjectData<Object>(0, "Success", counselors, counselors.size());
			} else {
				data = new ReturnObjectData<Object>(2, "no", 0, 0);
			}

		} catch (Exception e) {
			data = new ReturnObjectData<Object>(1, "Error", 0, 0);
		}
		return data;
	}

	@RequestMapping(value = "/ajax_sending_message", method = {
			RequestMethod.POST }, produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> ajax_sending_message(@RequestParam(value = "content") String content,
			@RequestParam(value = "global_list") String ids, HttpSession session, HttpServletRequest httpRequest) {
		Message message = new Message();
		try {
			HashMap<String, Object> ret = new HashMap<>();
			UserItem userItem = Login.getAdminLogin(session);

			message.setSendUserId(userItem.getId());
			message.setContent(content);
			message.setTypeUser(2);
			message.setSendDate(new Date());
			message.setRecieveDate(new Date());
			message.setCreateDate(new Date());
			message.setUpdateDate(new Date());
			message = messageService.create(message);

			JSONParser parser = new JSONParser();
			JSONObject json = (JSONObject) parser.parse(ids);
			JSONArray listId = (JSONArray) json.get("ids");
			for (int i = 0; i < listId.size(); i++) {
				JSONObject list_i = (JSONObject) listId.get(i);
				Integer id = Integer.valueOf(list_i.get("id").toString());
				UserReceiveMessage us = new UserReceiveMessage();
				us.setUserId(id);
				us.setStatus((short) 0);
				us.setMessageId(message.getId());
				us.setCreateDate(new Date());
				us.setUpdateDate(new Date());
				us = userReceiveMessageService.create(us);
			}

			return SUCCESS(ret);
		} catch (Exception e) {
			e.printStackTrace();
			if (message != null) {
				messageService.delete(message.getId());
			}
			return FAIL();
		}
	}

	@RequestMapping(value = "/ajax_account_delete_admin", method = {
			RequestMethod.POST }, produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> ajax_account_delete_admin(@RequestParam(value = "adminIds") String adminIds,
			HttpSession session, HttpServletRequest httpRequest) {
		try {
			HashMap<String, Object> ret = new HashMap<>();
			List<Integer> testIds = new ArrayList<>();
			adminIds.replace("[", "");
			adminIds.replace("]", "");
			for (String e : adminIds.split(",")) {
				e = e.replace("[", "");
				e = e.replace("]", "");
				e = e.substring(1, e.length() - 1);
				testIds.add(Integer.valueOf(e));
			}

			for (Integer id : testIds) {
				User u = userService.findById(id);
				u.setIsDelete(1);
				u.setStatusActive((short) 3);
				u.setUpdateDate(new Date());
				u = userService.update(u);
			}

			return SUCCESS(ret);
		} catch (Exception e) {
			e.printStackTrace();
			return FAIL();
		}
	}

	@RequestMapping(value = "/ajax_account_check_username_exits", method = {
			RequestMethod.POST }, produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> ajax_account_check_username_exits(@RequestParam(value = "username") String username,
			HttpSession session, HttpServletRequest httpRequest) {
		try {
			HashMap<String, Object> ret = new HashMap<>();
			int count = userService.countUserExitsByUsername(username);
			if (count == 0) {
				ret.put("result", 1);
			} else {
				ret.put("result", 2);
			}

			return SUCCESS(ret);
		} catch (Exception e) {
			e.printStackTrace();
			return FAIL();
		}
	}

	/*
	 * 1:Terms of Service/2:Privacy policy /3:Payment policy
	 */
	@RequestMapping(value = "/ajax_policy_get_version", method = { RequestMethod.POST,
			RequestMethod.GET }, produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> ajax_policy_get_version(
			@RequestParam(value = "typePolicy", defaultValue = "1") Short typePolicy,
			@RequestParam(value = "typeMember", defaultValue = "1") Short typeMember,
			HttpSession session,
			HttpServletRequest httpRequest) {
		try {
			HashMap<String, Object> ret = new HashMap<>();
			Float oldVersion = policyService.maxVersionPolicyByTypePolicy(typePolicy, typeMember);
			ret.put("newVersion", (double) Math.round((oldVersion + 0.1f) * 10) / 10);
			return SUCCESS(ret);
		} catch (Exception e) {
			e.printStackTrace();
			return FAIL();
		}
	}

	@RequestMapping(value = "/ajax_policy_create", method = { RequestMethod.POST,
			RequestMethod.GET }, produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> ajax_policy_create(@RequestParam Map<String, Object> params, HttpSession session,
			HttpServletRequest httpRequest) {
		try {
			HashMap<String, Object> ret = new HashMap<>();
			String data_content = String.valueOf(params.get("data_content").toString());
			Float version = Float.valueOf(params.get("version").toString());
			Short type = Short.valueOf(params.get("type").toString());
			Short typePolicy = Short.valueOf(params.get("typePolicy").toString());
			UserItem admin = Login.getAdminLogin(session);

			policyService.updateStatusOldVersion(typePolicy, type);

			Policy p = new Policy();
			p.setAdminId(admin.getId());
			p.setContent(data_content);
			p.setIsShow((short) 1);
			p.setTypePolicy(typePolicy);
			p.setTypeMember(type);
			p.setCreateDate(new Date());
			p.setUpdateDate(new Date());
			p.setVesion(version);

			p = policyService.create(p);

			return SUCCESS(ret);
		} catch (Exception e) {
			e.printStackTrace();
			return FAIL();
		}
	}
	
	@RequestMapping( value="/aimmedPage",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> filter(
			HttpServletRequest httpRequest
	) {
		try {


			Map<String, Object> params = new HashMap<>(3);
			List<PromotionPageEntity> entities = promotionPageService.listAIMMEDPromotionPage();
			if(entities.size() > 0){
				PromotionPageEntity promotionPageEntity = entities.get(0);
				PromotionPageApi p = new PromotionPageApi();
				p.setBackgroundName(promotionPageEntity.getBackgroundName());
				p.setBackgroundUrl(promotionPageEntity.getBackgroundUrl());
				p.setBusiness(null);
				p.setCreateDate(promotionPageEntity.getCreateDate());
				p.setId(promotionPageEntity.getId());
				p.setIsShow(promotionPageEntity.getIsShow());
				p.setLogoName(promotionPageEntity.getLogoName());
				p.setLogoUrl(promotionPageEntity.getLogoUrl());
				p.setReserveDate(promotionPageEntity.getReserveDate());
				p.setReserveReason(promotionPageEntity.getReserveReason());
				p.setStatus(promotionPageEntity.getStatus());
				p.setUpdateDate(promotionPageEntity.getUpdateDate());
				List<PromotionPageLinkEntity> listPageLink =  promotionPageLinkService.findByPromotionPageId(promotionPageEntity.getId());
				promotionPageEntity.setBusiness(null);
				for (PromotionPageLinkEntity entity : listPageLink) {
					entity.setPromotionPage(null);
				}
				p.setListOfPromotionPageLink(listPageLink);
				return SUCCESS(p);
			}else{
				return SUCCESS("No Promotionpage!");
			}
			
		} catch (Exception e) {
			e.printStackTrace();
			return FAIL(e.getMessage());
		}

	}
}
