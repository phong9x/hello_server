/*
 * Created on 23 thg 12 2016 ( Time 14:27:41 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.rest.controller;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.trams.hello.bean.Notice;
import org.trams.hello.bean.UserItem;
import org.trams.hello.bean.UserNotice;
import org.trams.hello.bean.api.UserNotices;
import org.trams.hello.bean.jpa.UserEntity;
import org.trams.hello.business.service.NoticeService;
import org.trams.hello.business.service.UserNoticeService;
import org.trams.hello.business.service.UserService;
import org.trams.hello.rest.common.AbstractRestController;
import org.trams.hello.rest.common.AuthorizationToken;
/**
 * Spring MVC controller for 'Question' management.
 */
@RequestMapping("/v1/notice")
@Controller
public class NoticeRestController extends AbstractRestController{

	@Resource
	private NoticeService noticeService;
	@Resource
	private UserService userService;
	@Resource
	private UserNoticeService userNoticeService;
	
	@RequestMapping(value = "/list", method = RequestMethod.POST)
	@ResponseBody
	public HashMap<String, Object> getAllNotices(@RequestParam Map<String, Object> params,
			HttpServletRequest httpRequest) {
		try {
			HashMap<String, Object> ret = new HashMap<String, Object>();
			String token = httpRequest.getHeader("token");
			UserItem user = AuthorizationToken.convertToObject(token);
			List<UserNotices> list = new ArrayList<UserNotices>();
			String type = String.valueOf(params.get("type"));
			if (user != null) {
				UserEntity u = userService.findOne(user.getId());
				list = userNoticeService.noticesInApp(u, (short) 1, type);
			} else {
				list = userNoticeService.noticesInAppNotUser((short) 1, type);
			}
			ret.put("notices", list);
			return SUCCESS(ret);
		} catch (Exception e) {
			e.printStackTrace();
			return FAIL("HAVE ERROR: " + e);
		}
	}

	@RequestMapping(value = "/statusIcon", method = RequestMethod.POST)
	@ResponseBody
	public HashMap<String, Object> getStatusReadNotices(@RequestParam Map<String, Object> params,
			HttpServletRequest httpRequest) {
		try {
			HashMap<String, Object> ret = new HashMap<String, Object>();
			String token = httpRequest.getHeader("token");
			UserItem user = AuthorizationToken.convertToObject(token);
			if (user != null) {
				UserEntity u = userService.findOne(user.getId());
				List<UserNotices> list = userNoticeService.noticesByStatus(u, (short) 2);
				if (list.size() > 0) {
					ret.put("statusIcon", 1);
				} else {
					ret.put("statusIcon", 0);
				}
			} else {
				ret.put("statusIcon", 0);
			}
			return SUCCESS(ret);
		} catch (Exception e) {
			e.printStackTrace();
			return FAIL("HAVE ERROR: " + e);
		}
	}

	@RequestMapping(value = "/updateStatus", method = RequestMethod.POST)
	@ResponseBody
	public HashMap<String, Object> getUpdateStatusReadNotices(@RequestParam Map<String, Object> params,
			HttpServletRequest httpRequest) {
		try {
			HashMap<String, Object> ret = new HashMap<String, Object>();
			String token = httpRequest.getHeader("token");
			UserItem user = AuthorizationToken.convertToObject(token);
			Integer id = Integer.valueOf(params.get("id").toString());
			if (user != null) {
				UserNotice userNotices = userNoticeService.findById(id);
				userNotices.setStatus(1);
				userNotices = userNoticeService.update(userNotices);

				Notice n = noticeService.findById(userNotices.getNoticeId());
				n.setViewNumber(n.getViewNumber() + 1);
				n = noticeService.update(n);
			}
			return SUCCESS(ret);
		} catch (Exception e) {
			e.printStackTrace();
			return FAIL("HAVE ERROR: " + e);
		}
	}

	@RequestMapping(value = "/detail", method = RequestMethod.POST)
	@ResponseBody
	public HashMap<String, Object> getAllNoticeDetail(@RequestParam Map<String, Object> params,
			HttpServletRequest httpRequest) {
		try {
			HashMap<String, Object> ret = new HashMap<String, Object>();
			String token = httpRequest.getHeader("token");
			UserItem user = AuthorizationToken.convertToObject(token);
			Integer id = (Integer.valueOf(params.get("id").toString()));
			UserNotices detail = new UserNotices();
			if (user != null) {
				detail = userNoticeService.getUserNoticeDetail(user.getId(), id, userNoticeService);
			} else {
				detail = userNoticeService.getUserNoticeDetailNotUser(id, userNoticeService);
			}
			ret.put("noticeDetail", detail);
			return SUCCESS(ret);
		} catch (Exception e) {
			e.printStackTrace();
			return FAIL("HAVE ERROR: " + e);
		}
	}
	
}



