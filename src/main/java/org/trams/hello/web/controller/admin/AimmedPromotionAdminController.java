/*
 * Created on 12 Apr 2017 ( Time 10:26:03 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.web.controller.admin;

import java.util.Date;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.trams.hello.bean.PromotionPage;
import org.trams.hello.bean.PromotionPageLink;
import org.trams.hello.bean.jpa.PromotionPageEntity;
import org.trams.hello.bean.jpa.PromotionPageLinkEntity;
import org.trams.hello.business.service.PromotionPageLinkService;
import org.trams.hello.business.service.PromotionPageService;
import org.trams.hello.web.common.AbstractController;
import org.trams.hello.web.common.utils.FileUtils;


@Controller
@RequestMapping("/admin/content/aimmedPromotion")
public class AimmedPromotionAdminController extends AbstractController {

	private static final String MAIN_ENTITY_NAME = "aimmedPromotion";
	private static String nav = "aimmedPromotion";
	private static final String JSP_EDIT   = "admin/content/aimmedPromotion/edit";

	@Resource
	private PromotionPageService promotionPageService;
	@Resource
	private PromotionPageLinkService promotionPageLinkService;
	@Resource
	ServletContext servletContext;
	public AimmedPromotionAdminController() {
		super(AimmedPromotionAdminController.class, MAIN_ENTITY_NAME );
		log("AimmedPromotionAdminController created.");
	}

	@RequestMapping(value = "/edit", method = RequestMethod.GET)
	public String promotion(HttpSession session, Model model) {
		try {
			List<PromotionPageEntity> list = promotionPageService.listAIMMEDPromotionPage();
			if(list.size() > 0){
				model.addAttribute("item", list.get(0));
				List<PromotionPageLinkEntity> list_link = promotionPageLinkService.findByPromotionPageId(list.get(0).getId());
				model.addAttribute("list_link", list_link);
			}
			model.addAttribute("activePage", nav);
			return JSP_EDIT;
		} catch (Exception e) {
			e.printStackTrace();
			return JSP_EDIT;
		}
	}

	@RequestMapping(value = "/edit", method = RequestMethod.POST)
	public String promotion_post(HttpSession session,
			@RequestParam(value = "logoFile") MultipartFile logoFile,
			@RequestParam(value = "backgroundFile") MultipartFile backgroundFile,
			@RequestParam(value = "decription", defaultValue = "") String decription,
			@RequestParam(value = "link", defaultValue = "") String[] link,
			@RequestParam(value = "title", defaultValue = "") String[] title,
			@RequestParam(value = "isShow", defaultValue = "") Integer isShow,
			@RequestParam(value = "idPromotionPage", defaultValue = "0") Integer idPromotionPage,
			Model model) {
		try {
			
			if(idPromotionPage > 0){
				PromotionPage item = promotionPageService.findById(idPromotionPage);
				if (backgroundFile.getSize() > 0) {
					item.setBackgroundUrl(FileUtils.saveFileOrigin(backgroundFile, servletContext));
					item.setBackgroundName(backgroundFile.getOriginalFilename());
				}
				if (logoFile.getSize() > 0) {
					item.setLogoUrl(FileUtils.saveFileOrigin(logoFile, servletContext));
					item.setLogoName(logoFile.getOriginalFilename());
				}
				item.setIsShow(isShow);
				promotionPageService.update(item);
			}else{
				PromotionPage item = new PromotionPage();
				if (backgroundFile.getSize() > 0) {
					item.setBackgroundUrl(FileUtils.saveFileOrigin(backgroundFile, servletContext));
					item.setBackgroundName(backgroundFile.getOriginalFilename());
				}
				if (logoFile.getSize() > 0) {
					item.setLogoUrl(FileUtils.saveFileOrigin(logoFile, servletContext));
					item.setLogoName(logoFile.getOriginalFilename());
				}
				item.setIsShow(isShow);
				item.setStatus((short)1);
				item.setType((short)2);
				PromotionPage p =promotionPageService.create(item);
				idPromotionPage = p.getId();
			}
			
			if (title.length > 0) {
				promotionPageLinkService.deleteByPromotionPageId(idPromotionPage);
				for (int j = 0; j < title.length; j++) {
					PromotionPageLink pl = new PromotionPageLink();
					pl.setCreateDate(new Date());
					try {
						if(link[j] == null ){
							pl.setLink("");
						}else{
							pl.setLink(link[j]);
						}
					} catch (Exception e) {
						pl.setLink("");
					}
					
					if(title[j] == null || title[j].equals("")){
						pl.setTitle("");
					}else{
						pl.setTitle(title[j]);
					}
					pl.setPromotionPageId(idPromotionPage);
					pl.setUpdateDate(new Date());
					promotionPageLinkService.create(pl);
				}
			}
		} catch (Exception e) {
			e.printStackTrace();

		}
		return "redirect:/" + JSP_EDIT;
	}
	
	@RequestMapping(value = "/reset/{id}", method = RequestMethod.POST)
	public String reset(HttpSession session, 
			@PathVariable("id") Integer id,
			Model model) {
		try {
			promotionPageLinkService.deleteBy_PromotionPageId(id);
			promotionPageService.delete(id);
			
		} catch (Exception e) {
			e.printStackTrace();

		}
		return "redirect:/" + JSP_EDIT;
	}
}
