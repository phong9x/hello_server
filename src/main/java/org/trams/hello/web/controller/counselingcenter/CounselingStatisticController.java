/*
 * Created on 12 May 2017 ( Time 10:13:21 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.web.controller.counselingcenter;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.trams.hello.bean.CounselingStatistics;
import org.trams.hello.bean.CounselorRanking;
import org.trams.hello.bean.PageCustom;
import org.trams.hello.bean.ProfitCenterReport;
import org.trams.hello.bean.UserItem;
import org.trams.hello.bean.jpa.PaymentProfitEntity;
import org.trams.hello.business.service.CounselingSessionService;
import org.trams.hello.business.service.CounselorService;
import org.trams.hello.business.service.PaymentProfitService;
import org.trams.hello.web.bean.search.SearchProfitCenter;
import org.trams.hello.web.bean.search.SearchStatistics;
import org.trams.hello.web.common.ApplicationDefine;
import org.trams.hello.web.common.Login;
import org.trams.hello.web.common.Pager;
import org.trams.hello.web.common.utils.DataUtils;
import org.trams.hello.web.common.utils.ExcelUtils;

/**
 * Spring MVC controller for 'Faq' management.
 */
@Controller
@RequestMapping("/counselingCenter/auth/statistics")
public class CounselingStatisticController extends BaseController {
	public final String nav = "statistics";
	
	@Resource
    private CounselingSessionService counselingSessionService;
	
	@Resource
	private CounselorService counselorService;
	
	@Resource
	private PaymentProfitService paymentProfitService;
	
	@RequestMapping(value = "/period", method = RequestMethod.GET)
	public String prediod(
			HttpSession session,
			HttpServletRequest request,
			@RequestParam(value="page",defaultValue="1") Integer page,
			@ModelAttribute SearchStatistics s,
			Model model) {
		
		Date now = new Date();
		UserItem u = Login.getCounselingCenterLogin(session);
		s.setCenterId(u.getId());
		PageCustom<CounselingStatistics> listPage = counselingSessionService.filterStatistics(s, page, Integer.MAX_VALUE);
		model.addAttribute("now", now);
		model.addAttribute("s", s);
		model.addAttribute("total", listPage.getOther());
		model.addAttribute("activePage", nav);
		model.addAttribute("menu", "counseling");
		new Pager<CounselingStatistics>(listPage).setManualSetting(model, request);
		return getView();
	}
	
	@RequestMapping("/period/download")
	public void period_download(
			HttpSession session,
			HttpServletRequest request,
			@ModelAttribute SearchStatistics s,
			HttpServletResponse response,
			Model model) {
		UserItem u = Login.getCounselingCenterLogin(session);
		s.setCenterId(u.getId());
		PageCustom<CounselingStatistics> listPage = counselingSessionService.filterStatistics(s, 1, Integer.MAX_VALUE);
		List<Object> listOther = listPage.getOther();
		System.out.println("size:"+listPage.getList().size());
		try {
			List<String> header = new ArrayList<>();
			header.add("합계");
			header.add(listOther.get(0).toString());
			header.add(listOther.get(1).toString());
			
			List<List<Object>> list_data = null;
			if (listPage.getList() != null) {
				list_data = new ArrayList<>();
				for (CounselingStatistics i : listPage.getList()) {
					List<Object> list_str = new ArrayList<Object>();
					list_str.add(i.getTitle());
					list_str.add(i.getTotalReservation());
					list_str.add(i.getTotalCounseling());
					list_data.add(list_str);
				}
			}
			ExcelUtils.createExcelFileUseTemplate(request, response, ApplicationDefine.ExcelTemplate.COUNSELING_STATISTIC, header, list_data);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	@RequestMapping("/week")
	public String week(
			HttpSession session,
			HttpServletRequest request,
			@RequestParam(value="page",defaultValue="1") Integer page,
			@ModelAttribute SearchStatistics s,
			Model model) {
		UserItem u = Login.getCounselingCenterLogin(session);
		s.setCenterId(u.getId());
		Calendar startWeek = Calendar.getInstance();
		startWeek.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY);
		Calendar endWeek = Calendar.getInstance();
		endWeek.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY);
		endWeek.add(Calendar.DATE, 6);
		s.setStartDate(DataUtils.parseStringFromDate(startWeek.getTime(), "yyyy/MM/dd"));
		s.setEndDate(DataUtils.parseStringFromDate(endWeek.getTime(), "yyyy/MM/dd"));
		
		PageCustom<CounselingStatistics> listPage = counselingSessionService.filterStatisticsByWeek(s);
		model.addAttribute("s", s);
		model.addAttribute("total", listPage.getOther());
		model.addAttribute("activePage", nav);
		model.addAttribute("menu", "counseling");
		new Pager<CounselingStatistics>(listPage).setManualSetting(model, request);
		return getView();
	}
	
	@RequestMapping("/week/download")
	public void week_download(
			HttpSession session,
			HttpServletRequest request,
			@ModelAttribute SearchStatistics s,
			HttpServletResponse response,
			Model model) {
		UserItem u = Login.getCounselingCenterLogin(session);
		s.setCenterId(u.getId());
		Calendar startWeek = Calendar.getInstance();
		startWeek.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY);
		Calendar endWeek = Calendar.getInstance();
		endWeek.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY);
		endWeek.add(Calendar.DATE, 6);
		s.setStartDate(DataUtils.parseStringFromDate(startWeek.getTime(), "yyyy/MM/dd"));
		s.setEndDate(DataUtils.parseStringFromDate(endWeek.getTime(), "yyyy/MM/dd"));
		
		PageCustom<CounselingStatistics> listPage = counselingSessionService.filterStatisticsByWeek(s);
		List<Object> listOther = listPage.getOther();
		System.out.println("size:"+listPage.getList().size());
		try {
			List<String> header = new ArrayList<>();
			header.add("합계");
			header.add(listOther.get(0).toString());
			header.add(listOther.get(1).toString());
			
			List<List<Object>> list_data = null;
			if (listPage.getList() != null) {
				list_data = new ArrayList<>();
				for (CounselingStatistics i : listPage.getList()) {
					List<Object> list_str = new ArrayList<Object>();
					list_str.add(i.getTitle());
					list_str.add(i.getTotalReservation());
					list_str.add(i.getTotalCounseling());
					list_data.add(list_str);
				}
			}
			ExcelUtils.createExcelFileUseTemplate(request, response, ApplicationDefine.ExcelTemplate.COUNSELING_STATISTIC, header, list_data);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	@RequestMapping("/hour")
	public String hour(
			HttpSession session,
			HttpServletRequest request,
			@RequestParam(value="page",defaultValue="1") Integer page,
			@ModelAttribute SearchStatistics s,
			Model model) {
		UserItem u = Login.getCounselingCenterLogin(session);
		s.setCenterId(u.getId());
		PageCustom<CounselingStatistics> listPage = counselingSessionService.filterStatisticsByHour(s);
		model.addAttribute("s", s);
		model.addAttribute("total", listPage.getOther());
		model.addAttribute("activePage", nav);
		model.addAttribute("menu", "counseling");
		new Pager<CounselingStatistics>(listPage).setManualSetting(model, request);
		return getView();
	}
	
	@RequestMapping("/hour/download")
	public void hour_download(
			HttpSession session,
			HttpServletRequest request,
			@ModelAttribute SearchStatistics s,
			HttpServletResponse response,
			Model model) {
		UserItem u = Login.getCounselingCenterLogin(session);
		s.setCenterId(u.getId());
		PageCustom<CounselingStatistics> listPage = counselingSessionService.filterStatisticsByWeek(s);
		List<Object> listOther = listPage.getOther();
		System.out.println("size:"+listPage.getList().size());
		try {
			List<String> header = new ArrayList<>();
			header.add("합계");
			header.add(listOther.get(0).toString());
			header.add(listOther.get(1).toString());
			
			List<List<Object>> list_data = null;
			if (listPage.getList() != null) {
				list_data = new ArrayList<>();
				for (CounselingStatistics i : listPage.getList()) {
					List<Object> list_str = new ArrayList<Object>();
					list_str.add(i.getTitle());
					list_str.add(i.getTotalReservation());
					list_str.add(i.getTotalCounseling());
					list_data.add(list_str);
				}
			}
			ExcelUtils.createExcelFileUseTemplate(request, response, ApplicationDefine.ExcelTemplate.COUNSELING_STATISTIC, header, list_data);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	
	@RequestMapping("/counselor")
	public String user_chart(
			HttpSession session,
			HttpServletRequest request,
			@RequestParam(value="orderBy",defaultValue="reversation") String orderBy,
			@RequestParam(value="page",defaultValue="1") Integer page,
			@ModelAttribute SearchStatistics s,
			Model model) {
		UserItem u = Login.getCounselingCenterLogin(session);
		s.setCenterId(u.getId());
		PageCustom<CounselorRanking> listPage = counselorService.filterCounselorCenterStatistics(s, page, 30, orderBy);
		model.addAttribute("s", s);
		model.addAttribute("orderBy", orderBy);
		model.addAttribute("activePage", nav);
		model.addAttribute("menu", "counselor");
		new Pager<CounselorRanking>(listPage).setManualSetting(model, request);
		return getView();
	}

	@RequestMapping("/counselor/download")
	public void counselor_chart_download(
			HttpSession session,
			HttpServletRequest request,
			@ModelAttribute SearchStatistics s,
			@RequestParam(value="orderBy",defaultValue="reversation") String orderBy,
			HttpServletResponse response,
			Model model) {
		UserItem u = Login.getCounselingCenterLogin(session);
		s.setCenterId(u.getId());
		PageCustom<CounselorRanking> listPage = counselorService.filterCounselorCenterStatistics(s, 1, Integer.MAX_VALUE, orderBy);
		System.out.println("size:"+listPage.getList().size());
		try {
			List<String> list_hear = new ArrayList<>();
			List<List<Object>> list_data = null;
			if (listPage.getList() != null) {
				list_data = new ArrayList<>();
				int index =1;
				for (CounselorRanking i : listPage.getList()) {
					List<Object> list_str = new ArrayList<Object>();
					list_str.add(index);
					list_str.add(i.getCounselorName());
					list_str.add(i.getReservation());
					list_str.add(i.getCounseling());
					list_str.add(i.getTotalCoin());
					list_str.add(i.getTotalVoucher());
					list_str.add(i.getFee());
					list_data.add(list_str);
					index++;
				}
			}
			ExcelUtils.createExcelFileUseTemplate(request, response, ApplicationDefine.ExcelTemplate.COUNSELOR_RANKING, list_hear, list_data);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	@RequestMapping("/profit")
	public String profit(
			HttpSession session,
			HttpServletRequest request,
			@RequestParam(value="page",defaultValue="1") Integer page,
			@ModelAttribute SearchProfitCenter s,
			Model model) {
		UserItem u = Login.getCounselingCenterLogin(session);
		s.setCenterId(u.getId());
		PaymentProfitEntity p = paymentProfitService.getTotalMoneyByMonth(s.getYear(), s.getMonth(), u.getId(), (short)2);
		PageCustom<ProfitCenterReport> listPage = counselorService.filterProfitCenterStatistics(s, page, 30);
		model.addAttribute("p", p);
		model.addAttribute("s", s);
		model.addAttribute("activePage", nav);
		model.addAttribute("menu", "profit");
		new Pager<ProfitCenterReport>(listPage).setManualSetting(model, request);
		return getView();
	}

	@RequestMapping("/profit/download")
	public void profit_dơnload(
			HttpSession session,
			HttpServletRequest request,
			@ModelAttribute SearchProfitCenter s,
			@RequestParam(value="orderBy",defaultValue="reversation") String orderBy,
			HttpServletResponse response,
			Model model) {
		UserItem u = Login.getCounselingCenterLogin(session);
		s.setCenterId(u.getId());
		PageCustom<ProfitCenterReport> listPage = counselorService.filterProfitCenterStatistics(s, 1, Integer.MAX_VALUE);
		try {
			List<String> list_hear = new ArrayList<>();
			List<List<Object>> list_data = null;
			if (listPage.getList() != null) {
				list_data = new ArrayList<>();
				for (ProfitCenterReport i : listPage.getList()) {
					List<Object> list_str = new ArrayList<Object>();
					list_str.add(i.getId());
					list_str.add(i.getCounselorName());
					list_str.add(i.getUserName());
					list_str.add(DataUtils.parseStringFromDate(i.getStartTime(), "yyyy-MM-dd HH:mm:ss"));
					list_str.add(i.getTypeCoin());
					list_str.add(i.getFee());
					list_data.add(list_str);
				}
			}
			ExcelUtils.createExcelFileUseTemplate(request, response, ApplicationDefine.ExcelTemplate.PROFIT_CENTER, list_hear, list_data);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	
	
}
