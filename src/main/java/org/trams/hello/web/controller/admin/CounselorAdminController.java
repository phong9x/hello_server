/*
 * Created on 26 thg 12 2016 ( Time 14:11:49 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.web.controller.admin;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.data.domain.Page;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.trams.hello.bean.BanAccountHistory;
import org.trams.hello.bean.Bank;
import org.trams.hello.bean.CounselingCenter;
import org.trams.hello.bean.Counselor;
import org.trams.hello.bean.CounselorBiography;
import org.trams.hello.bean.CounselorField;
import org.trams.hello.bean.User;
import org.trams.hello.bean.UserCertificate;
import org.trams.hello.bean.UserEducation;
import org.trams.hello.bean.UserItem;
import org.trams.hello.bean.jpa.BanAccountHistoryEntity;
import org.trams.hello.bean.jpa.CategoryEntity;
import org.trams.hello.bean.jpa.CounselorBiographyEntity;
import org.trams.hello.bean.jpa.CounselorEntity;
import org.trams.hello.bean.jpa.CounselorFieldEntity;
import org.trams.hello.bean.jpa.CounselorScheduleSettingEntity;
import org.trams.hello.bean.jpa.UserCertificateEntity;
import org.trams.hello.bean.jpa.UserEducationEntity;
import org.trams.hello.bean.jpa.UserFileEntity;
import org.trams.hello.business.service.BanAccountHistoryService;
import org.trams.hello.business.service.BankService;
import org.trams.hello.business.service.CategoryService;
import org.trams.hello.business.service.CounselingCenterService;
import org.trams.hello.business.service.CounselingSessionService;
import org.trams.hello.business.service.CounselorBiographyService;
import org.trams.hello.business.service.CounselorFieldService;
import org.trams.hello.business.service.CounselorScheduleSettingService;
import org.trams.hello.business.service.CounselorService;
import org.trams.hello.business.service.UserCertificateService;
import org.trams.hello.business.service.UserEducationService;
import org.trams.hello.business.service.UserFileService;
import org.trams.hello.business.service.UserService;
import org.trams.hello.business.service.mapping.CounselorServiceMapper;
import org.trams.hello.common.mail.Mail;
import org.trams.hello.common.mail.Mail.EmailTemplate;
import org.trams.hello.web.common.AbstractController;
import org.trams.hello.web.common.ApplicationDefine;
import org.trams.hello.web.common.Login;
import org.trams.hello.web.common.Pager;
import org.trams.hello.web.common.utils.DataUtils;
import org.trams.hello.web.common.utils.ExcelUtils;
import org.trams.hello.web.common.utils.FileUtils;

//--- Entities

//--- Common classes
//--- Entities
//--- Services

/**
 * Spring MVC controller for 'Counselor' management.
 */
@Controller
@RequestMapping("/admin/user/counselor")
public class CounselorAdminController extends AbstractController {

	// --- Variables names ( to be used in JSP with Expression Language )
	private static final String MAIN_ENTITY_NAME = "counselor";
	private static final String MAIN_LIST_NAME = "list";

	private static final Integer PAGE_SIZE = 30;

	private static String nav = "counselor";

	// --- JSP pages names ( View name in the MVC model )
	private static final String JSP_CREATE = "admin/user/counselor/create";
	private static final String JSP_LIST = "admin/user/counselor/list";
	private static final String JSP_EDIT = "admin/user/counselor/edit";
	private static final String JSP_DISPLAY = "admin/user/counselor/display";
	private static final String JSP_SCHEDULE = "admin/user/counselor/schedule";

	// --- Main entity service
	@Resource
	private CounselorService counselorService; // Injected by Spring
	@Resource
	private CounselorServiceMapper counselorServiceMapper; // Injected by Spring
	@Resource
	private CounselingCenterService counselingCenterService;
	@Resource
	private CounselingSessionService counselingSessionService;

	@Resource
	private CounselorScheduleSettingService counselorScheduleSettingService;
	// --- Other service(s)

	@Resource
	private UserService userService; // Injected by Spring
	@Resource
	private BankService bankService;
	@Resource
	private CategoryService categoryService;
	@Resource
	private CounselorFieldService counselorFieldService;
	@Resource
	private UserCertificateService userCertificateService;
	@Resource
	private BanAccountHistoryService banAccountHistoryService;
	@Resource
	private UserEducationService userEducationService;
	@Resource
	private CounselorBiographyService counselorBiographyService;
	@Resource
	private UserFileService userFileService;

	@Resource
	private ServletContext servletContext;

	// --------------------------------------------------------------------------------------
	/**
	 * Default constructor
	 */
	public CounselorAdminController() {
		super(CounselorAdminController.class, MAIN_ENTITY_NAME);
		log("CounselorAdminController created.");
	}

	@RequestMapping("/list")
	public String list(
			@RequestParam(value = "role", defaultValue = "") Integer[] role,
			@RequestParam(value = "counselorCenterId", defaultValue = "") Integer counselorCenterId,
			@RequestParam(value = "counselField", defaultValue = "") Integer[] counselField,
			@RequestParam(value = "counselFieldAll", defaultValue = "0") Integer counselFieldAll,
			@RequestParam(value = "textCounselField", defaultValue = "전체") String textCounselField,
			@RequestParam(value = "active", defaultValue = "") Short[] actived,
			@RequestParam(value = "age", defaultValue = "") Integer[] age,
			@RequestParam(value = "aimmedRecommend", defaultValue = "") Short[] aimmedRecommend,
			@RequestParam(value = "statusActive", defaultValue = "") Short[] statusActive,
			@RequestParam(value = "type", defaultValue = "") String type,
			@RequestParam(value = "key", defaultValue = "") String key,
			@RequestParam(value = "orderBy", defaultValue = "createDate") String orderBy,
			@RequestParam(value = "page", defaultValue = "1") Integer page,
			HttpServletRequest request,
			HttpSession session, Model model, HttpServletResponse response) {
		Page<CounselorEntity> listPage = null;

		listPage = counselorService.filter(role, counselorCenterId, actived, age, statusActive, aimmedRecommend, type,
				key, counselField, orderBy, page, PAGE_SIZE);
		
		for (CounselorEntity i : listPage) {
			i.setCounselorNumber(counselorService.totalCounlingByCounselorId(i.getId()));
		}
		model.addAttribute(MAIN_LIST_NAME, listPage);
		List<CategoryEntity> list_category = categoryService.findByTypeAndIsShow((short) 1, (short) 1);
		List<CategoryEntity> list_category_parent = new ArrayList<>();
		List<CategoryEntity> list_category_child = new ArrayList<>();
		for (CategoryEntity categoryEntity : list_category) {
			if (categoryEntity.getParentId() > 0) {
				list_category_child.add(categoryEntity);
			} else {
				list_category_parent.add(categoryEntity);
			}
		}
		List<CounselingCenter> list_center = counselingCenterService.findAll();
		model.addAttribute("list_category_parent", list_category_parent);
		model.addAttribute("list_category_child", list_category_child);
		model.addAttribute("list_center", list_center);
		model.addAttribute("counselFieldAll", counselFieldAll);
		if(counselFieldAll == null){
			model.addAttribute("textCounselField", "전체");
		}else{
			model.addAttribute("textCounselField", textCounselField);
		}
		
		model.addAttribute("role", role);
		model.addAttribute("counselorCenterId", counselorCenterId);
		model.addAttribute("counselField", counselField);
		model.addAttribute("age", age);
		model.addAttribute("actived", actived);
		model.addAttribute("aimmedRecommend", aimmedRecommend);
		model.addAttribute("statusActive", statusActive);
		model.addAttribute("key", key);
		model.addAttribute("orderBy", orderBy);
		model.addAttribute("page", page);
		model.addAttribute("activePage", nav);
		new Pager<CounselorEntity>(listPage).setSetting(model, request);
		return JSP_LIST;
	}

	@RequestMapping(value = "/download_excel", method = RequestMethod.GET)
	public void exportExcel(
			@RequestParam(value = "role", defaultValue = "") Integer[] role,
			@RequestParam(value = "counselorCenterId", defaultValue = "") Integer counselorCenterId,
			@RequestParam(value = "counselField", defaultValue = "") Integer[] counselField,
			@RequestParam(value = "counselFieldAll", defaultValue = "") Integer counselFieldAll,
			@RequestParam(value = "textCounselField", defaultValue = "전체") String textCounselField,
			@RequestParam(value = "active", defaultValue = "") Short[] actived,
			@RequestParam(value = "age", defaultValue = "") Integer[] age,
			@RequestParam(value = "aimmedRecommend", defaultValue = "") Short[] aimmedRecommend,
			@RequestParam(value = "statusActive", defaultValue = "") Short[] statusActive,
			@RequestParam(value = "type", defaultValue = "") String type,
			@RequestParam(value = "key", defaultValue = "") String key,
			@RequestParam(value = "orderBy", defaultValue = "createDate") String orderBy,
			HttpServletRequest request,
			HttpSession session, Model model, HttpServletResponse response) {
		log("Action 'create'");
		try {
			Page<CounselorEntity> list = counselorService.filter(role, counselorCenterId, actived, age, statusActive,
					aimmedRecommend, type, key, counselField, orderBy, 1, Integer.MAX_VALUE);
			for (CounselorEntity i : list) {
				i.setCounselorNumber(counselorService.totalCounlingByCounselorId(i.getId()));
			}
			List<String> header = new ArrayList<>();
			header.add("번호");
			header.add("상담사명");
			header.add("사업자 구분");
			header.add("상담 가격");
			header.add("상담수");
			header.add("추천수");
			header.add("만족도점수");
			header.add("AIMMED추천");
			header.add("상태");
			List<List<Object>> list_data = null;
			if (list.getContent() != null) {
				list_data = new ArrayList<>();
				for (CounselorEntity i : list.getContent()) {
					List<Object> list_str = new ArrayList<Object>();
					list_str.add(String.valueOf(i.getId()));
					list_str.add(String.valueOf(i.getUser().getFullname()));
					if (i.getUser().getUserRole().getId() == 2) {
						list_str.add("프리랜서");
					} else if (i.getUser().getUserRole().getId() == 3) {
						list_str.add("센터 소속");
					}
					list_str.add(String.valueOf(i.getFeeCounselor()));
					list_str.add(String.valueOf(i.getCounselorNumber()));
					list_str.add(String.valueOf(i.getLikes()));
					list_str.add(String.valueOf(i.getPoints()));
					if (i.getAimmedRecommend() == 0) {
						list_str.add("NO");
					} else {
						list_str.add("YES");
					}
					if (i.getUser().getStatusActive() == 0) {
						list_str.add("정상");
					} else if (i.getUser().getStatusActive() == 1) {
						list_str.add("제재");
					} else if (i.getUser().getStatusActive() == 2) {
						list_str.add("휴면");
					} else if (i.getUser().getStatusActive() == 3) {
						list_str.add("탈퇴");
					}
					list_data.add(list_str);
				}
			}
			ExcelUtils.createExcelFile(request, response, null, header, list_data);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@RequestMapping(value = "/create", method = RequestMethod.GET)
	public String create(HttpSession session, Model model) {
		log("Action 'create'");
		model.addAttribute("activePage", nav);
		return JSP_CREATE;
	}

	@RequestMapping(value = "/create", method = RequestMethod.POST)
	public String create(HttpSession session, @ModelAttribute Counselor counselor, Model model) {
		log("Action 'create'");

		try {
			counselor.setCreateDate(new Date());
			counselor.setUpdateDate(new Date());
			counselorService.create(counselor);
			return "redirect:/" + JSP_LIST;
		} catch (Exception e) {
			System.out.println(e);
			return JSP_CREATE;
		}
	}

	@RequestMapping(value = "/edit/{id}", method = RequestMethod.GET)
	public String update(HttpSession session, @PathVariable("id") Integer id, Model model) {

		CounselorEntity counselor = counselorService.findByOne(id);
		List<CounselingCenter> centers = counselingCenterService.findAll();
		List<Bank> banks = bankService.findAll();
		List<BanAccountHistoryEntity> list_ban = banAccountHistoryService.listByUserId(id);
		if (list_ban.size() > 0) {
			model.addAttribute("list_ban", list_ban);
		}
		model.addAttribute("counselor", counselor);
		model.addAttribute("centers", centers);
		model.addAttribute("banks", banks);

		return JSP_EDIT;
	}

	@RequestMapping(value = "/edit/{id}", method = RequestMethod.POST)
	public String update(@PathVariable("id") Integer id, @ModelAttribute Counselor counselor, @ModelAttribute User user,
			@RequestParam(required = false) Integer bankId, @RequestParam(required = false) String accountBankNumber,
			@RequestParam(required = false) String accountBankHolder,
			@RequestParam(required = false) String mbtiCertificate,
			@RequestParam(required = false) String mmticCertificate, @RequestParam(required = false) String yearBirth,
			@RequestParam(required = false) String monthBirth, @RequestParam(required = false) String dayBirth,
			HttpSession session, Model model) {
		try {
			// update counselor
			Counselor c = counselorService.findById(id);
			User u = userService.findById(id);
			if (counselor.getCounselorCenterId() != null) {
				c.setCounselorCenterId(counselor.getCounselorCenterId());
				u.setRoleId(ApplicationDefine.USER_ROLE_COUNSELOR_IN_CENTER);
			}else{
				c.setCounselorCenterId(null);
			}
			c.setBankId(bankId);
			c.setAccountBankNumber(accountBankNumber);
			c.setAccountBankHolder(accountBankHolder);
			c.setActived(counselor.getActived());
			if (counselor.getAimmedRecommend() != null) {
				c.setAimmedRecommend(counselor.getAimmedRecommend());
			}
			if (counselor.getLevel() != null) {
				c.setLevel(counselor.getLevel());
			}
			if (counselor.getFeeCounselor() != null) {
				c.setFeeCounselor(counselor.getFeeCounselor());
			}
			if (counselor.getFeeCounselor50Minutes() != null) {
				c.setFeeCounselor50Minutes(counselor.getFeeCounselor50Minutes());
			}
			if (counselor.getGuidanceUsername() != null && !counselor.getGuidanceUsername().trim().isEmpty()) {
				c.setGuidanceUsername(counselor.getGuidanceUsername());
			}
			if (counselor.getGuidancePassword() != null && !counselor.getGuidancePassword().trim().isEmpty()) {
				c.setGuidancePassword(counselor.getGuidancePassword());
			}
			c.setMbtiCertificate(mbtiCertificate);
			if (counselor.getGuidancePassword() == null) {
				counselor.setGuidancePassword(DataUtils.parseStringFromDate(user.getDayOfBirth(), "yyMMdd"));
				Date d = DataUtils.parseDate(yearBirth + "/" + monthBirth + "/" + dayBirth,
						DataUtils.DatePattern.YYYYMMDD);
				c.setGuidancePassword(DataUtils.parseStringFromDate(d, "yyMMdd"));
			}
			counselorService.update(c);

			// update user
			
			if (user.getFullname() != null && !user.getFullname().trim().isEmpty()) {
				u.setFullname(user.getFullname());
			}
			if (user.getPhone() != null && !user.getPhone().trim().isEmpty()) {
				u.setPhone(user.getPhone());
			}
			if (yearBirth != null && !yearBirth.trim().isEmpty() && monthBirth != null && !monthBirth.trim().isEmpty()
					&& dayBirth != null && !dayBirth.trim().isEmpty()) {
				u.setDayOfBirth(DataUtils.parseDate(yearBirth + "/" + monthBirth + "/" + dayBirth,
						DataUtils.DatePattern.YYYYMMDD));
			}
			if (user.getRoleId() != null) {
				u.setRoleId(user.getRoleId());
			}

			userService.update(u);

		} catch (Exception e) {
			e.printStackTrace();
		}
		return "redirect:/" + JSP_EDIT + "/" + id;
	}

	@RequestMapping(value = "/display/{id}", method = RequestMethod.GET)
	public String display(HttpSession session, @PathVariable("id") Integer id, Model model,
			@RequestParam(required = false) Integer editSuccess) {
		List<CounselorFieldEntity> list_counsel_field = counselorFieldService.listBy_CounselorId(id);
		CounselorEntity counselor = counselorService.findByOne(id);
		List<CategoryEntity> list_fee = categoryService.findByType((short) 2);
		List<CategoryEntity> list_category = categoryService.findByTypeAndIsShow((short) 1, (short) 1);
		List<CategoryEntity> list_category_parent = new ArrayList<>();
		List<CategoryEntity> list_category_child = new ArrayList<>();
		List<CounselorBiographyEntity> list_biograpy = counselorBiographyService.listPagingByCounselorId(id);
		Page<UserEducationEntity> list_education = userEducationService.listPagingByUserId(1, Integer.MAX_VALUE, id);
		List<UserFileEntity> list_file = userFileService
				.listPagingByTypeAndUserId(ApplicationDefine.UserFile_Type.Certificate.getCode(), id);
		Page<UserCertificateEntity> list_cert = userCertificateService.listPagingByUserId(1, Integer.MAX_VALUE, id);
		if (list_education.getContent() != null) {
			model.addAttribute("list_education", list_education.getContent());
		}

		if (list_file != null) {
			model.addAttribute("list_file", list_file);
		}

		if (list_cert.getContent() != null) {
			model.addAttribute("list_cert", list_cert.getContent());
		}

		for (CategoryEntity categoryEntity : list_category) {
			if (categoryEntity.getParentId() > 0) {
				list_category_child.add(categoryEntity);
			} else {
				list_category_parent.add(categoryEntity);
			}
		}
		if (list_counsel_field != null) {
			Integer[] category_array = new Integer[list_counsel_field.size()];
			for (int i = 0; i < list_counsel_field.size(); i++) {
				category_array[i] = list_counsel_field.get(i).getCounselorFieldId();
			}
			model.addAttribute("category_array", category_array);
		}
		model.addAttribute("editSuccess", editSuccess);
		model.addAttribute("list_biograpy", list_biograpy);
		model.addAttribute("list_category_parent", list_category_parent);
		model.addAttribute("list_category_child", list_category_child);
		model.addAttribute("list_counsel_field", list_counsel_field);
		model.addAttribute("list_fee", list_fee);
		model.addAttribute("item", counselor);

		return JSP_DISPLAY;
	}

	@RequestMapping(value = "/display/{id}", method = RequestMethod.POST)
	public String display(@PathVariable("id") Integer id, @ModelAttribute Counselor counselor,
			@RequestParam(required = false) Integer[] categoryField,
			@RequestParam(required = false) MultipartFile thumbnailFile,
			@RequestParam(required = false) Integer[] education_id,
			@RequestParam(required = false) Integer[] certificated_id,
			@RequestParam(required = false) String[] university, @RequestParam(required = false) String[] biography,
			@RequestParam(required = false) Integer[] biographyId, @RequestParam(required = false) String[] faculty,
			@RequestParam(required = false) String[] certificateName,
			@RequestParam(required = false) String counselNumber, @RequestParam(required = false) String introduce,
			HttpSession session, Model model) {
		try {
			if (categoryField != null) {
				counselorFieldService.deleteByCounselorId(id);
				for (int i = 0; i < categoryField.length; i++) {
					CounselorField cf = new CounselorField();
					cf.setCounselorFieldId(categoryField[i]);
					cf.setCounselorId(id);
					cf.setCreateDate(new Date());
					cf.setUpdateDate(new Date());
					counselorFieldService.create(cf);
				}
			}
			Counselor c = counselorService.findById(id);
			c.setCounselNumber(counselNumber);
			c.setIntroduce(introduce);
			c.setCounselNumber(counselNumber);
			if (thumbnailFile.getSize() > 0) {
				c.setThumbnailUrl(FileUtils.saveFileOrigin(thumbnailFile, servletContext));
				c.setThumbnailName(thumbnailFile.getOriginalFilename());
			}
			counselorService.update(c);
			if (biography.length > 0) {
				for (int i = 0; i < biography.length; i++) {
					CounselorBiography cb = counselorBiographyService.findById(biographyId[i]);
					cb.setUpdateDate(new Date());
					cb.setContent(biography[i]);
					counselorBiographyService.update(cb);
				}
			}
			if (university.length > 0) {
				for (int i = 0; i < education_id.length; i++) {
					UserEducation ue = userEducationService.findById(education_id[i]);
					ue.setUpdateDate(new Date());
					ue.setFaculty(faculty[i]);
					ue.setUniversity(university[i]);
					userEducationService.update(ue);
				}
			}
			if (certificateName.length > 0) {
				for (int i = 0; i < certificateName.length; i++) {
					UserCertificate uc = userCertificateService.findById(certificated_id[i]);
					uc.setUpdateDate(new Date());
					uc.setName(certificateName[i]);
					userCertificateService.update(uc);
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return "redirect:/" + JSP_DISPLAY + "/" + id + "?editSuccess=1";
	}

	@RequestMapping(value = "/schedule/{id}", method = RequestMethod.GET)
	public String schedule(HttpSession session, @PathVariable("id") Integer id,
			@RequestParam(value = "startDate", defaultValue = "") String startDate, Model model) {
		try {

			Calendar c = Calendar.getInstance();
			if (startDate != null) {
				Date date = DataUtils.convertToDate(startDate, "yyyy-MM-dd");
				c.setTime(date);
			}
			c.set(Calendar.DAY_OF_WEEK, c.getFirstDayOfWeek() + 1);
			c.set(Calendar.HOUR_OF_DAY, 0);
			c.set(Calendar.MINUTE, 0);
			c.set(Calendar.SECOND, 0);
			c.set(Calendar.MILLISECOND, 0);
			Calendar endWeek = Calendar.getInstance();
			endWeek.setTime(c.getTime());
			endWeek.add(Calendar.DATE, 6);
			Calendar cal = Calendar.getInstance();
			cal.setTime(c.getTime());
			cal.add(Calendar.DATE, -7);
			model.addAttribute("preWeek", DataUtils.parseStringFromDate(cal.getTime(), "yyyy-MM-dd"));
			cal.add(Calendar.DATE, +14);
			model.addAttribute("nextWeek", DataUtils.parseStringFromDate(cal.getTime(), "yyyy-MM-dd"));
			DateFormat df = new SimpleDateFormat("MM.dd");
			DateFormat dfStartWeek = new SimpleDateFormat("yyyy년 MM월 dd일");
			Integer month = 1;
			Integer year = 0;
			String dayNames[] = { "월", "화", "수", "목", "금", "토", "일" };
			String titleTable = "";
			List<CounselorScheduleSettingEntity> list = counselorScheduleSettingService
					.listByWeekAndCounselorId(c.getTime(), endWeek.getTime(), id);
			List<List<String>> listColumnRervation = new ArrayList<>();
			List<List<String>> listColumnOnline = new ArrayList<>();
			Integer schedule_number = 0;
			Calendar now = Calendar.getInstance();
			
			int maxRow = 144;
			int maxColumn = 7;
			for (int column = 0; column < maxColumn; column++) {
				if (column == 0) {
					month = c.get(Calendar.MONTH) + 1;
					year = c.get(Calendar.YEAR);
					model.addAttribute("startWeek", dfStartWeek.format(c.getTime()) + " (월)");
				} else if (column == 6) {
					if (year != (c.get(Calendar.YEAR))) {
						model.addAttribute("endWeek", dfStartWeek.format(c.getTime()) + " (일)");
					} else if (month != (c.get(Calendar.MONTH) + 1)) {
						DateFormat dfEndWeek = new SimpleDateFormat("MM월 dd일 (일)");
						model.addAttribute("endWeek", dfEndWeek.format(c.getTime()));
					} else {
						DateFormat dfEndWeek = new SimpleDateFormat("dd일 (일)");
						model.addAttribute("endWeek", dfEndWeek.format(c.getTime()));
					}
				}
				// Add title date at table
				if (c.get(Calendar.DAY_OF_MONTH) == now.get(Calendar.DAY_OF_MONTH)) {
					titleTable += "<li><span style='color:blue'>" + df.format(c.getTime()) + "(" + dayNames[column]
							+ ")</span></li>";
				} else {
					titleTable += "<li><span>" + df.format(c.getTime()) + "(" + dayNames[column] + ")</span></li>";
				}

				titleTable += "<li><span>실시간</span></li>";
				// Add content table
				if (schedule_number < list.size()
						&& c.getTime().compareTo(list.get(schedule_number).getReservationDate()) == 0) {
					List<String> listByDayReservation = new ArrayList<>();
					List<String> listByDayOnline = new ArrayList<>();
					CounselorScheduleSettingEntity scheduleDay = list.get(schedule_number);
					String[] reservation = null;
					if (scheduleDay.getReservationTime() != null) {
						reservation = scheduleDay.getReservationTime().split(";");
					}
					String[] online = null;
					if (scheduleDay.getOnlineTime() != null) {
						if(!scheduleDay.getOnlineTime().trim().equals("")){
							online = scheduleDay.getOnlineTime().trim().split(";");
						}
					}
					List<Float> list_reservation = new ArrayList<>();
					List<Float> list_online = new ArrayList<>();
					if (reservation != null) {
						for (int j = 0; j < reservation.length; j++) {
							list_reservation.add(Float.valueOf(reservation[j]));
						}
					}
					if (online != null) {
						for (int k = 0; k < online.length; k++) {
							System.out.println("online: "+ online[k]);
							list_online.add(Float.valueOf(online[k]));
						}
					}
					Collections.sort(list_reservation);
					Collections.sort(list_online);
					
					int hour = 0;
					int minutes = 0;
					String totalHour = "";
					for (int row = 0; row < maxRow; row++) {
						totalHour = String.valueOf(hour+"."+minutes);
						if (list_reservation.contains(Float.valueOf(totalHour))) {
							listByDayReservation.add(" <td class='active'><jsp:text/></td>");
						} else {
							listByDayReservation.add(" <td><jsp:text/></td>");
						}

						if (list_online.contains(Float.valueOf(totalHour)) ) {
							listByDayOnline.add(" <td class='active2'><jsp:text/></td>");
						} else {
							listByDayOnline.add(" <td><jsp:text/></td>");
						}
						
						if(minutes == 5){
							hour+=1;
							minutes = 0;
						}else{
							minutes++;
						}
						
					}
					listColumnRervation.add(listByDayReservation);
					listColumnOnline.add(listByDayOnline);
					schedule_number++;
				} else {
					List<String> listByDayReservation = new ArrayList<>();
					List<String> listByDayOnline = new ArrayList<>();
					for (float row = 0; row < maxRow; row++) {
						listByDayReservation.add("<td><jsp:text/></td>");
						listByDayOnline.add("<td><jsp:text/></td>");
					}
					listColumnRervation.add(listByDayReservation);
					listColumnOnline.add(listByDayOnline);
				}
				c.add(Calendar.DATE, 1);
			}
			model.addAttribute("listColumnRervation", listColumnRervation);
			model.addAttribute("listColumnOnline", listColumnOnline);
			model.addAttribute("titleTable", titleTable);

		} catch (Exception e) {
			e.printStackTrace();
		}
		return JSP_SCHEDULE;
	}

	@RequestMapping(value = "/edit/v2/{id}", method = RequestMethod.POST)
	@ResponseBody
	public ResponseEntity edit(@PathVariable Integer id, @RequestParam String action,@RequestParam(required = false) String reason,
			@RequestParam(required = false) String withdrawalReason, HttpSession session) {

		Counselor counselor = counselorService.findById(id);
		User user = userService.findById(id);

		switch (action) {
		case "delete":
			Integer notCounseled = counselingSessionService.countCounselingSessionOfCounselor(id,
					ApplicationDefine.CounselingSessionStatus.NOT_COUNSELED.getCode());
			if (notCounseled != null && notCounseled.equals(1)) {
				return new ResponseEntity(Collections.singletonMap("code", 1), HttpStatus.BAD_REQUEST);
			}
			Integer counseled = counselingSessionService.countCounselingSessionOfCounselor(id,
					ApplicationDefine.CounselingSessionStatus.COUNSELD.getCode());
			if (counseled != null && counseled.equals(1)) {
				return new ResponseEntity(Collections.singletonMap("code", 2), HttpStatus.BAD_REQUEST);
			}
			counselorService.update_isDelete(id);
			user.setStatusActive(ApplicationDefine.UserStatusActive.WITHDRAWAL.getCode());
			user.setWithdrawalDate(new Date());
			user.setWithdrawalReason(withdrawalReason);
			user.setTypeWithdrawalReason((short)2);
			user.setIsDelete(1);
			userService.update(user);
			break;
		case "ban":
			UserItem admin = Login.getAdminLogin(session);
			BanAccountHistory b = new BanAccountHistory();
			b.setAdminBanId(admin.getId());
			b.setReason(reason);
			b.setCreateDate(new Date());
			b.setUserId(id);
			banAccountHistoryService.create(b);
			List<BanAccountHistoryEntity> list = banAccountHistoryService.listByUserId(id);
			Calendar c = Calendar.getInstance();
			c.add(Calendar.DATE, 7);
			user.setBannedLastTime(new Date());
			user.setStatusActive(ApplicationDefine.UserStatusActive.BANNED.getCode());
			user.setExpiredBannedTime(c.getTime());
			user.setBannedNumber(list.size());
			userService.update(user);
			HashMap<String, Object> params = new HashMap<>();
			params.put("fullname", user.getFullname());
			params.put("email", user.getEmail());
			params.put("banNumber", user.getBannedNumber());
			String reasonStr ="";
			for (BanAccountHistoryEntity i : list) {
				Calendar cal = Calendar.getInstance();
				cal.setTime(i.getCreateDate());
				reasonStr +="<p style='padding-left: 10px;margin: 0;'>"+i.getReason()+" (발생 일시 : "+cal.get(Calendar.YEAR)+"년 "+(cal.get(Calendar.MONTH)+1)+"월 "+cal.get(Calendar.DAY_OF_MONTH)+"일)</p>";
			}
			params.put("reason", reasonStr);
			Mail.sendEmailTemplate(user.getEmail(), params, EmailTemplate.BAN_ACCOUNT_COUNSELOR, "[Hello]"+user.getFullname()+ApplicationDefine.EmailSubject.BAN_ACCOUNT_COUNSELOR.getCode());
			break;
		case "unban":
			if (user.getBannedNumber() > 0) {
				user.setBannedNumber(user.getBannedNumber() - 1);
				banAccountHistoryService.deleteFirstByUser(id);
			} else {
				user.setBannedNumber(0);
			}
			user.setStatusActive(ApplicationDefine.UserStatusActive.NORMAL.getCode());
			userService.update(user);
			break;
		}
		return new ResponseEntity(HttpStatus.OK);
	}

}
