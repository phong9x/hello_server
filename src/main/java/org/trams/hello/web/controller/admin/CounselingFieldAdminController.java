/*
 * Created on 3 Mar 2017 ( Time 16:15:55 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.web.controller.admin;

import java.util.Date;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpSession;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
//--- Entities
import org.trams.hello.bean.Category;
import org.trams.hello.bean.jpa.CategoryEntity;
//--- Services 
import org.trams.hello.business.service.CategoryService;
//--- Common classes
import org.trams.hello.web.common.AbstractController;
import org.trams.hello.web.common.utils.FileUtils;

/**
 * Spring MVC controller for 'Category' management.
 */
@Controller
@RequestMapping("/admin/content/counselingField")
public class CounselingFieldAdminController extends AbstractController {

	//--- Variables names ( to be used in JSP with Expression Language )
	private static final String MAIN_ENTITY_NAME = "category";
	private static final String MAIN_LIST_NAME = "list";

	private static final Integer PAGE_SIZE   = 30;

	private static String nav = "counselingField";

	//--- JSP pages names ( View name in the MVC model )
	private static final String JSP_CREATE   = "admin/content/counselingField/create";
	private static final String JSP_LIST   = "admin/content/counselingField/list";
	private static final String JSP_EDIT   = "admin/content/counselingField/edit";
	private static final String JSP_DETAIL   = "admin/content/counselingField/detail";

	//--- Main entity service
	@Resource
    private CategoryService categoryService; // Injected by Spring
	@Resource
	private ServletContext servletContext;
	//--- Other service(s)

	//--------------------------------------------------------------------------------------
	/**
	 * Default constructor
	 */
	public CounselingFieldAdminController() {
		super(CounselingFieldAdminController.class, MAIN_ENTITY_NAME );
		log("CategoryAdminController created.");
	}

	@RequestMapping(value = "/list", method = RequestMethod.GET)
	public String list(
			@RequestParam(value="page",defaultValue="1") Integer page,
			HttpSession session,
			Model model) {
		List<CategoryEntity> listPage = categoryService.findByType((short)1);
		model.addAttribute("listCategory", listPage);	
		model.addAttribute(MAIN_LIST_NAME, listPage);	
		return JSP_LIST;
	}
	
	@RequestMapping(value = "/list", method = RequestMethod.POST)
	public String list_post(
			@RequestParam(value="id") Integer[] id,
			@RequestParam(value="categoryName", defaultValue="") String[] categoryName,
			@RequestParam(value="imageCheckUrl", defaultValue="") MultipartFile[] imageCheckUrl,
			@RequestParam(value="imageUncheckUrl", defaultValue="") MultipartFile[] imageUncheckUrl,
			@RequestParam(value="parentId", defaultValue="") Integer[] parentId,
			@RequestParam(value="relateCategoryId", defaultValue="") Integer[] relateCategoryId,
			HttpSession session,
			Model model) {
		try {
			for (int i = 0; i < id.length; i++) {
				if(id[i] >0){
					Category c = categoryService.findById(id[i]);
					if(imageCheckUrl[i].getSize() >0){
						c.setImageCheckUrl(FileUtils.saveFileOrigin(imageCheckUrl[i], servletContext));
					}
					if(imageUncheckUrl[i].getSize() >0){
						c.setImageUncheckUrl(FileUtils.saveFileOrigin(imageUncheckUrl[i], servletContext));
					}
					if(imageCheckUrl[i].getSize() >0 || imageUncheckUrl[i].getSize() >0){
						categoryService.update(c);
					}
				}else if(id[i] == 0 && categoryName[i] != null && !categoryName[i].equals("")){
					Category c = new Category();
					c.setCategoryName(categoryName[i]);
					c.setCreateDate(new Date());
					c.setDecription("counselor field");
					if(imageCheckUrl[i].getSize() >0){
						c.setImageCheckUrl(FileUtils.saveFileOrigin(imageCheckUrl[i], servletContext));
					}
					if(imageUncheckUrl[i].getSize() >0){
						c.setImageCheckUrl(FileUtils.saveFileOrigin(imageUncheckUrl[i], servletContext));
					}
					c.setIsShow((short)1);
					c.setParentId(parentId[i]);
					c.setRelateCategoryId(relateCategoryId[i]);
					c.setType((short)1);
					c.setUpdateDate(new Date());
					categoryService.create(c);
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return "redirect:/"+JSP_LIST;
	}

	
	@RequestMapping("/detail/{id}")
	public String detail(
	Model model, 
	HttpSession session,
	@PathVariable("id") Integer id) {
		
			
		Category category = categoryService.findById(id);
		model.addAttribute("category", category);
		return JSP_DETAIL;
	}
	@RequestMapping(value = "/create", method = RequestMethod.GET ) 
	public String create(
			HttpSession session,
			Model model) {
		log("Action 'create'");
		model.addAttribute("activePage", nav);
		return JSP_CREATE;
	}

	@RequestMapping(value = "/create", method = RequestMethod.POST ) 
	public String create(
			HttpSession session,
			@ModelAttribute Category category,
			Model model) {
		log("Action 'create'");
		
			
		try {
			category.setCreateDate( new Date() );
			category.setUpdateDate( new Date() );
			categoryService.create(category);
			return "redirect:/"+JSP_LIST;
		} catch(Exception e) {
			e.printStackTrace();
			return JSP_CREATE;
		}
	}

	@RequestMapping(value = "/edit/{id}", method = RequestMethod.GET)
	public String update(
	HttpSession session,
	@PathVariable("id") Integer id,
	Model model  ) {
		Category category = categoryService.findById(id);
		try {
			model.addAttribute("item", category);
			model.addAttribute("activePage", nav);
			return JSP_EDIT;
		} catch(Exception e) {
			return JSP_LIST;
		}
	}
	
	@RequestMapping(value = "/edit/{id}", method = RequestMethod.POST)
	public String update(
	@RequestParam(value="edit",defaultValue="0") Integer edit,
	@ModelAttribute Category item,
	HttpSession session,
	@PathVariable("id") Integer id,
	Model model  ) {
		Category category = categoryService.findById(id);
		try {
			category.setParentId( item.getParentId() );
			category.setCategoryName( item.getCategoryName() );
			category.setDecription( item.getDecription() );
			category.setComment( item.getComment() );
			category.setImageCheckUrl( item.getImageCheckUrl() );
			category.setImageUncheckUrl( item.getImageUncheckUrl() );
			category.setType( item.getType() );
			category.setIsShow( item.getIsShow() );
			category.setRelateCategoryId( item.getRelateCategoryId() );
			category.setUpdateDate( new Date() );
			category = categoryService.update(category);
			model.addAttribute("item", category);
		} catch(Exception e) {
			e.printStackTrace();
		}
		return "redirect:/"+JSP_EDIT+"/"+id;
	}
	
	

	@RequestMapping(value = "/delete/{id}")
	public String delete(
	Model model, 
	HttpSession session,
	@PathVariable("id") Integer id ) {
	
			
	categoryService.delete(id);
	return "redirect:/"+JSP_LIST;
	}

}
