/*
 * Created on 26 thg 12 2016 ( Time 14:11:49 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.web.controller.admin;

import java.util.Date;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.data.domain.Page;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.trams.hello.bean.Bank;
//--- Entities
import org.trams.hello.bean.CounselingCenter;
import org.trams.hello.bean.User;
import org.trams.hello.bean.jpa.CounselingCenterEntity;
import org.trams.hello.bean.jpa.UserEntity;
import org.trams.hello.business.service.BankService;
//--- Services 
import org.trams.hello.business.service.CounselingCenterService;
import org.trams.hello.business.service.UserService;
import org.trams.hello.business.service.mapping.CounselingCenterServiceMapper;
import org.trams.hello.business.service.mapping.UserServiceMapper;
//--- Common classes
import org.trams.hello.web.common.AbstractController;
import org.trams.hello.web.common.ApplicationDefine;
import org.trams.hello.web.common.Pager;
import org.trams.hello.web.common.utils.EncryptionUtils;
import org.trams.hello.web.common.utils.FileUtils;

/**
 * Spring MVC controller for 'CounselingCenter' management.
 */
@Controller
@RequestMapping("/admin/user/counselingCenter")
public class CounselingCenterAdminController extends AbstractController {

	// --- Variables names ( to be used in JSP with Expression Language )
	private static final String MAIN_ENTITY_NAME = "counselingCenter";
	private static final String MAIN_LIST_NAME = "list";

	private static final Integer PAGE_SIZE = 30;

	private static String nav = "counselingCenter";

	// --- JSP pages names ( View name in the MVC model )
	private static final String JSP_CREATE = "admin/user/counselingCenter/create";
	private static final String JSP_LIST = "admin/user/counselingCenter/list";
	private static final String JSP_EDIT = "admin/user/counselingCenter/edit";
	private static final String JSP_DETAIL = "admin/user/counselingCenter/detail";

	// --- Main entity service
	@Resource
	private CounselingCenterService counselingCenterService; // Injected by
	@Resource
	private CounselingCenterServiceMapper counselingCenterServiceMapper; // Injected by
	// --- Other service(s)
	@Resource
	private UserService userService; // Injected by Spring
	@Resource
	private UserServiceMapper userServiceMapper; // Injected by Spring
	@Resource
	private BankService bankService; // Injected by Spring
	@Resource
	ServletContext servletContext;
	// --------------------------------------------------------------------------------------
	/**
	 * Default constructor
	 */
	public CounselingCenterAdminController() {
		super(CounselingCenterAdminController.class, MAIN_ENTITY_NAME);
		log("CounselingCenterAdminController created.");
	}

	@RequestMapping("/list")
	public String list(@RequestParam(value = "page", defaultValue = "1") Integer page,
			@RequestParam(value = "orderBy", defaultValue = "createDate") String orderBy,
			@RequestParam(value = "status", defaultValue = "") Integer[] status,
			@RequestParam(value = "key", defaultValue = "") String key, 
			HttpServletRequest request, Model model) {
		if (key == null) {
			key = "";
		}
		Page<CounselingCenterEntity> listPage = null;
		if (status.length == 1) {
			listPage = counselingCenterService.listPagingBy_StatusAndName(status[0], "%" + key + "%", orderBy, page,PAGE_SIZE);
		} else {
			listPage = counselingCenterService.listPagingBy_Name("%" + key + "%", orderBy, page, PAGE_SIZE);
		}
		model.addAttribute(MAIN_LIST_NAME, listPage);

		model.addAttribute("key", key);
		model.addAttribute("status", status);
		model.addAttribute("orderBy", orderBy);
		model.addAttribute("activePage", nav);
		new Pager<CounselingCenterEntity>(listPage).setSetting(model,request);
		return JSP_LIST;
	}



	@RequestMapping(value = "/create", method = RequestMethod.GET)
	public String create(HttpSession session, Model model) {
		log("Action 'create'");
		List<Bank> list_bank = bankService.findAll();
		model.addAttribute("list_bank", list_bank);
		model.addAttribute("activePage", nav);
		return JSP_CREATE;
	}

	@RequestMapping(value = "/create", method = RequestMethod.POST)
	public String create(HttpSession session,
			@ModelAttribute CounselingCenter c, 
			@ModelAttribute User user, 
			@RequestParam(value = "file", defaultValue = "", required = false) MultipartFile file, 
			Model model) {
		log("Action 'create'");
		try {			
			Integer checkUsername = userService.findOneByUsername(user.getUsername());
			user.setPassword(EncryptionUtils.jwtBuild(user.getPassword()));
			user.setGender((short)1);
			user.setStatusActive((short) 0);
			user.setLoginFirst(1);
			user.setUpdateDate(new Date());
			user.setDayOfBirth(new Date());
			user.setHeart(0);
			user.setVoucherNumber(0);
			user.setCoin(0);
			user.setIsDelete(0);
			user.setRoleId(ApplicationDefine.USER_ROLE_COUNSELING_CENTER);
			if(checkUsername >0 ){
				List<Bank> list_bank = bankService.findAll();
				CounselingCenterEntity cce = new CounselingCenterEntity();
				counselingCenterServiceMapper.mapCounselingCenterToCounselingCenterEntity(c, cce);
				UserEntity ue = new UserEntity();
				userServiceMapper.mapUserToUserEntity(user, ue);
				cce.setUser(ue);
				model.addAttribute("item", cce);
				model.addAttribute("password",EncryptionUtils.jwtParse(cce.getUser().getPassword(), String.class));
				model.addAttribute("list_bank", list_bank);
				model.addAttribute("usernameExists", 1);
				return JSP_CREATE;
			}
			user= userService.create(user);
			c.setCreateDate(new Date());
			c.setUpdateDate(new Date());
			c.setCounselingSessionNumber(0);
			c.setCounselorNumber(0);
			c.setTotalCounselingFee(0);
			c.setCenterRegisterDate(new Date());
			c.setAimmedRecommend((short)0);
			c.setStatus(1);
			c.setId(user.getId());
			if(file.getSize() > 0){
				c.setPhotoSavingName(file.getOriginalFilename());
				c.setPhotoSavingUrl(FileUtils.saveFileOrigin(file, servletContext));
			}
			counselingCenterService.create(c);
			return "redirect:/" + JSP_LIST;
		} catch (Exception e) {
			e.printStackTrace();
			return JSP_CREATE;
		}
	}

	@RequestMapping(value = "/edit/{id}", method = RequestMethod.GET)
	public String update(HttpSession session, @PathVariable("id") Integer id, Model model) {
		try {
			CounselingCenterEntity counselingCenter = counselingCenterService.findOne(id);
			List<Bank> list_bank = bankService.findAll();
			Integer total_money = counselingCenterService.totalMoneyHaveNotPayForCounSelorCenter(id); 
			model.addAttribute("total_money", total_money);
			model.addAttribute("list_bank", list_bank);
			model.addAttribute("item", counselingCenter);
			model.addAttribute("password",EncryptionUtils.jwtParse(counselingCenter.getUser().getPassword(), String.class));
			model.addAttribute("activePage", nav);
			return JSP_EDIT;
		} catch (Exception e) {
			e.printStackTrace();
			return JSP_LIST;
		}
	}

	@Transactional
	@RequestMapping(value = "/edit/{id}", method = RequestMethod.POST)
	public String update(
			@RequestParam(value = "edit", defaultValue = "0") Integer edit,
			@RequestParam(value = "delete", defaultValue = "0") Integer delete, 
			
			@ModelAttribute User u,
			@ModelAttribute CounselingCenter item, 
			HttpSession session, 
			@PathVariable("id") Integer id, Model model) {
		try {
			if (delete > 0) {
				userService.update_isDelete(id);
				counselingCenterService.update_isDelete(id);
				counselingCenterService.updateCounselorFreelancerBy_CounselingCenter(id);
				return "redirect:/" + JSP_LIST ;
			}else {
				Integer checkUsername = userService.findOneByUsername(u.getUsername());
				CounselingCenterEntity counselingCenter = counselingCenterService.findOne(id);
				User user  = userService.findById(id);
				if(checkUsername >0 && !user.getUsername().equals(u.getUsername())){
					UserEntity ue = counselingCenter.getUser();
					ue.setUsername(u.getUsername());
					ue.setPassword(EncryptionUtils.jwtBuild(u.getPassword()));
					ue.setFullname(u.getFullname());
					ue.setPhone(u.getPhone());
					ue.setEmail(u.getEmail());
					counselingCenter.setCenterName(item.getCenterName());
					counselingCenter.setBusinessNumber(item.getBusinessNumber());
					counselingCenter.setRepresentPosition(item.getRepresentPosition());
					counselingCenter.setStatus(item.getStatus());
					counselingCenter.setAccountBankName(item.getAccountBankName());
					counselingCenter.setAccountBankNumber(item.getAccountBankNumber());
					counselingCenter.setAccountBankHolder(item.getAccountBankHolder());
					counselingCenter.setUpdateDate(new Date());
					counselingCenter.setUser(ue);
					List<Bank> list_bank = bankService.findAll();
					Integer total_money = counselingCenterService.totalMoneyHaveNotPayForCounSelorCenter(id); 
					model.addAttribute("total_money", total_money);
					model.addAttribute("list_bank", list_bank);
					model.addAttribute("item", counselingCenter);
					model.addAttribute("password",user.getPassword());
					model.addAttribute("activePage", nav);
					model.addAttribute("usernameExists", 1);
					return JSP_EDIT ;
				}else{
					CounselingCenter co = counselingCenterServiceMapper.mapCounselingCenterEntityToCounselingCenter(counselingCenter);
					user.setUsername(u.getUsername());
					user.setPassword(EncryptionUtils.jwtBuild(u.getPassword()));
					user.setFullname(u.getFullname());
					user.setPhone(u.getPhone());
					user.setEmail(u.getEmail());
					co.setCenterName(item.getCenterName());
					co.setBusinessNumber(item.getBusinessNumber());
					co.setRepresentPosition(item.getRepresentPosition());
					co.setStatus(item.getStatus());
					co.setAccountBankName(item.getAccountBankName());
					co.setAccountBankNumber(item.getAccountBankNumber());
					co.setAccountBankHolder(item.getAccountBankHolder());
					co.setUpdateDate(new Date());
					co = counselingCenterService.update(co);
					userService.update(user);
					model.addAttribute("item", counselingCenter);
				}
				
			} 
		} catch (Exception e) {
			e.printStackTrace();
		}
		return "redirect:/" + JSP_EDIT + "/" + id;
	}

	@RequestMapping(value = "/delete/{id}")
	public String delete(Model model, HttpSession session, @PathVariable("id") Integer id) {

		counselingCenterService.delete(id);
		return "redirect:/" + JSP_LIST;
	}

}
