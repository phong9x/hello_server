/*
 * Created on 12 May 2017 ( Time 10:13:21 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.web.controller.counselingcenter;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.trams.hello.bean.PageCustom;
import org.trams.hello.bean.UserItem;
import org.trams.hello.bean.web.counselingCenter.CounselingCenterStatistics;
import org.trams.hello.bean.web.counselingCenter.CounselorInfo;
import org.trams.hello.bean.web.counselingCenter.CounselorSummary;
import org.trams.hello.business.service.CounselingSessionService;
import org.trams.hello.business.service.CounselorService;
import org.trams.hello.business.service.UserService;
import org.trams.hello.web.common.Login;

/**
 * Spring MVC controller for 'Faq' management.
 */
@Controller
@RequestMapping("/counselingCenter/auth")
public class CounselingCenterNewAdminController extends BaseController {
	@Resource
    private UserService userService;
	@Resource
    private CounselorService counselorService;
	@Resource
    private CounselingSessionService counselingSessionService;
	
	@RequestMapping(value = "/home", method = RequestMethod.GET)
	public String index(@RequestParam Map<String, Object> params, HttpSession session, ModelMap map) {
		SimpleDateFormat sf = new SimpleDateFormat("yyyy-MM-dd");
		SimpleDateFormat formatter = new SimpleDateFormat("MM/dd");
		UserItem counselingCenter = Login.getCounselingCenterLogin(session);
		List<String> listDateBeforeSevenDays = new ArrayList<>();
		
		CounselingCenterStatistics counselingStatistics = userService.totalCounselingCenterStatistics(counselingCenter.getId());

		Calendar currentDate = Calendar.getInstance();
		currentDate.add(Calendar.DATE, -1);
		Calendar cal = Calendar.getInstance();
		cal.add(Calendar.DATE, -1);
		cal.add(Calendar.DATE, -7);
		
		List<Integer> totalCounselings = new ArrayList<>();
		List<Integer> totaltotalCounseleds = new ArrayList<>();
		
		for (int j = -6; j <= 0; j++) {
			Calendar cal2 = Calendar.getInstance();
			cal2.add(Calendar.DATE, -1);
			cal2.add(Calendar.DATE, j);
			listDateBeforeSevenDays.add(formatter.format(cal2.getTime()));
			String dateConvert = sf.format(cal2.getTime());
			totalCounselings.add(counselingSessionService.totalCounselingByCounselingCenterId(dateConvert, counselingCenter.getId()));
			totaltotalCounseleds.add(counselingSessionService.totalCounseledsByCounselingCenterId(dateConvert, counselingCenter.getId()));
		}
		
		map.addAttribute("listDateBeforeSevenDays", listDateBeforeSevenDays);
		map.addAttribute("counselingStatistics", counselingStatistics);
		map.addAttribute("totalCounselings", totalCounselings);
		map.addAttribute("totalCounseleds", totaltotalCounseleds);
		map.addAttribute("currentDate", sf.format(currentDate.getTime()));
		return getView();
	}
	
	
	@RequestMapping(value = "/counselorInfo", method = RequestMethod.GET)
	public String counselorInfo(
			@RequestParam(value="page",defaultValue="1") Integer page,
			@RequestParam(value="keyword",defaultValue="") String keyword,
			@RequestParam(value="status_counselor_Normal",defaultValue="0") Integer status_counselor_Normal,
			@RequestParam(value="status_counselor_banned",defaultValue="0") Integer status_counselor_banned,
			@RequestParam(value="status_counselor_display",defaultValue="0") Integer status_counselor_display,
			@RequestParam(value="type_search",defaultValue="counselorName") String typeSearch,
			@RequestParam(value="type_order",defaultValue="ord_counselorName") String typeOrder,HttpServletRequest request,
			HttpSession session, ModelMap map) {
		try {
			UserItem counselingCenter = Login.getCounselingCenterLogin(session);
			
			PageCustom<CounselorInfo> pageMs = counselorService.listCounselorInFo(counselingCenter.getId(), keyword, status_counselor_Normal,status_counselor_banned, status_counselor_display , typeSearch, typeOrder, page, 30);
			map.put("totalElement", pageMs.getTotalCount());
			map.put("StaticsVoucher", pageMs.getObj());
        	map.put("endIndex", pageMs.getTotalPages());
    		map.put("list", pageMs.getList());
    		map.put("currentIndex", pageMs.getCurrent());
    		map.put("totalCount",pageMs.getTotalCount());
    		map.put("size",pageMs.getSize());
    		map.put("totalPages",pageMs.getTotalPages());
			map.put("keyword", keyword);
			map.put("status_counselor_Normal", status_counselor_Normal);
			map.put("status_counselor_banned", status_counselor_banned);
			map.put("status_counselor_display", status_counselor_display);
			map.put("typeSearch", typeSearch);
			map.put("typeOrder", typeOrder);
			map.put("page", page);
			map.put("pagination_navigator", "/counselingCenter/auth/counselorInfo");
			map.put("beginIndex", 1);
			map.put("activePage", "counselorInfo");
			String param_url= request.getQueryString();
			map.put("param_url", param_url);
			return getView();
		} catch (Exception e) {
			e.printStackTrace();
			return getView();
		}
	}
	
	@RequestMapping(value = "/counselingSummary", method = RequestMethod.GET)
	public String counselingSummary(
			@RequestParam(value="page",defaultValue="1") Integer page,
			@RequestParam(value="keyword",defaultValue="") String keyword,
			@RequestParam(value="start_search",defaultValue="") String startSearch,
			@RequestParam(value="end_search",defaultValue="") String endSearch,
			@RequestParam(value="type_payment_coin",defaultValue="0") Integer type_payment_coin,
			@RequestParam(value="type_payment_voucher",defaultValue="0") Integer type_payment_voucher,
			@RequestParam(value="type_search",defaultValue="counselorName") String typeSearch,
			@RequestParam(value="type_order",defaultValue="ord_counselorName") String typeOrder,HttpServletRequest request,
			HttpSession session, ModelMap map) {
		try {
			UserItem counselingCenter = Login.getCounselingCenterLogin(session);
			
			PageCustom<CounselorSummary> pageMs = counselingSessionService.listCounselorSummary(counselingCenter.getId(), keyword, startSearch, endSearch, type_payment_coin, type_payment_voucher, typeSearch, typeOrder, page, 30);
			
			map.put("totalElement", pageMs.getTotalCount());
			map.put("StaticsVoucher", pageMs.getObj());
        	map.put("endIndex", pageMs.getTotalPages());
    		map.put("list", pageMs.getList());
    		map.put("currentIndex", pageMs.getCurrent());
    		map.put("totalCount",pageMs.getTotalCount());
    		map.put("size",pageMs.getSize());
    		map.put("totalPages",pageMs.getTotalPages());
			map.put("keyword", keyword);
			map.put("startSearch", startSearch);
			map.put("endSearch", endSearch);
			map.put("type_payment_voucher", type_payment_voucher);
			map.put("type_payment_coin", type_payment_coin);
			map.put("typeSearch", typeSearch);
			map.put("typeOrder", typeOrder);
			map.put("page", page);
			map.put("pagination_navigator", "/counselingCenter/auth/counselingSummary");
			map.put("beginIndex", 1);
			map.put("activePage", "counselingSummary");
			String param_url= request.getQueryString();
			map.put("param_url", param_url);
			return getView();
		} catch (Exception e) {
			e.printStackTrace();
			return getView();
		}
	}
	
	
}
