/*
 * Created on 25 May 2017 ( Time 11:29:11 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.web.controller.admin;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.data.domain.Page;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
//--- Entities
import org.trams.hello.bean.PaymentProfit;
import org.trams.hello.bean.PaymentProfitData;
import org.trams.hello.bean.api.CounselorProfitProcess;
import org.trams.hello.bean.jpa.CounselorEntity;
import org.trams.hello.bean.jpa.PaymentProfitEntity;
import org.trams.hello.business.service.CounselingCenterService;
import org.trams.hello.business.service.CounselingSessionService;
import org.trams.hello.business.service.CounselorService;
//--- Services 
import org.trams.hello.business.service.PaymentProfitService;
//--- Common classes
import org.trams.hello.web.common.AbstractController;
import org.trams.hello.web.common.ApplicationDefine;
import org.trams.hello.web.common.Pager;
import org.trams.hello.web.common.utils.DataUtils;
import org.trams.hello.web.common.utils.ExcelUtils;

/**
 * Spring MVC controller for 'PaymentProfit' management.
 */
@Controller
@RequestMapping("/admin/profit")
public class ProfitSharingAdminController extends AbstractController {

	//--- Variables names ( to be used in JSP with Expression Language )
	private static final String MAIN_ENTITY_NAME = "paymentProfit";
	private static final String MAIN_LIST_NAME = "list";

	private static final Integer PAGE_SIZE   = 30;

	private static String nav = "profit";

	//--- JSP pages names ( View name in the MVC model )
	private static final String JSP_COUNSELOR_LIST   = "admin/profit/counselor/list";
	private static final String JSP_COUNSELOR_PROCESS   = "admin/profit/counselor/process";
	private static final String JSP_COUNSELOR_CENTER_LIST   = "admin/profit/counselorCenter/list";
	private static final String JSP_COUNSELOR_CENTER_PROCESS   = "admin/profit/counselorCenter/process";
	//--- Main entity service
	
	@Resource
    private CounselingSessionService counselingSessionService;
	
	@Resource
    private CounselorService counselorService;
	
	@Resource
    private CounselingCenterService counselingCenterService;
	
	@Resource
    private PaymentProfitService paymentProfitService;

	
	
	//--------------------------------------------------------------------------------------
	/**
	 * Default constructor
	 */
	public ProfitSharingAdminController() {
		super(ProfitSharingAdminController.class, MAIN_ENTITY_NAME );
		log("PaymentProfitAdminController created.");
	}

	@RequestMapping("/counselor/list")
	public String list(
			@RequestParam(value="page",defaultValue="1") Integer page,
			@RequestParam(value="year", defaultValue = "") Integer year,
			@RequestParam(value="month", defaultValue= "") Integer month,
			HttpSession session,
			HttpServletRequest request,
			Model model) {
		Calendar now = Calendar.getInstance();
		now.add(Calendar.MONTH, -1);
		if(year == null){
			year = now.get(Calendar.YEAR);
		}
		if(month == null){
			month = now.get(Calendar.MONTH)+1;
		}
		paymentProfitService.updateProfitCounselorEveryDay(year, month);
		Page<PaymentProfitEntity> listPage = paymentProfitService.listPagingByMonth(year, month, (short)1, page, Integer.MAX_VALUE);
		Integer totalCoin = 0;
		Integer totalVoucher = 0;
		Integer totalProfit = 0;
		Integer totalAdminRefund = 0;
		
		if(!listPage.getContent().isEmpty()){
			for (PaymentProfitEntity i : listPage.getContent()) {
				totalCoin+=i.getCoin();
				totalVoucher+=i.getVoucher();
				totalProfit+=i.getProfit();
				totalAdminRefund+=i.getAdminRefund();
			}
		}
		
		model.addAttribute("totalCoin", totalCoin);
		model.addAttribute("totalVoucher", totalVoucher);
		model.addAttribute("totalProfit", totalProfit);
		model.addAttribute("uri", request.getRequestURI());
		model.addAttribute("totalAdminRefund", totalAdminRefund);
		model.addAttribute(MAIN_LIST_NAME, listPage);	
		model.addAttribute("activePage", nav);
		model.addAttribute("year", year);
		model.addAttribute("month", month);
		model.addAttribute("yearNow", now.get(Calendar.YEAR));
		model.addAttribute("monthNow", now.get(Calendar.MONTH));
		
		Calendar c = Calendar.getInstance();
		c.set(Calendar.DAY_OF_MONTH, 1);
		c.set(Calendar.YEAR, year);
		c.set(Calendar.MONTH, month-1);
		model.addAttribute("startMonth", DataUtils.parseStringFromDate(c.getTime(), "yyyy-MM-dd"));
		c.set(Calendar.DAY_OF_MONTH, c.getActualMaximum(Calendar.DAY_OF_MONTH));
		model.addAttribute("endMonth", DataUtils.parseStringFromDate(c.getTime(), "yyyy-MM-dd"));
		
		new Pager<PaymentProfitEntity>(listPage).setSetting(model, request);
		return JSP_COUNSELOR_LIST;
	}
	
	@RequestMapping(value = "/counselor/excel", method = RequestMethod.GET)
	public void exportExcel(
			@RequestParam(value="year", defaultValue = "") Integer year,
			@RequestParam(value="month", defaultValue= "") Integer month,
			HttpSession session, Model model, 
			HttpServletResponse response,
			HttpServletRequest request
			) {
		log("Action 'create'");
		try {
			Calendar now = Calendar.getInstance();
			now.add(Calendar.MONTH, -1);
			if(year == null){
				year = now.get(Calendar.YEAR);
			}
			if(month == null){
				month = now.get(Calendar.MONTH)+1;
			}
			Page<PaymentProfitEntity> listPage = paymentProfitService.listPagingByMonth(year, month, (short)1, 1, Integer.MAX_VALUE);
			List<PaymentProfitEntity> list = listPage.getContent();
			Integer totalPayment = 0;
			Integer totalProfit = 0;
			Integer totalAdminRefund = 0;
			
			if(!listPage.getContent().isEmpty()){
				for (PaymentProfitEntity i : listPage.getContent()) {
					totalPayment+=i.getCoin();
					totalPayment+=i.getVoucher();
					totalProfit+=i.getProfit();
					totalAdminRefund+=i.getAdminRefund();
				}
			}
			
			List<Object> header = new ArrayList<>();
			header.add(year+"년 "+month+"월");
			header.add(totalAdminRefund);
			header.add(totalProfit);
			header.add(totalProfit - totalAdminRefund);
			
			List<List<Object>> list_data = null;
			if (list != null) {
				list_data = new ArrayList<>();
				int index =1;
				for (PaymentProfitEntity i : list) {
					List<Object> list_str = new ArrayList<Object>();
					CounselorEntity c = counselorService.findByOne(i.getUser().getId());
					list_str.add(index);
					if(c.getBank() != null){
						list_str.add(c.getBank().getBankName());
					}else{
						list_str.add("");
					}
					if(c.getAccountBankNumber() != null){
						list_str.add(c.getAccountBankNumber());
					}else{
						list_str.add("");
					}
					list_str.add(i.getName());
					list_str.add(i.getUser().getUsername());
					list_str.add(i.getAdminRefund());
					list_str.add(i.getName());
					list_str.add("");
					list_str.add(i.getProfit());
					list_str.add(i.getProfit() - i.getAdminRefund());
					list_str.add("");
					if(i.getStatus() == 0){
						list_str.add("미지급");
					}else{
						list_str.add("지급완료");
					}
					if(i.getUser().getAddress() == null){
						list_str.add("");
					}else{
						list_str.add(i.getUser().getAddress());
					}
					list_data.add(list_str);
					index++;
				}
			}
			ExcelUtils.createExcelFileUseTemplateHeaderCustom(request, response, ApplicationDefine.ExcelTemplate.PROFIT_COUNSELOR, header, list_data);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	

	@RequestMapping("/counselor/process")
	public String process(
			@RequestParam(value="page",defaultValue="1") Integer page,
			@RequestParam(value="year", defaultValue = "") Integer year,
			@RequestParam(value="month", defaultValue= "") Integer month,
			HttpSession session,
			HttpServletRequest request,
			Model model) {
		Calendar now = Calendar.getInstance();
		now.add(Calendar.MONTH, -1);
		if(year == null){
			year = now.get(Calendar.YEAR);
		}
		if(month == null){
			month = now.get(Calendar.MONTH)+1;
		}
		Page<PaymentProfitEntity> listPage = paymentProfitService.listPagingByMonth(year, month, (short)1, page, Integer.MAX_VALUE);
		Integer totalCoin = 0;
		Integer totalVoucher = 0;
		Integer totalProfit = 0;
		Integer totalAdminRefund = 0;
		
		if(!listPage.getContent().isEmpty()){
			for (PaymentProfitEntity i : listPage.getContent()) {
				totalCoin+=i.getCoin();
				totalVoucher+=i.getVoucher();
				totalProfit+=i.getProfit();
				totalAdminRefund+=i.getAdminRefund();
			}
		}
		
		model.addAttribute("totalCoin", totalCoin);
		model.addAttribute("totalVoucher", totalVoucher);
		model.addAttribute("totalProfit", totalProfit);
		model.addAttribute("uri", request.getRequestURI());
		model.addAttribute("totalAdminRefund", totalAdminRefund);
		model.addAttribute(MAIN_LIST_NAME, listPage);	
		model.addAttribute("activePage", nav);
		model.addAttribute("year", year);
		model.addAttribute("month", month);
		model.addAttribute("yearNow", now.get(Calendar.YEAR));
		model.addAttribute("monthNow", now.get(Calendar.MONTH));
		new Pager<PaymentProfitEntity>(listPage).setSetting(model, request);
		return JSP_COUNSELOR_PROCESS;
	}
	
	@RequestMapping(value = "/counselor/process", method = RequestMethod.POST)
	public String process_post(
			@ModelAttribute CounselorProfitProcess c,
			HttpSession session,
			HttpServletRequest request,
			Model model) throws IllegalStateException, IOException {
		List<PaymentProfitData> list = c.getProfit();
		for (PaymentProfitData i : list) {
			if(i.getType() != null){
				PaymentProfit p = paymentProfitService.findById(i.getId());
				if(p.getAdminRefund() == null){
					p.setAdminRefund(0);
				}else{
					p.setAdminRefund(i.getAdminRefund());
				}
				p.setUpdateDate(new Date());
				p.setStatus(i.getStatus());
				paymentProfitService.update(p);
			}
		}
		return "redirect:/"+JSP_COUNSELOR_PROCESS;
	}
	
	@RequestMapping("/counselorCenter/list")
	public String counselorCenter(
			@RequestParam(value="page",defaultValue="1") Integer page,
			@RequestParam(value="year", defaultValue = "") Integer year,
			@RequestParam(value="month", defaultValue= "") Integer month,
			HttpSession session,
			HttpServletRequest request,
			Model model) {
		Calendar now = Calendar.getInstance();
		now.add(Calendar.MONTH, -1);
		if(year == null){
			year = now.get(Calendar.YEAR);
		}
		if(month == null){
			month = now.get(Calendar.MONTH)+1;
		}
		paymentProfitService.updateProfitCounselorCenterEveryDay(year, month);
		Page<PaymentProfitEntity> listPage = paymentProfitService.listPagingByMonth(year, month, (short)2, page, Integer.MAX_VALUE);
		Integer totalCoin = 0;
		Integer totalVoucher = 0;
		Integer totalProfit = 0;
		Integer totalAdminRefund = 0;
		
		if(!listPage.getContent().isEmpty()){
			for (PaymentProfitEntity i : listPage.getContent()) {
				totalCoin+=i.getCoin();
				totalVoucher+=i.getVoucher();
				totalProfit+=i.getProfit();
				totalAdminRefund+=i.getAdminRefund();
			}
		}
		
		model.addAttribute("totalCoin", totalCoin);
		model.addAttribute("totalVoucher", totalVoucher);
		model.addAttribute("totalProfit", totalProfit);
		model.addAttribute("uri", request.getRequestURI());
		model.addAttribute("totalAdminRefund", totalAdminRefund);
		model.addAttribute(MAIN_LIST_NAME, listPage);	
		model.addAttribute("activePage", nav);
		model.addAttribute("year", year);
		model.addAttribute("month", month);
		model.addAttribute("yearNow", now.get(Calendar.YEAR));
		model.addAttribute("monthNow", now.get(Calendar.MONTH));
		
		Calendar c = Calendar.getInstance();
		c.set(Calendar.DAY_OF_MONTH, 1);
		c.set(Calendar.YEAR, year);
		c.set(Calendar.MONTH, month-1);
		model.addAttribute("startMonth", DataUtils.parseStringFromDate(c.getTime(), "yyyy-MM-dd"));
		c.set(Calendar.DAY_OF_MONTH, c.getActualMaximum(Calendar.DAY_OF_MONTH));
		model.addAttribute("endMonth", DataUtils.parseStringFromDate(c.getTime(), "yyyy-MM-dd"));
		
		new Pager<PaymentProfitEntity>(listPage).setSetting(model, request);
		return JSP_COUNSELOR_CENTER_LIST;
	}
	
	@RequestMapping(value = "/counselorCenter/excel", method = RequestMethod.GET)
	public void exportExcelCenter(
			@RequestParam(value="year", defaultValue = "") Integer year,
			@RequestParam(value="month", defaultValue= "") Integer month,
			HttpSession session, Model model, 
			HttpServletResponse response,
			HttpServletRequest request
			) {
		log("Action 'create'");
		try {
			Calendar now = Calendar.getInstance();
			now.add(Calendar.MONTH, -1);
			if(year == null){
				year = now.get(Calendar.YEAR);
			}
			if(month == null){
				month = now.get(Calendar.MONTH)+1;
			}
			Page<PaymentProfitEntity> listPage = paymentProfitService.listPagingByMonth(year, month, (short)1, 1, Integer.MAX_VALUE);
			List<PaymentProfitEntity> list = listPage.getContent();
			List<String> header = new ArrayList<>();
			header.add("번호");
			header.add("상담사명");
			header.add("헬로코인");
			header.add("헬로코인");
			header.add("수익분배율");
			header.add("정산 금액");
			header.add("실제 지급 금액");
			header.add("정산 상태");
			header.add("정산 근거");	
			List<List<Object>> list_data = null;
			if (list != null) {
				list_data = new ArrayList<>();
				int index =1;
				for (PaymentProfitEntity i : list) {
					List<Object> list_str = new ArrayList<Object>();
					list_str.add(index);
					list_str.add(i.getName());
					list_str.add(i.getCoin());
					list_str.add(i.getVoucher());
					if(i.getTax() == null){
						list_str.add(85+"%");
					}else{
						list_str.add(i.getTax()+"%");
					}
					list_str.add(i.getProfit());
					list_str.add(i.getAdminRefund());
					if(i.getStatus() == 0){
						list_str.add("지급완료");
					}else{
						list_str.add("미지급");
					}
					list_data.add(list_str);
					index++;
				}
			}
			ExcelUtils.createExcelFile(request, response, null, header, list_data);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	

	@RequestMapping(value = "/counselorCenter/process", method = RequestMethod.GET)
	public String processCenter(
			@RequestParam(value="year", defaultValue = "") Integer year,
			@RequestParam(value="month", defaultValue= "") Integer month,
			@RequestParam(value="success", defaultValue= "0") Integer success,
			HttpSession session,
			HttpServletRequest request,
			Model model) {
		Calendar now = Calendar.getInstance();
		now.add(Calendar.MONTH, -1);
		if(year == null){
			year = now.get(Calendar.YEAR);
		}
		if(month == null){
			month = now.get(Calendar.MONTH)+1;
		}
		Page<PaymentProfitEntity> listPage = paymentProfitService.listPagingByMonth(year, month, (short)2, 1, Integer.MAX_VALUE);
		Integer totalCoin = 0;
		Integer totalVoucher = 0;
		Integer totalProfit = 0;
		Integer totalAdminRefund = 0;
		
		if(!listPage.getContent().isEmpty()){
			for (PaymentProfitEntity i : listPage.getContent()) {
				totalCoin+=i.getCoin();
				totalVoucher+=i.getVoucher();
				totalProfit+=i.getProfit();
				totalAdminRefund+=i.getAdminRefund();
			}
		}
		
		model.addAttribute("success", success);
		model.addAttribute("totalCoin", totalCoin);
		model.addAttribute("totalVoucher", totalVoucher);
		model.addAttribute("totalProfit", totalProfit);
		model.addAttribute("uri", request.getRequestURI());
		model.addAttribute("totalAdminRefund", totalAdminRefund);
		model.addAttribute(MAIN_LIST_NAME, listPage);	
		model.addAttribute("activePage", nav);
		model.addAttribute("year", year);
		model.addAttribute("month", month);
		model.addAttribute("yearNow", now.get(Calendar.YEAR));
		model.addAttribute("monthNow", now.get(Calendar.MONTH));
		new Pager<PaymentProfitEntity>(listPage).setSetting(model, request);
		return JSP_COUNSELOR_CENTER_PROCESS;
	}
	
	@RequestMapping(value = "/counselorCenter/process", method = RequestMethod.POST)
	public String counselorCenter_process_post(
			@RequestParam(value="year", defaultValue = "") Integer year,
			@RequestParam(value="month", defaultValue= "") Integer month,
			@ModelAttribute CounselorProfitProcess c,
			HttpSession session,
			HttpServletRequest request,
			Model model) throws IllegalStateException, IOException {
		List<PaymentProfitData> list = c.getProfit();
		for (PaymentProfitData i : list) {
				PaymentProfit p = paymentProfitService.findById(i.getId());
				if(p.getAdminRefund() == null){
					p.setAdminRefund(0);
				}else{
					p.setAdminRefund(i.getAdminRefund());
				}
				p.setUpdateDate(new Date());
				p.setStatus(i.getStatus());
				paymentProfitService.update(p);
		}
		return "redirect:/"+JSP_COUNSELOR_CENTER_PROCESS+"?month="+month+"&year="+year+"&success=1";
	}
}
