/*
 * Created on 12 May 2017 ( Time 10:13:21 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.web.controller.admin;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.trams.hello.bean.PageCustom;
import org.trams.hello.bean.User;
import org.trams.hello.bean.jpa.UserEntity;
import org.trams.hello.business.service.UserService;
//--- Common classes
import org.trams.hello.web.common.AbstractController;
import org.trams.hello.web.common.Pager;
import org.trams.hello.web.common.utils.DataUtils;

/**
 * Spring MVC controller for 'Faq' management.
 */
@Controller
@RequestMapping("/admin/account")
public class AccountAdminController extends AbstractController {
	private static final String MAIN_ENTITY_NAME = "account";
	private static final String MAIN_LIST_NAME = "list";
	private static final Integer PAGE_SIZE   = 30;
	private static String nav = "account";

	private static final String JSP_CREATE   = "admin/account/create";
	private static final String JSP_LIST   = "admin/account/list";
	private static final String JSP_EDIT   = "admin/account/edit";
	
	@Resource
    private UserService userService;
	
	public AccountAdminController() {
		super(AccountAdminController.class, MAIN_ENTITY_NAME );
		log("FaqAdminController created.");
	}

	@RequestMapping("/list")
	public String list(
			@RequestParam(value="page",defaultValue="1") Integer page,
			@RequestParam(value="type_search",defaultValue="nameAdmin") String type_search,
			@RequestParam(value="keyword",defaultValue="") String key,
			HttpSession session,
			HttpServletRequest request,
			Model model) throws ParseException {
		if(key==null){
			key="";
		}
		
		PageCustom<UserEntity> listPage = userService.getAdminList(type_search, key, page, PAGE_SIZE);
		
		model.addAttribute(MAIN_LIST_NAME, listPage);
		model.addAttribute("type_search", type_search);
		model.addAttribute("list", listPage.getList());
		model.addAttribute("keyword", key);
		model.addAttribute("page", page);
		model.addAttribute("activePage", nav);
		model.addAttribute("totalCount", listPage.getTotalCount());
		model.addAttribute("pagination_navigator", "/admin/account/list");
		new Pager<UserEntity>(listPage).setManualSetting(model, request);
		return JSP_LIST;
	}

	@RequestMapping(value = "/create", method = RequestMethod.GET)
	public String create(HttpSession session,  Model model) {
		log("Action 'create'");
		try {
			return JSP_CREATE;
		} catch (Exception e) {
			e.printStackTrace();
			return JSP_LIST;
		}
	}
	
	@RequestMapping(value = "/create", method = RequestMethod.POST)
	public String createPOST(
			@RequestParam Map<String, Object> params,
			HttpSession session,  Model model) {
		log("Action 'create'");
		try {
			String username = String.valueOf(params.get("username"));
			String password = String.valueOf(params.get("password"));
			String fullname = String.valueOf(params.get("fullname"));
			Integer busiyear = Integer.valueOf(params.get("busiyear").toString());
			Integer busimonth = Integer.valueOf(params.get("busimonth").toString());
			Integer busiday = Integer.valueOf(params.get("busiday").toString());
			String phone = String.valueOf(params.get("phone"));
			Calendar birthOfDate = Calendar.getInstance();
			birthOfDate.set(busiyear, busimonth-1, busiday, 0, 0, 0);
			
			User user = new User();
			user.setRoleId(8);
			user.setStatusActive((short) 0);
			user.setUsername(username);
			user.setPassword(DataUtils.getMD5(password));
			user.setFullname(fullname);
			user.setDayOfBirth(birthOfDate.getTime());
			user.setPhone(phone);
			user.setIsDelete(0);
			user.setCreateDate(new Date());
			user.setUpdateDate(new Date());
			user = userService.create(user);
			
			return "redirect:/"+ JSP_LIST;
		} catch (Exception e) {
			e.printStackTrace();
			return JSP_CREATE;
		}
	}
	
	@RequestMapping(value = "/edit/{id}", method = RequestMethod.GET)
	public String edit(HttpSession session, @PathVariable(value="id") Integer id, Model model) {
		log("Action 'edit'");
		try {
			User user = userService.findById(id);
			Date birthOfDate = user.getDayOfBirth();
			SimpleDateFormat year = new SimpleDateFormat("yyyy");
			SimpleDateFormat month = new SimpleDateFormat("MM");
			SimpleDateFormat day = new SimpleDateFormat("dd");
			
			model.addAttribute("yearUser", Integer.valueOf(year.format(birthOfDate)));
			model.addAttribute("monthUser", Integer.valueOf(month.format(birthOfDate)));
			model.addAttribute("dayUser", Integer.valueOf(day.format(birthOfDate)));
			model.addAttribute("user", user);
			return JSP_EDIT;
		} catch (Exception e) {
			e.printStackTrace();
			return JSP_LIST;
		}
	}

	@RequestMapping(value = "/edit/{id}", method = RequestMethod.POST)
	public String editPOST(HttpSession session, @PathVariable(value="id") Integer id, Model model
			, @RequestParam Map<String, Object> params) {
		log("Action 'edit'");
		try {
			User user = userService.findById(id);
			String password = String.valueOf(params.get("password"));
			String fullname = String.valueOf(params.get("fullname"));
			Integer busiyear = Integer.valueOf(params.get("busiyear").toString());
			Integer busimonth = Integer.valueOf(params.get("busimonth").toString());
			Integer busiday = Integer.valueOf(params.get("busiday").toString());
			String phone = String.valueOf(params.get("phone"));
			Calendar birthOfDateCalendar = Calendar.getInstance();
			birthOfDateCalendar.set(busiyear, busimonth-1, busiday, 0, 0, 0);
			
			user.setStatusActive((short) 0);
			user.setPassword(DataUtils.getMD5(password));
			user.setFullname(fullname);
			user.setDayOfBirth(birthOfDateCalendar.getTime());
			user.setPhone(phone);
			user.setUpdateDate(new Date());
			user = userService.update(user);
			
			
			Date birthOfDate = user.getDayOfBirth();
			SimpleDateFormat year = new SimpleDateFormat("yyyy");
			SimpleDateFormat month = new SimpleDateFormat("MM");
			SimpleDateFormat day = new SimpleDateFormat("dd");
			
			model.addAttribute("yearUser", Integer.valueOf(year.format(birthOfDate)));
			model.addAttribute("monthUser", Integer.valueOf(month.format(birthOfDate)));
			model.addAttribute("dayUser", Integer.valueOf(day.format(birthOfDate)));
			model.addAttribute("user", user);
			return JSP_EDIT;
		} catch (Exception e) {
			e.printStackTrace();
			return JSP_LIST;
		}
	}


}
