/*
 * Created on 22 thg 8 2016 ( Time 15:01:35 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.web.controller.mobile;

import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Enumeration;
import java.util.HashMap;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.commons.httpclient.DefaultHttpMethodRetryHandler;
import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.HttpException;
import org.apache.commons.httpclient.HttpStatus;
import org.apache.commons.httpclient.methods.GetMethod;
import org.apache.commons.httpclient.params.HttpMethodParams;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.trams.hello.bean.BankForPayment;
import org.trams.hello.bean.PaymentHistory;
import org.trams.hello.bean.Policy;
import org.trams.hello.bean.User;
import org.trams.hello.bean.UserItem;
import org.trams.hello.business.service.BankForPaymentService;
import org.trams.hello.business.service.PaymentHistoryService;
import org.trams.hello.business.service.PolicyService;
import org.trams.hello.business.service.UserService;
import org.trams.hello.rest.common.AuthorizationToken;
import org.trams.hello.web.common.AbstractController;
import org.trams.hello.web.common.ApplicationDefine;
import org.trams.hello.web.common.utils.ConstantUtils;
import org.trams.hello.web.common.utils.KakaoPay;

import kr.co.lgcns.module.lite.CnsPayWebConnector4NS;

@Controller
@RequestMapping("/mobile")
public class PaymentController extends AbstractController {

	// --- Variables names ( to be used in JSP with Expression Language )
	private static final String MAIN_ENTITY_NAME = "main";

	// --- JSP pages names ( View name in the MVC model )

	private static final String JSP_PAYMENT = "mobile/payment";
	private static final String JSP_POLICY = "mobile/policy";
	private static final String JSP_CHARGE = "mobile/charge";
	private static final String JSP_RESULT = "mobile/payment/result";
	private static final String JSP_NOTI = "mobile/payment/noti";
	private static final String JSP_NEXT = "mobile/payment/next";

	private static final String JSP_TEST = "mobile/payment/test";
	private static final String JSP_RESULT_TEST = "mobile/payment/result/test";

	private static final String MID = "aimmedcom2"; 
	//private static final String MID = "INIpayTest"; // test MID
	
	private static final short PAYMENT_FINISH = 1;
	private static final short PAYMENT_IN_PROGRESS = 0;
	private static final short PAYMENT_NEED_MONEY_TRANSFER = 2;

	private static final String TOKEN_TEST = "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ7XCJpZFwiOjM3MixcImZ1bGxuYW1lXCI6bnVsbCxcImVtYWlsXCI6bnVsbCxcInJvbGVcIjpcIjFcIixcImF2YXRhclwiOm51bGwsXCJjYXRlZ29yeVwiOm51bGwsXCJsYXN0TG9naW5cIjpudWxsLFwiZXhwaXJhdGlvblwiOjE0OTQ0ODQyNTE2MjJ9In0.QUVwrVO84GWsBdLX4e05SNUL8lalCZVICllEFVJPg7s";
	
	// Resource
	@Resource
	private PaymentHistoryService paymentHistoryService;

	@Resource
	private UserService userService;
	
	@Resource
	private BankForPaymentService bankForPaymentService;
	
	@Resource
	private PolicyService policyService;

	// --------------------------------------------------------------------------------------
	/**
	 * Default constructor
	 */
	public PaymentController() {
		super(PaymentController.class, MAIN_ENTITY_NAME);
		log("UserController created.");
	}

	@RequestMapping(value = "/charge", method = RequestMethod.GET)
	public String charge(
			@RequestHeader(value = "token",required=true, defaultValue = TOKEN_TEST) String token, HttpSession session,
			Model model) throws Exception {
		log("Action 'create'");
		model.addAttribute("mid", MID);
		try {
			// 인증
			UserItem u = AuthorizationToken.convertToObject(token);
			User user = userService.findById(u.getId());
			model.addAttribute("coin", user.getCoin());
			model.addAttribute("title", "결제 금액");
			model.addAttribute("userId", u.getId());
			model.addAttribute("fullname", user.getFullname());
			model.addAttribute("url_base", ConstantUtils.getConfig("domain"));

		} catch (Exception e) {
			e.printStackTrace();
		}

		return JSP_CHARGE;
	}

	@RequestMapping(value = "/charge", method = RequestMethod.POST)
	public String charge_post(@RequestParam(value = "userId", defaultValue = "") Integer userId,
			@RequestParam(value = "money", defaultValue = "") Integer money,
			@RequestParam(value = "other_money", defaultValue = "0") Integer other_money, HttpSession session,
			Model model) throws Exception {

		log("Action 'create'");
		model.addAttribute("userId", userId);
		if (money == 0) {
			if (other_money > 0) {
				model.addAttribute("money", other_money);
			} else {
				return JSP_CHARGE;
			}
		} else {
			model.addAttribute("money", money);
		}

		try {
			System.out.println("Create order success");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return "redirect:/" + JSP_PAYMENT;
	}

	@RequestMapping(value = "/payment")
	public String popup(@RequestParam(value = "userId", defaultValue = "") Integer userId,
			@RequestParam(value = "money", defaultValue = "") Integer money, 
			@RequestParam(value = "osName", defaultValue = "") String osName, 
			HttpSession session, HttpServletRequest request , Model model)
					throws Exception {
		try {
			
			User u = userService.findById(userId);
			model.addAttribute("url_base", ConstantUtils.getConfig("domain") + "/");
			model.addAttribute("userId", userId);
			model.addAttribute("money", money);
			
			HashMap<String, Object> inicis = new HashMap<String, Object>();
			inicis.put("mid", MID);
			inicis.put("P_UNAME", u.getFullname());
			inicis.put("P_AMT", money);
			inicis.put("P_MOBILE", u.getPhone());
			inicis.put("P_EMAIL", u.getUsername());
			model.addAttribute("inicis", inicis);
			
			String EdiDate = KakaoPay.getyyyyMMddHHmmss(); 
			//결제요청용 키값
			String md_src = EdiDate + KakaoPay.MID + money;
			String hash_String  = KakaoPay.SHA256Salt(md_src, KakaoPay.encodeKey);
			
			HashMap<String, Object> kakaoPay = new HashMap<String, Object>();
			kakaoPay.put("Amt", money);
			kakaoPay.put("EdiDate", EdiDate);
			kakaoPay.put("EncryptData", hash_String);
			kakaoPay.put("msgName", KakaoPay.msgName);
			kakaoPay.put("webPath", KakaoPay.webPath);
			kakaoPay.put("MID", KakaoPay.MID);
			kakaoPay.put("BuyerEmail", u.getUsername());
			kakaoPay.put("BuyerName", u.getFullname());
			kakaoPay.put("merchantEncKey", KakaoPay.merchantEncKey);
			kakaoPay.put("merchantHashKey", KakaoPay.merchantHashKey);
			kakaoPay.put("requestDealApproveUrl", KakaoPay.webPath + KakaoPay.msgName);
			kakaoPay.put("merchantHashKey", KakaoPay.merchantHashKey);
			kakaoPay.put("prType", KakaoPay.TYPE_MOBILE);
			kakaoPay.put("channelType", KakaoPay.CHANEL_MOBILE);
			SimpleDateFormat format = new SimpleDateFormat("yyyyMMdd");
			kakaoPay.put("OrderBirthDay", format.format(u.getDayOfBirth()));
			
			model.addAttribute("kakaoPay", kakaoPay);
			
		} catch (Exception e) {
			e.printStackTrace();
		}

		return JSP_PAYMENT;
	}

	
	@RequestMapping(value = "/policy", method = RequestMethod.GET)
	public String policy(
			Model model) throws Exception {
		log("Action 'create'");
		model.addAttribute("mid", MID);
		try {
			Policy policy = policyService.getPoli((short)1, (short)1);
			model.addAttribute("p", policy);
		} catch (Exception e) {
			e.printStackTrace();
		}

		return JSP_POLICY;
	}
	
	@RequestMapping(value = "/payment/next_card")
	public String paymentNextCard(HttpSession session, HttpServletRequest request, Model model) throws Exception {
		log("Action 'payment Next card'");

		boolean success = false;
		int state = PAYMENT_IN_PROGRESS;

		request.setCharacterEncoding("euc-kr");
		Enumeration<String> paramNames = request.getParameterNames();

		if (paramNames != null) {
			log(" Request body:  ");
			while (paramNames.hasMoreElements()) {
				String paramName = paramNames.nextElement();
				String value = request.getParameter(paramName);
				log("  [ " + paramName + ": " + value + " ]");
			}
		}

		String P_STATUS = request.getParameter("P_STATUS");
		String P_RMESG1 = request.getParameter("P_RMESG1");
		String P_TID = request.getParameter("P_TID");
		String P_REQ_URL = request.getParameter("P_REQ_URL");
		String P_NOTI = request.getParameter("P_NOTI");
		String[] P_NOTI_S = P_NOTI.split("\\|");
		int P_OID = Integer.parseInt(P_NOTI_S[0]);
		String message = P_RMESG1;
		// log("P_NOTI:"+P_NOTI);
		// log("P_OID:"+P_OID);
		// log("phone:"+phone);
		try {
			if (P_STATUS.equals("00")) // success
			{
				P_REQ_URL = P_REQ_URL + "?P_TID=" + P_TID + "&P_MID=" + MID;
				HashMap<String, String> map = requestApproval(P_REQ_URL);
				if (map != null && map.size() > 0) {
					P_STATUS = map.get("P_STATUS");
					if (P_STATUS.equals("00")) {
						P_OID = Integer.parseInt(map.get("P_OID"));
						P_TID = map.get("P_TID");
						String P_UNAME = map.get("P_UNAME");
						success = paymentSuccessProcess(P_OID, P_TID);
						if (!success) {
							log("need cancel payment, tid: " + P_TID);
							System.out.println("need cancel payment, tid: " + P_TID);
						} else {
							state = PAYMENT_FINISH;
						}
					} else {
						message = map.get("P_RMESG1");
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		if (!success) {
			paymentHistoryService.delete(P_OID);
		}
		model.addAttribute("P_STATUS", P_STATUS);
		model.addAttribute("success", success);
		model.addAttribute("state", state);
		model.addAttribute("message", message);

		return JSP_RESULT;
	}

	private HashMap<String, String> requestApproval(String reqUrl) {
		log("requestApproval");
		HttpClient client = new HttpClient();
		GetMethod method = new GetMethod(reqUrl);
		method.getParams().setParameter(HttpMethodParams.RETRY_HANDLER, new DefaultHttpMethodRetryHandler(3, false));
		HashMap<String, String> map = new HashMap<String, String>();

		try {
			int statusCode = client.executeMethod(method);

			if (statusCode != HttpStatus.SC_OK) {
				log("Method failed: " + method.getStatusLine());
			} else {
				// Read the response body.
				byte[] responseBody = method.getResponseBody(); // 승인결과 파싱
				String[] values = new String(responseBody, "EUC-KR").split("&");

				for (int x = 0; x < values.length; x++) {
					log(values[x]); // 승인결과 출력

					// 승인결과를 파싱값 잘라 hashmap에 저장
					int i = values[x].indexOf("=");
					String key1 = values[x].substring(0, i).trim();
					String value1 = values[x].substring(i + 1).trim();

					map.put(key1, value1);
				}
			}
		} catch (HttpException e) {
			log("Fatal protocol violation: " + e.getMessage());
			e.printStackTrace();
		} catch (IOException e) {
			log("Fatal transport error: " + e.getMessage());
			e.printStackTrace();
		} finally {
			// Release the connection.
			method.releaseConnection();
		}
		return map;
	}

	private boolean paymentSuccessProcess(Integer order_id, String tid) {
		log(">>>paymentSuccessProcess");
		boolean success = false;

		try {
			PaymentHistory payment = paymentHistoryService.findById(order_id);
			if (payment.getStatus() != PAYMENT_FINISH) {
				log(">>>paymentInfo:order_id="+order_id+" | tid="+tid);
				User u = userService.findById(payment.getUserId());
				Integer[] userCoin = userService.updateCoin(u,payment.getCoin());
				payment.setStatus(ApplicationDefine.Recharge_Status.PaymentSuccess.getCode());
				payment.setTid(tid);
				payment.setCurrentCoin(userCoin[1]);
				payment = paymentHistoryService.update(payment);
				double coin = payment.getCoin() * 0.05;
				coin = coin - coin%300;
				int heart = (int) Math.round(coin/300);
				
				userService.updateHeartByUserId(payment.getUserId(), heart, ApplicationDefine.Payment_TypePaymentStatus.Recharge.getCode(), ApplicationDefine.RechargeHeart_Status.HelloCharge.getCode(),"");
				success = true;
			}
		} catch (Exception e) {
			log("paymentSuccessProcess Fail");
			e.printStackTrace();
			return success;
		}

		return success;
	}

	@RequestMapping(value = "/payment/return_bank")
	public String paymentReturnBank(@RequestParam(value = "P_OID", defaultValue = "") Integer P_OID,
			HttpSession session, HttpServletRequest request, Model model) throws Exception {
		log("Action 'payment return bank'");
		PaymentHistory payment = paymentHistoryService.findById(P_OID);
		boolean success = false;
		int state = PAYMENT_IN_PROGRESS;
		if (payment != null) {
			state = payment.getStatus();
			if (state == PAYMENT_FINISH) {
				success = true;
			} else {
				paymentHistoryService.delete(P_OID);
			}
		}

		System.out.println("success:" + success);
		System.out.println("state:" + state);
		model.addAttribute("success", success);
		model.addAttribute("state", state);

		return JSP_RESULT;
	}

	@RequestMapping(value = "/payment/noti_bank")
	public String paymentNotiBank(HttpSession session, HttpServletRequest request, Model model) throws Exception {
		log("Action 'payment noti bank'");
		request.setCharacterEncoding("euc-kr");

		String P_STATUS = request.getParameter("P_STATUS");
		String P_TID = request.getParameter("P_TID");
		// int P_OID = Integer.parseInt(request.getParameter("P_OID"));
		String P_TYPE = request.getParameter("P_TYPE");

		String P_NOTI = request.getParameter("P_NOTI");
		String[] P_NOTI_S = P_NOTI.split("\\|");
		int P_OID = Integer.parseInt(P_NOTI_S[0]);
		String phone = P_NOTI_S[1];

		String result = "OK";
		PaymentHistory payment = paymentHistoryService.getBy_Tid(P_TID);

		if (payment == null) {
			if ((P_TYPE.equals("BANK") && P_STATUS.equals("00")) || (P_TYPE.equals("VBANK") && P_STATUS.equals("02"))) {
				String P_UNAME = request.getParameter("P_UNAME");
				boolean success = paymentSuccessProcess(P_OID, P_TID);
				if (!success) {
					result = "FAIL";
					log("need cancel payment, tid: " + P_TID);
					System.out.println("need cancel payment, tid: " + P_TID);
				}
			} else if (P_TYPE.equals("VBANK") && !P_STATUS.equals("02")) {
				log("ignore account info noti, tid: " + P_TID);
				System.out.println("ignore account info noti, tid: " + P_TID);
			} else {
				paymentHistoryService.delete(P_OID);
			}
		}

		model.addAttribute("result", result);

		return JSP_NOTI;
	}

	@RequestMapping(value = "/next_vbank")
	public String paymentNextVBank(HttpSession session, HttpServletRequest request, Model model) throws Exception {
		log("Action 'payment Next vbank'");

		boolean success = false;
		int state = PAYMENT_IN_PROGRESS;

		request.setCharacterEncoding("euc-kr");

		String P_STATUS = request.getParameter("P_STATUS");
		String P_RMESG1 = request.getParameter("P_RMESG1");
		String P_TID = request.getParameter("P_TID");
		String P_REQ_URL = request.getParameter("P_REQ_URL");
		String P_NOTI = request.getParameter("P_NOTI");
		String[] P_NOTI_S = P_NOTI.split("\\|");
		int P_OID = Integer.parseInt(P_NOTI_S[0]);

		String message = P_RMESG1;

		try {
			if (P_STATUS.equals("00")) // success
			{
				P_REQ_URL = P_REQ_URL + "?P_TID=" + P_TID + "&P_MID=" + MID;
				HashMap<String, String> map = requestApproval(P_REQ_URL);
				if (map != null && map.size() > 0) {
					P_STATUS = map.get("P_STATUS");
					if (P_STATUS.equals("00")) {
						P_OID = Integer.parseInt(map.get("P_OID"));
						P_TID = map.get("P_TID");
						PaymentHistory purchase = paymentHistoryService.findById(P_OID);

						if (purchase != null) {
							state = purchase.getStatus();
							if (state != PAYMENT_FINISH) {
								String P_VACT_NUM = map.get("P_VACT_NUM");
								String P_VACT_DATE = map.get("P_VACT_DATE");
								String P_VACT_TIME = map.get("P_VACT_TIME");
								String P_VACT_NAME = map.get("P_VACT_NAME");
								String P_VACT_BANK_CODE = map.get("P_VACT_BANK_CODE");

								purchase.setStatus(PAYMENT_NEED_MONEY_TRANSFER);
								purchase.setAccountInfo(P_VACT_NUM + "|" + P_VACT_DATE + "|" + P_VACT_TIME + "|"
										+ P_VACT_NAME + "|" + P_VACT_BANK_CODE + "|" + P_TID);
								purchase = paymentHistoryService.update(purchase);
								Integer heart = (int) Math.round(purchase.getCoin() * 0.05);
								userService.updateHeartByUserId(purchase.getUserId(), heart, ApplicationDefine.Payment_TypePaymentStatus.Recharge.getCode(), ApplicationDefine.RechargeHeart_Status.HelloCharge.getCode(),"");
								state = purchase.getStatus();
								model.addAttribute("P_VACT_NUM", P_VACT_NUM);
								model.addAttribute("P_VACT_DATE", P_VACT_DATE);
								model.addAttribute("P_VACT_TIME", P_VACT_TIME);
								model.addAttribute("P_VACT_NAME", P_VACT_NAME);
								model.addAttribute("P_VACT_BANK_CODE", P_VACT_BANK_CODE);
								String bankName = P_VACT_BANK_CODE;
								BankForPayment bank = bankForPaymentService.findByBankCode(P_VACT_BANK_CODE);
								if (bank != null) {
									bankName = bank.getBankName();
								}
								model.addAttribute("BANK_NAME", bankName);

								success = true;
							} else {
								log("need cancel payment, tid: " + P_TID);
								System.out.println("need cancel payment, tid: " + P_TID);
							}
						}
					} else {
						message = map.get("P_RMESG1");
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		if (!success) {
			paymentHistoryService.delete(P_OID);
		}
		System.out.println("success:" + success);
		System.out.println("state:" + state);

		model.addAttribute("P_STATUS", P_STATUS);
		model.addAttribute("success", success);
		model.addAttribute("state", state);
		model.addAttribute("message", message);

		return JSP_NEXT;
	}
	
	@RequestMapping(value = "/payment/kakaopay/result")
	public String kakaoPayResult(HttpSession session, HttpServletRequest request, Model model) throws Exception {
		log("Action 'kakaoPayResult'");

		//request.setCharacterEncoding("euc-kr");
		// 모듈이 설치되어 있는 경로 설정
	    CnsPayWebConnector4NS connector = new CnsPayWebConnector4NS();

	    // 환경설정 및 로그 디렉토리 생성(incKakaopayCommon.jsp에서 설정한 값 사용)
	    connector.setLogHome(KakaoPay.logHome);
	    connector.setCnsPayHome(KakaoPay.cnsPayHome);

	    // 요청 페이지 파라메터 셋팅
	    connector.setRequestData(request);

	    // 추가 파라메터 셋팅
	    connector.addRequestData("actionType", "PY0");              // actionType : CL0 취소, PY0 승인
	    connector.addRequestData("MallIP", request.getRemoteAddr());// 가맹점 고유 ip

	    //가맹점키 셋팅 (MID 별로 틀림)

	    connector.addRequestData("EncodeKey", KakaoPay.encodeKey);

	    // CNSPAY Lite 서버 접속하여 처리
	    connector.requestAction();
	    
	    // 결과 처리
	    String resultCode = connector.getResultData("ResultCode");      // 결과코드 (정상 :3001 , 그 외 에러)
	    String resultMsg = connector.getResultData("ResultMsg");        // 결과메시지
	    String tid = connector.getResultData("TID");                    // 거래ID
	    String moid = connector.getResultData("Moid");                  // 주문번호
	    String payMethod = connector.getResultData("PayMethod");        // 결제수단
	    
//	    String authDate = connector.getResultData("AuthDate");          // 승인일시 YYMMDDHH24mmss
//	    String authCode = connector.getResultData("AuthCode");          // 승인번호
//	    String buyerName = connector.getResultData("BuyerName");        // 구매자명
//	    String goodsName = connector.getResultData("GoodsName");        // 상품명
//	    String mid = connector.getResultData("MID");                    // 가맹점ID
//	    String amt = connector.getResultData("Amt");                    // 금액
//	    String cardCode = connector.getResultData("CardCode");          // 카드사 코드
//	    String cardName = connector.getResultData("CardName");          // 결제카드사명
//	    String cardQuota = connector.getResultData("CardQuota");        // 할부개월수 ex) 00:일시불,02:2개월
//	    String cardInterest = connector.getResultData("CardInterest");  // 무이자 여부 (0:일반, 1:무이자)
//	    String cardCl = connector.getResultData("CardCl");              // 체크카드여부 (0:일반, 1:체크카드)
//	    String cardBin = connector.getResultData("CardBin");            // 카드BIN번호
//	    String cardPoint = connector.getResultData("CardPoint");        // 카드사포인트사용여부 (0:미사용, 1:포인트사용, 2:세이브포인트사용)
//	    
//	    //부인방지토큰값
//	    String nonRepToken = request.getParameter("NON_REP_TOKEN");
	    
	    boolean success = false;
		int state = PAYMENT_IN_PROGRESS;
	    String message = resultMsg;
	    int orderId = Integer.parseInt(moid);
	    
	    /** 위의 응답 데이터 외에도 전문 Header와 개별부 데이터 Get 가능 */
	    if(payMethod.equals("CARD")){                                   //신용카드
	        if(resultCode.equals("3001")){ // 결과코드 (정상 :3001 , 그 외 에러)
	        	success = paymentSuccessProcess(orderId, tid);
				if (!success) {
					log("need cancel payment, tid: " + tid);
					System.out.println("need cancel payment, tid: " + tid);
				} else {
					state = PAYMENT_FINISH;
				}
	        }
	    }

	    if (!success) {
			paymentHistoryService.delete(orderId);
		}
		model.addAttribute("P_STATUS", resultCode);
		model.addAttribute("success", success);
		model.addAttribute("state", state);
		model.addAttribute("message", message);

		return JSP_RESULT;
	}

//	@RequestMapping(value = "/payment/test")
//	public String popup_test(@RequestParam(value = "order_id", defaultValue = "") Integer order_id, HttpSession session,
//			Model model) throws Exception {
//
//		log("Action 'create'");
//
//		model.addAttribute("url_base", ConstantUtils.getConfig("domain"));
//		System.out.println("Create order success");
//
//		return JSP_TEST;
//	}
//
//	@RequestMapping(value = "/payment/result/test")
//	public String result_test(@RequestParam(value = "order_id", defaultValue = "") Integer order_id,
//			HttpSession session, Model model) throws Exception {
//
//		log("Action 'create'");
//
//		model.addAttribute("url_base", ConstantUtils.getConfig("domain"));
//		System.out.println("Create order success");
//
//		return JSP_RESULT_TEST;
//	}
//
//	@RequestMapping(value = "/result")
//	public String result(@RequestParam(value = "order_id", defaultValue = "") Integer order_id, HttpSession session,
//			HttpServletRequest request, Model model) throws Exception {
//		log("Action 'create'");
//		String addr = request.getRemoteAddr().toString();
//		System.out.println("order_id:" + order_id);
//		// 이니시스에서 받은 value
//		String P_TID = request.getParameter("P_TID") + "";
//		String P_MID = request.getParameter("P_MID") + "";
//		String P_AUTH_DT = request.getParameter("P_AUTH_DT") + "";
//		String P_STATUS = request.getParameter("P_STATUS") + "";
//		String P_TYPE = request.getParameter("P_TYPE") + "";
//		String P_OID = request.getParameter("P_OID") + "";
//		String P_FN_CD1 = request.getParameter("P_FN_CD1") + "";
//		String P_FN_CD2 = request.getParameter("P_FN_CD2") + "";
//		String P_FN_NM = request.getParameter("P_FN_NM") + "";
//		String P_UNAME = request.getParameter("P_UNAME") + "";
//		String P_AMT = request.getParameter("P_AMT") + "";
//		String P_RMESG1 = request.getParameter("P_RMESG1") + "";
//		String P_RMESG2 = request.getParameter("P_RMESG2") + "";
//		String P_NOTI = request.getParameter("P_NOTI") + "";
//		String P_AUTH_NO = request.getParameter("P_AUTH_NO") + "";
//		System.out.println("P_OID:" + P_OID);
//		System.out.println("P_STATUS:" + P_STATUS);
//		model.addAttribute("P_STATUS", P_STATUS);
//		model.addAttribute("success", 0);
//		/***********************************************************************************
//		 * 결제처리에 관한 로그 기록 위에서 상점 데이터베이스에 등록 성공유무에 따라서 성공시에는 "OK"를 이니시스로 실패시는
//		 * "FAIL" 을 리턴하셔야합니다. 아래 조건에 데이터베이스 성공시 받는 FLAG 변수를 넣으세요 (주의) OK를 리턴하지
//		 * 않으시면 이니시스 지불 서버는 "OK"를 수신할때까지 계속 재전송을 시도합니다 기타 다른 형태의
//		 * out.println(response.write)는 하지 않으시기 바랍니다
//		 ***********************************************************************************/
//		try {
//			if (P_STATUS.equals("00")) // 입금통보 "02" 가 아니면(가상계좌 채번 : 00 또는 01
//			{
//				model.addAttribute("success", 1);
//
//			} else {
//				paymentHistoryService.delete(order_id);
//				model.addAttribute("success", 0);
//			}
//		} catch (Exception e) {
//			e.printStackTrace();
//		}
//
//		return JSP_RESULT;
//	}
//
//	@RequestMapping(value = "/test")
//	public String test(@RequestParam(value = "order_id", defaultValue = "") Integer order_id, HttpSession session,
//			Model model) throws Exception {
//		log("Action 'create'");
//		String mid = "testoid"; // 가맹점 ID(가맹점 수정후 고정)
//		try {
//			// 인증
//			PaymentHistory p = paymentHistoryService.findById(order_id);
//
//			model.addAttribute("order_id", order_id);
//
//			model.addAttribute("store_name", "whelearn");
//			model.addAttribute("mid", mid);
//			model.addAttribute("product_name", "whelearn");
//
//			System.out.println("Create order success");
//		} catch (Exception e) {
//			e.printStackTrace();
//		}
//
//		return JSP_TEST;
//	}
//
//	@RequestMapping(value = "/result/test")
//	public String test(HttpSession session, HttpServletRequest request, Model model) throws Exception {
//		log("Action 'create'");
//
//		return JSP_RESULT_TEST;
//	}
}
