/*
 * Created on 12 May 2017 ( Time 10:13:21 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.web.controller.admin;

import java.text.ParseException;
import java.util.Date;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
//--- Entities
import org.trams.hello.bean.Notice;
import org.trams.hello.bean.PageCustom;
import org.trams.hello.bean.User;
import org.trams.hello.bean.UserItem;
import org.trams.hello.bean.jpa.NoticeEntity;
import org.trams.hello.business.service.BusinessService;
//--- Services 
import org.trams.hello.business.service.NoticeService;
import org.trams.hello.business.service.UserService;
import org.trams.hello.business.service.mapping.NoticeServiceMapper;
//--- Common classes
import org.trams.hello.web.common.AbstractController;
import org.trams.hello.web.common.Login;
import org.trams.hello.web.common.Pager;

/**
 * Spring MVC controller for 'Notice' management.
 */
@Controller
@RequestMapping("/admin/cs/notice")
public class NoticeAdminController extends AbstractController {

	//--- Variables names ( to be used in JSP with Expression Language )
	private static final String MAIN_ENTITY_NAME = "notice";
	private static final String MAIN_LIST_NAME = "list";

	private static final Integer PAGE_SIZE   = 30;

	private static String nav = "notice";

	//--- JSP pages names ( View name in the MVC model )
	private static final String JSP_CREATE   = "admin/cs/notice/create";
	private static final String JSP_LIST   = "admin/cs/notice/list";
	private static final String JSP_EDIT   = "admin/cs/notice/edit";
	private static final String JSP_DETAIL   = "admin/cs/notice/detail";
	private static final String JSP_SMART_EDITOR   = "smart_editor_layout";

	//--- Main entity service
	@Resource
    private NoticeService noticeService; // Injected by Spring
	//--- Other service(s)
	@Resource
    private BusinessService businessService; // Injected by Spring
	
	@Resource
    private NoticeServiceMapper noticeServiceMapper; // Injected by Spring
	@Resource
    private UserService userService; // Injected by Spring

	//--------------------------------------------------------------------------------------
	/**
	 * Default constructor
	 */
	public NoticeAdminController() {
		super(NoticeAdminController.class, MAIN_ENTITY_NAME );
		log("NoticeAdminController created.");
	}

	@RequestMapping("/list")
	public String list(
			@RequestParam(value="page",defaultValue="1") Integer page,
			@RequestParam(value="type_search",defaultValue="title") String type_search,
			@RequestParam(value="start_search",defaultValue="") String start_search,
			@RequestParam(value="end_search",defaultValue="") String end_search,
			@RequestParam(value="type",defaultValue="1") Integer type,
			@RequestParam(value="keyword",defaultValue="") String key,
			HttpSession session,
			HttpServletRequest request,
			Model model) throws ParseException {
		if(key == null){
			key="";
		}
		
		PageCustom<NoticeEntity> listPage = noticeService.listPagingByUser(start_search, end_search, type_search, type, key, page, PAGE_SIZE);
		System.out.println("list, sixe:" + listPage.getList().size());
		model.addAttribute(MAIN_LIST_NAME, listPage);	
		model.addAttribute("type_search", type_search);
		model.addAttribute("list", listPage.getList());
		model.addAttribute("keyword", key);
		model.addAttribute("page", page);
		model.addAttribute("start_search", start_search);
		model.addAttribute("end_search", end_search);
		model.addAttribute("type", type);
		model.addAttribute("activePage", nav);
		model.addAttribute("totalCount", listPage.getTotalCount());
		model.addAttribute("pagination_navigator", "/admin/cs/notice/list");
		new Pager<NoticeEntity>(listPage).setManualSetting(model, request);
		return JSP_LIST;
	}

	
	@RequestMapping(value="/type/{type}/detail/{id}", method = RequestMethod.GET)
	public String detail(Model model, HttpSession session, @PathVariable("id") Integer id, @PathVariable(value="type") Integer type) {
		NoticeEntity notice = noticeService.findByIdEntity(id);
		model.addAttribute("notice", notice);
		model.addAttribute("type", type);
		model.addAttribute("osType", notice.getOsType());
		return JSP_DETAIL;
	}
	
	@RequestMapping("/smartEditor")
	public String smartEditor(HttpSession session) {
		return JSP_SMART_EDITOR;
	}

	@RequestMapping(value = "/type/{type}/create", method = RequestMethod.GET)
	public String create(@PathVariable("type") Integer type, HttpSession session, Model model) {
		log("Action 'create'");
		Integer endElementInListId = noticeService.getEndElementInListId();
		UserItem userItem = Login.getAdminLogin(session);
		User u = userService.findById(userItem.getId());
		model.addAttribute("activePage", nav);
		model.addAttribute("type", type);
		model.addAttribute("admin", u);
		model.addAttribute("endElementInListId", endElementInListId);
		return JSP_CREATE;
	}

	@RequestMapping(value = "/edit/{id}", method = RequestMethod.GET)
	public String update(HttpSession session, @PathVariable("id") Integer id, Model model) {
		Notice notice = noticeService.findById(id);
		try {
			model.addAttribute("item", notice);
			model.addAttribute("activePage", nav);
			return JSP_EDIT;
		} catch (Exception e) {
			return JSP_LIST;
		}
	}

	@RequestMapping(value = "/edit/{id}", method = RequestMethod.POST)
	public String update(@RequestParam(value = "edit", defaultValue = "0") Integer edit, @ModelAttribute Notice item,
			HttpSession session, @PathVariable("id") Integer id, Model model) {
		Notice notice = noticeService.findById(id);
		try {
			notice.setTitle(item.getTitle());
			notice.setContent(item.getContent());
			notice.setBusinessType(item.getBusinessType());
			notice.setOsType(item.getOsType());
			notice.setViewNumber(item.getViewNumber());
			notice.setIsShow(item.getIsShow());
			notice.setType(item.getType());
			notice.setUpdateDate(new Date());
			notice = noticeService.update(notice);
			model.addAttribute("item", notice);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return "redirect:/" + JSP_EDIT + "/" + id;
	}

	@RequestMapping(value = "/delete/{id}")
	public String delete(Model model, HttpSession session, @PathVariable("id") Integer id) {

		noticeService.delete(id);
		return "redirect:/" + JSP_LIST;
	}

}
