/*
 * Created on 12 May 2017 ( Time 10:13:21 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.web.controller.company;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.trams.hello.bean.BusinessSub;
import org.trams.hello.bean.PageCustom;
import org.trams.hello.bean.PromotionPage;
import org.trams.hello.bean.PromotionPageLink;
import org.trams.hello.bean.UserItem;
import org.trams.hello.bean.jpa.PromotionPageEntity;
import org.trams.hello.bean.jpa.PromotionPageLinkEntity;
import org.trams.hello.bean.web.company.MemberInfo;
import org.trams.hello.bean.web.company.VoucherFormBusiness;
import org.trams.hello.bean.web.company.VoucherFormBusinessData;
import org.trams.hello.bean.web.company.VoucherInfo;
import org.trams.hello.bean.web.company.VoucherMemberFormBusiness;
import org.trams.hello.bean.web.company.VoucherMemberFormBusinessData;
import org.trams.hello.business.service.BusinessService;
import org.trams.hello.business.service.BusinessSubService;
import org.trams.hello.business.service.PromotionPageLinkService;
import org.trams.hello.business.service.PromotionPageService;
import org.trams.hello.business.service.UserService;
import org.trams.hello.business.service.VoucherService;
import org.trams.hello.business.service.VoucherUserService;
import org.trams.hello.web.common.Login;
import org.trams.hello.web.common.utils.FileUtils;

/**
 * Spring MVC controller for 'Faq' management.
 */
@Controller
@RequestMapping("/company/auth")
public class CompanyAdminController extends BaseController {
	@Resource
    private BusinessSubService businessSubService;
	@Resource
    private BusinessService businessService;
	@Resource
    private UserService userService;
	@Resource
    private VoucherUserService voucherUserService;
	@Resource
    private VoucherService voucherService;
	
	private static String nav = "business";
	@Resource
	private PromotionPageService promotionPageService;
	@Resource
	ServletContext servletContext;
	@Resource
	private PromotionPageLinkService promotionPageLinkService;
	
	@RequestMapping(value = "/home", method = RequestMethod.GET)
	public String index(@RequestParam Map<String, Object> params, HttpSession session, ModelMap map) {
		SimpleDateFormat sf = new SimpleDateFormat("yyyy-MM-dd");
		SimpleDateFormat formatter = new SimpleDateFormat("MM/dd");
		UserItem business = Login.getCompanyLogin(session);
		List<String> listDateBeforeSevenDays = new ArrayList<>();
		List<Integer> totalVouchers = new ArrayList<>();
		List<Integer> totalVouchersMember = new ArrayList<>();
		Integer totalMemberByBusinessId = userService.totalMemberByBusinessId(business.getId());
		
		Calendar currentDate = Calendar.getInstance();
		currentDate.add(Calendar.DATE, -1);
		
		Calendar cal = Calendar.getInstance();
		cal.add(Calendar.DATE, -1);
		cal.add(Calendar.DATE, -7);
		
		for (int j = -6; j <= 0; j++) {
			Calendar cal2 = Calendar.getInstance();
			cal2.add(Calendar.DATE, -1);
			cal2.add(Calendar.DATE, j);
			listDateBeforeSevenDays.add(formatter.format(cal2.getTime()));
			String dateConvert = sf.format(cal2.getTime());
			totalVouchers.add(voucherUserService.totalVouchersByCreateDateAndBusinessId(business.getId(), dateConvert));
			totalVouchersMember.add(voucherUserService.totalVoucherMembersByCreateDateAndBusinessId(business.getId(), dateConvert));
		}
		
		map.addAttribute("listDateBeforeSevenDays", listDateBeforeSevenDays);
		map.addAttribute("totalVouchers", totalVouchers);
		map.addAttribute("totalVouchersMember", totalVouchersMember);
		map.addAttribute("currentDate", sf.format(currentDate.getTime()));
		map.addAttribute("totalMemberByBusinessId", totalMemberByBusinessId);
		return getView();
	}
	
	@RequestMapping(value = "/business", method = RequestMethod.GET)
	public String business(@RequestParam Map<String, Object> params, HttpSession session, ModelMap map) {
		try {
			UserItem business = Login.getCompanyLogin(session);
			List<PromotionPageEntity> list = promotionPageService.getPromotionPageByBussinessId(business.getId());
			if(list.size() > 0){
				map.addAttribute("item", list.get(0));
				List<PromotionPageLinkEntity> list_link = promotionPageLinkService.findByPromotionPageId(list.get(0).getId());
				map.addAttribute("list_link", list_link);
			}
			map.addAttribute("activePage", nav);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return getView();
	}
	
	

	@RequestMapping(value = "/business", method = RequestMethod.POST)
	public String promotion_post(HttpSession session, 
			@RequestParam(value = "logoFile") MultipartFile logoFile,
			@RequestParam(value = "backgroundFile") MultipartFile backgroundFile,
			@RequestParam(value = "decription", defaultValue = "") String decription,
			@RequestParam(value = "link", defaultValue = "") String[] link,
			@RequestParam(value = "title", defaultValue = "") String[] title,
			@RequestParam(value = "idPromotionPage", defaultValue = "0") Integer idPromotionPage,
			Model model) {
		try {
			UserItem business = Login.getCompanyLogin(session);
			if(idPromotionPage > 0){
				PromotionPage item = promotionPageService.findById(idPromotionPage);
				try {
					if (backgroundFile.getSize() > 0) {
						item.setBackgroundUrl(FileUtils.saveFileOrigin(backgroundFile, servletContext));
						item.setBackgroundName(backgroundFile.getOriginalFilename());
					}
					if (logoFile.getSize() > 0) {
						item.setLogoUrl(FileUtils.saveFileOrigin(logoFile, servletContext));
						item.setLogoName(logoFile.getOriginalFilename());
					}
				} catch (Exception e) {
					// TODO: handle exception
				}
				
				item.setIsShow(1);
				promotionPageService.update(item);
			}else{
				PromotionPage item = new PromotionPage();
				try {
					if (backgroundFile.getSize() > 0) {
						item.setBackgroundUrl(FileUtils.saveFileOrigin(backgroundFile, servletContext));
						item.setBackgroundName(backgroundFile.getOriginalFilename());
					}
					if (logoFile.getSize() > 0) {
						item.setLogoUrl(FileUtils.saveFileOrigin(logoFile, servletContext));
						item.setLogoName(logoFile.getOriginalFilename());
					}
				} catch (Exception e) {
					// TODO: handle exception
				}
				
				item.setStatus((short)1);
				item.setBusinessId(business.getId());
				item.setIsShow(1);
				PromotionPage p =promotionPageService.create(item);
				idPromotionPage = p.getId();
			}
			
			if (link.length > 0) {
				promotionPageLinkService.deleteByPromotionPageId(idPromotionPage);
				for (int j = 0; j < title.length; j++) {
					PromotionPageLink pl = new PromotionPageLink();
					pl.setCreateDate(new Date());
					try {
						if(link[j] == null ){
							pl.setLink("");
						}else{
							pl.setLink(link[j]);
						}
					} catch (Exception e) {
						pl.setLink("");
					}
					if(title[j] == null || title[j].equals("")){
						pl.setTitle("");
					}else{
						pl.setTitle(title[j]);
					}
					pl.setPromotionPageId(idPromotionPage);
					pl.setUpdateDate(new Date());
					promotionPageLinkService.create(pl);
				}
			}
		} catch (Exception e) {
			e.printStackTrace();

		}
		return  "redirect:/company/auth/business";
	}
	
	@RequestMapping(value = "/business/reset", method = RequestMethod.POST)
	public String reset(HttpSession session, 
			Model model) {
		try {
			UserItem business = Login.getCompanyLogin(session);
			promotionPageLinkService.deleteByPromotionPageBy_BusinessId(business.getId());
			promotionPageService.deletePromotionPageBy_BussinessId(business.getId());
			
		} catch (Exception e) {
			e.printStackTrace();

		}
		return "redirect:/company/auth/business";
	}
	
	@RequestMapping(value = "/member", method = RequestMethod.GET)
	public String member(
			@RequestParam(value="page",defaultValue="1") Integer page,
			@RequestParam(value="type_search",defaultValue="name_search") String typeSearch,
			@RequestParam(value="keyword",defaultValue="") String keyword,
			@RequestParam(value="sub_company",defaultValue="0") Integer subCompany,
			@RequestParam(value="year_search",defaultValue="2016") Integer yearSearch,
			@RequestParam(value="rs_order",defaultValue="name_order") String rsOrder,HttpServletRequest request,
			HttpSession session, ModelMap map) {
		try {
			UserItem business = Login.getCompanyLogin(session);
			List<BusinessSub> listBusinessSub = businessSubService.getListBusinessSubByBusinessId(business.getId());
			
			PageCustom<MemberInfo> pageMs = userService.getMembersInfoInCompany(business.getId(), typeSearch, keyword, subCompany, yearSearch, rsOrder, page, 30);
			map.put("totalElement", pageMs.getTotalCount());
        	map.put("endIndex", pageMs.getTotalPages());
    		map.put("list", pageMs.getList());
    		map.put("currentIndex", pageMs.getCurrent());
    		map.put("totalCount",pageMs.getTotalCount());
    		map.put("size",pageMs.getSize());
    		map.put("totalPages",pageMs.getTotalPages());
    		
			map.put("page", page);
			map.put("listBusinessSub", listBusinessSub);
			map.put("yearSearch", yearSearch);
			map.put("typeSearch", typeSearch);
			map.put("keyword", keyword);
			map.put("subCompany", subCompany);
			map.put("rsOrder", rsOrder);
			map.put("pagination_navigator", "/company/auth/member");
			map.put("beginIndex", 1);
			String param_url= request.getQueryString();
			map.put("param_url", param_url);
			
			return getView();
		} catch (Exception e) {
			e.printStackTrace();
			return getView();
		}
	}
	
	@RequestMapping(value = "/statistics/voucher", method = RequestMethod.GET)
	public String voucher(
			@RequestParam(value="page",defaultValue="1") Integer page,
			@RequestParam(value="keyword",defaultValue="") String keyword,
			@RequestParam(value="sub_company",defaultValue="0") Integer subCompany,
			@RequestParam(value="year_search",defaultValue="2016") Integer yearSearch,
			@RequestParam(value="rs_order",defaultValue="name_order") String rsOrder,HttpServletRequest request,
			HttpSession session, ModelMap map) {
		try {
			UserItem business = Login.getCompanyLogin(session);
			List<BusinessSub> listBusinessSub = businessSubService.getListBusinessSubByBusinessId(business.getId());
			
			PageCustom<VoucherInfo> pageMs = voucherUserService.getVoucherInfoInCompany(business.getId(), keyword, subCompany, yearSearch, rsOrder, page, 30);
			map.put("totalElement", pageMs.getTotalCount());
			map.put("StaticsVoucher", pageMs.getObj());
        	map.put("endIndex", pageMs.getTotalPages());
    		map.put("list", pageMs.getList());
    		map.put("currentIndex", pageMs.getCurrent());
    		map.put("totalCount",pageMs.getTotalCount());
    		map.put("size",pageMs.getSize());
    		map.put("totalPages",pageMs.getTotalPages());
    		map.put("businessId",business.getId());
    		
			map.put("page", page);
			map.put("listBusinessSub", listBusinessSub);
			map.put("yearSearch", yearSearch);
			map.put("keyword", keyword);
			map.put("subCompany", subCompany);
			map.put("rsOrder", rsOrder);
			map.put("pagination_navigator", "/company/auth/statistics/voucher");
			map.put("beginIndex", 1);
			String param_url= request.getQueryString();
			map.put("param_url", param_url);
			
			return getView();
		} catch (Exception e) {
			e.printStackTrace();
			return getView();
		}
	}
	
	
	
	@RequestMapping(value = "/statistics/member_voucher", method = RequestMethod.GET)
	public String member_voucher(@RequestParam(value="page",defaultValue="1") Integer page,
			@RequestParam(value="keyword",defaultValue="") String keyword,
			@RequestParam(value="sub_company",defaultValue="0") Integer subCompany,
			@RequestParam(value="year_search",defaultValue="2016") Integer yearSearch,
			@RequestParam(value="rs_order",defaultValue="name_order") String rsOrder,HttpServletRequest request,
			HttpSession session, ModelMap map) {
		try {
			UserItem business = Login.getCompanyLogin(session);
			List<BusinessSub> listBusinessSub = businessSubService.getListBusinessSubByBusinessId(business.getId());
			
			PageCustom<VoucherInfo> pageMs = voucherUserService.getVoucherMemberInfoInCompany(business.getId(), keyword, subCompany, yearSearch, rsOrder, page, 30);
			map.put("totalElement", pageMs.getTotalCount());
			map.put("StaticsVoucher", pageMs.getObj());
        	map.put("endIndex", pageMs.getTotalPages());
    		map.put("list", pageMs.getList());
    		map.put("currentIndex", pageMs.getCurrent());
    		map.put("totalCount",pageMs.getTotalCount());
    		map.put("size",pageMs.getSize());
    		map.put("totalPages",pageMs.getTotalPages());
    		
			map.put("page", page);
			map.put("listBusinessSub", listBusinessSub);
			map.put("yearSearch", yearSearch);
			map.put("keyword", keyword);
			map.put("subCompany", subCompany);
			map.put("rsOrder", rsOrder);
			map.put("pagination_navigator", "/company/auth/statistics/member_voucher");
			map.put("beginIndex", 1);
			String param_url= request.getQueryString();
			map.put("param_url", param_url);
			
			return getView();
		} catch (Exception e) {
			e.printStackTrace();
			return getView();
		}
	}
	
	
	@RequestMapping(value = "/statistics/voucher/export_excel")
	public void exportExcelOrders(HttpServletRequest request, HttpServletResponse response,
			@RequestParam(value="keyword",defaultValue="") String keyword, HttpSession session,
			@RequestParam(value="sub_company",defaultValue="0") Integer subCompany,
			@RequestParam(value="year_search",defaultValue="2016") Integer yearSearch,
			@RequestParam(value="rs_order",defaultValue="name_order") String rsOrder, Model model) throws ParseException {
		UserItem business = Login.getCompanyLogin(session);
		List<VoucherInfo> arr = voucherUserService.getVoucherInfoInCompanyExportExcel(business.getId(), keyword, subCompany, yearSearch, rsOrder);
		processExportVoucherBusiness(request, response, arr);
	}
	
	public void processExportVoucherBusiness(HttpServletRequest request, HttpServletResponse response, List<VoucherInfo> arr) {
		List<VoucherFormBusiness> rows = new VoucherFormBusinessData().getFormData(arr);
		SimpleDateFormat formatter = new SimpleDateFormat("yyyyMMddHHmmss");
		String today = formatter.format(new Date());
		response.setHeader("Content-Disposition", "attachment; filename=\"" + today + ".xls" + "\";");
		response.setHeader("Content-Transfer-Encoding", "binary");
		OutputStream out;
		try {
			out = response.getOutputStream();
			String path = request.getSession().getServletContext().getRealPath("/");
			FileInputStream fileInput = new FileInputStream(path + "excel_template/voucher_template.xls");
			HSSFWorkbook template_workbook = new HSSFWorkbook(fileInput);
			HSSFSheet sheet = template_workbook.getSheetAt(0);
			int columnIndex = 0;
			int rowIndex = 1;

			for (VoucherFormBusiness rowItemsObject : rows) {
				HSSFRow row = sheet.createRow(rowIndex);
				columnIndex = 0;
				String[] rowItems = rowItemsObject.toString().split("\\|");
				for (String rowItem : rowItems) {
					row.createCell(columnIndex).setCellValue(rowItem);
					columnIndex++;
				}
				rowIndex++;
			}
			try {
				template_workbook.write(out);
			} catch (IOException ioe) {
				ioe.printStackTrace();
				System.out.println("order export excel, workbook wirte io exception");
			} finally {
				if (fileInput != null)
					fileInput.close();
				template_workbook.close();
			}
			
		} catch (IOException e) {
			e.printStackTrace();
			System.out.println("order export excel, get output stream io exception");
		}
	}
	
	@RequestMapping(value = "/statistics/member_voucher/export_excel")
	public void exportExcelMemberVoucher(HttpServletRequest request, HttpServletResponse response,
			@RequestParam(value="keyword",defaultValue="") String keyword, HttpSession session,
			@RequestParam(value="sub_company",defaultValue="0") Integer subCompany,
			@RequestParam(value="year_search",defaultValue="2016") Integer yearSearch,
			@RequestParam(value="rs_order",defaultValue="name_order") String rsOrder, Model model) throws ParseException {
		UserItem business = Login.getCompanyLogin(session);
		List<VoucherInfo> arr = voucherUserService.getVoucherMemberInfoInCompanyExportExcel(business.getId(), keyword, subCompany, yearSearch, rsOrder);
		processExportMemberVoucherBusiness(request, response, arr);
	}

	public void processExportMemberVoucherBusiness(HttpServletRequest request, HttpServletResponse response, List<VoucherInfo> arr) {
		List<VoucherMemberFormBusiness> rows = new VoucherMemberFormBusinessData().getFormData(arr);
		SimpleDateFormat formatter = new SimpleDateFormat("yyyyMMddHHmmss");
		String today = formatter.format(new Date());
		response.setHeader("Content-Disposition", "attachment; filename=\"" + today + ".xls" + "\";");
		response.setHeader("Content-Transfer-Encoding", "binary");
		OutputStream out;
		try {
			out = response.getOutputStream();
			String path = request.getSession().getServletContext().getRealPath("/");
			FileInputStream fileInput = new FileInputStream(path + "excel_template/voucher_member_template.xls");
			HSSFWorkbook template_workbook = new HSSFWorkbook(fileInput);
			HSSFSheet sheet = template_workbook.getSheetAt(0);
			int columnIndex = 0;
			int rowIndex = 1;

			for (VoucherMemberFormBusiness rowItemsObject : rows) {
				HSSFRow row = sheet.createRow(rowIndex);
				columnIndex = 0;
				String[] rowItems = rowItemsObject.toString().split("\\|");
				for (String rowItem : rowItems) {
					row.createCell(columnIndex).setCellValue(rowItem);
					columnIndex++;
				}
				rowIndex++;
			}
			try {
				template_workbook.write(out);
			} catch (IOException ioe) {
				ioe.printStackTrace();
				System.out.println("order export excel, workbook wirte io exception");
			} finally {
				if (fileInput != null)
					fileInput.close();
				template_workbook.close();
			}
			
		} catch (IOException e) {
			e.printStackTrace();
			System.out.println("order export excel, get output stream io exception");
		}
	}
}
