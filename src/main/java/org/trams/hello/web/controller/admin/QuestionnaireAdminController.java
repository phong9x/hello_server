/*
 * Created on 12 May 2017 ( Time 16:20:00 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.web.controller.admin;

import java.util.Date;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.data.domain.Page;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.trams.hello.bean.Answer;
import org.trams.hello.bean.Question;
//--- Entities
import org.trams.hello.bean.Questionnaire;
import org.trams.hello.bean.jpa.AnswerEntity;
import org.trams.hello.bean.jpa.QuestionEntity;
import org.trams.hello.bean.jpa.QuestionnaireEntity;
import org.trams.hello.business.service.AnswerService;
import org.trams.hello.business.service.QuestionService;
//--- Services 
import org.trams.hello.business.service.QuestionnaireService;
import org.trams.hello.business.service.mapping.AnswerServiceMapper;
import org.trams.hello.business.service.mapping.QuestionServiceMapper;
//--- Common classes
import org.trams.hello.web.common.AbstractController;
import org.trams.hello.web.common.Pager;

/**
 * Spring MVC controller for 'Questionnaire' management.
 */
@Controller
@RequestMapping("/admin/content/questionnaire")
public class QuestionnaireAdminController extends AbstractController {

	//--- Variables names ( to be used in JSP with Expression Language )
	private static final String MAIN_ENTITY_NAME = "questionnaire";
	private static final String MAIN_LIST_NAME = "list";

	private static final Integer PAGE_SIZE   = 30;

	private static String nav = "questionnaire";

	//--- JSP pages names ( View name in the MVC model )
	private static final String JSP_CREATE   = "admin/content/questionnaire/create";
	private static final String JSP_LIST   = "admin/content/questionnaire/list";
	private static final String JSP_EDIT   = "admin/content/questionnaire/edit";
	private static final String JSP_DETAIL   = "admin/content/questionnaire/detail";

	//--- Main entity service
	@Resource
    private QuestionnaireService questionnaireService; // Injected by Spring
	
	@Resource
    private QuestionService questionService; // Injected by Spring
	
	@Resource
    private QuestionServiceMapper questionServiceMapper; // Injected by Spring
	
	@Resource
    private AnswerService answerService;

	@Resource
    private AnswerServiceMapper answerServiceMapper;
	
	//--- Other service(s)

	//--------------------------------------------------------------------------------------
	/**
	 * Default constructor
	 */
	public QuestionnaireAdminController() {
		super(QuestionnaireAdminController.class, MAIN_ENTITY_NAME );
		log("QuestionnaireAdminController created.");
	}

	@RequestMapping( value="/list", method = RequestMethod.GET)
	public String list(
			@RequestParam(value="page",defaultValue="1") Integer page,
			@RequestParam(value="type",defaultValue="2") Short type,
			HttpSession session,
			HttpServletRequest request,
			Model model) {
		Page<QuestionnaireEntity> listPage = questionnaireService.listPagingByType(type, page, PAGE_SIZE);
		model.addAttribute(MAIN_LIST_NAME, listPage);	
		model.addAttribute("type", type);
		model.addAttribute("activePage", nav);
		new Pager<QuestionnaireEntity>(listPage).setSetting(model, request);		
		return JSP_LIST;
	}
	
	@RequestMapping( value="/list", method = RequestMethod.POST)
	public String list_post(
			@RequestParam(value="type",defaultValue="2") Short type,
			@RequestParam(value="active",defaultValue="0") Integer active,
			HttpSession session,
			HttpServletRequest request,
			Model model) {
		if(active > 0){
			Questionnaire q = questionnaireService.findById(active);
			questionnaireService.updateIsShowByType(q.getType());
			q.setIsShow((short)1);
			questionnaireService.update(q);
		}
		return "redirect:/"+JSP_LIST+"?type="+type;
	}

	
	@RequestMapping("/detail/{id}")
	public String detail(
	Model model, 
	HttpSession session,
	@PathVariable("id") Integer id) {
		Questionnaire questionnaire = questionnaireService.findById(id);
		model.addAttribute("questionnaire", questionnaire);
		return JSP_DETAIL;
	}
	@RequestMapping(value = "/create", method = RequestMethod.GET ) 
	public String create(
			@RequestParam(value="type", defaultValue="") Short type,
			HttpSession session,
			Model model) {
		String version = questionnaireService.getNameVersionBy_Type(type);
		Integer versionNumber = Integer.parseInt(version.substring(0, 1))+1;
		String versionName = versionNumber +".0";
		model.addAttribute("type", type);
		model.addAttribute("versionName", versionName);
		model.addAttribute("activePage", nav);
		return JSP_CREATE;
	}

	@RequestMapping(value = "/create", method = RequestMethod.POST ) 
	public String create(
			HttpSession session,
			@ModelAttribute QuestionnaireEntity questionnaire,
			Model model) {
		log("Action 'create'");
		try {
			questionnaireService.updateIsShowByType(questionnaire.getType());
			//create questionaire
			Questionnaire q = new Questionnaire();
			q.setIsShow((short)1);
			q.setCreateDate(new Date());
			q.setType(questionnaire.getType());
			q.setQuestionNumber(questionnaire.getQuestionNumber());
			q.setUpdateDate(new Date());
			q.setVersion(questionnaire.getVersion());
			Questionnaire qc = questionnaireService.create(q);
			
			//create question, answer
			Integer orderNumber = 1;
			for (int i = 0; i < questionnaire.getListOfQuestion().size(); i++) {
				
				Question question = questionServiceMapper.mapQuestionEntityToQuestion(questionnaire.getListOfQuestion().get(i));
				question.setCreateDate(new Date());
				question.setQuestionaireId(qc.getId());
				question.setUpdateDate(new Date());
				question.setOrderNumber(orderNumber);
				Question create = questionService.create(question);
				
				for (int j = 0; j < questionnaire.getListOfQuestion().get(i).getListOfAnswer().size(); j++) {
					Answer a = answerServiceMapper.mapAnswerEntityToAnswer(questionnaire.getListOfQuestion().get(i).getListOfAnswer().get(j));
					a.setCreateDate(new Date());
					a.setQuestionId(create.getId());
					a.setUpdateDate(new Date());
					if(a.getContent() == null){
						a.setContent("");
					}
					answerService.create(a);
				}
				orderNumber++;
			}
			return "redirect:/"+JSP_LIST+"?type="+questionnaire.getType();
		} catch(Exception e) {
			e.printStackTrace();
			return JSP_CREATE;
		}
	}

	@RequestMapping(value = "/edit/{id}", method = RequestMethod.GET)
	public String update(
	HttpSession session,
	@PathVariable("id") Integer id,
	Model model  ) {
		Questionnaire questionnaire = questionnaireService.findById(id);
		try {
			List<QuestionEntity> list_question = questionService.listQuestionBy_QuestionId(id);
			for (QuestionEntity questionEntity : list_question) {
				List<AnswerEntity> list_answer = answerService.listAnswersByQuestionId(questionEntity.getId());
				questionEntity.setListOfAnswer(list_answer);
			}
			model.addAttribute("list_question", list_question);
			model.addAttribute("item", questionnaire);
			model.addAttribute("type", questionnaire.getType());
			model.addAttribute("activePage", nav);
			return JSP_EDIT;
		} catch(Exception e) {
			return JSP_LIST;
		}
	}
	
	@RequestMapping(value = "/edit/{id}", method = RequestMethod.POST ) 
	public String edit(
			HttpSession session,
			@ModelAttribute QuestionnaireEntity questionnaire,
			@PathVariable("id") Integer id,
			Model model) {
		log("Action 'create'");
		try {
			Date currentDate =new Date();
			questionnaireService.updateIsShowByType(questionnaire.getType());
			//update questionaire
			Questionnaire q = questionnaireService.findById(id);
			q.setQuestionNumber(questionnaire.getQuestionNumber());
			Questionnaire qc = questionnaireService.update(q);
			
			//update question, answer
			Integer orderNumber = 1;
			questionService.updateIsDeleteByQuestionaireId(id);
			for (int i = 0; i < questionnaire.getListOfQuestion().size(); i++) {
				Question question = questionServiceMapper.mapQuestionEntityToQuestion(questionnaire.getListOfQuestion().get(i));
				if(question.getId() !=null){
					Question qu = questionService.findById(question.getId());
					qu.setContent(question.getContent());
					qu.setUpdateDate(currentDate);
					qu.setOrderNumber(orderNumber);
					qu.setIsDelete((short)0);
					questionService.update(qu);
				}else{
					question.setCreateDate(currentDate);
					question.setQuestionaireId(qc.getId());
					question.setUpdateDate(currentDate);
					question.setOrderNumber(orderNumber);
					question.setIsDelete((short)0);
					question  = questionService.create(question);
				}
				orderNumber++;
				if(questionnaire.getListOfQuestion().get(i).getListOfAnswer() != null){
					for (int j = 0; j < questionnaire.getListOfQuestion().get(i).getListOfAnswer().size(); j++) {
						Answer a = answerServiceMapper.mapAnswerEntityToAnswer(questionnaire.getListOfQuestion().get(i).getListOfAnswer().get(j));
						if(a.getId() != null){
							Answer an = answerService.findById(a.getId());
							if(a.getContent() == null){
								an.setContent("");
							}else{
								an.setContent(a.getContent());
							}
							an.setPoint(a.getPoint());
							answerService.update(an);
						}else{
							if(a.getContent() == null){
								a.setContent("");
							}
							a.setCreateDate(new Date());
							a.setQuestionId(question.getId());
							a.setUpdateDate(new Date());
							answerService.create(a);
						}
					}
				}
				
				
			}
			return "redirect:/"+JSP_EDIT+"/"+id;
		} catch(Exception e) {
			e.printStackTrace();
			return JSP_CREATE;
		}
	}
	
	

	@RequestMapping(value = "/delete/{id}")
	public String delete(
	Model model, 
	HttpSession session,
	@PathVariable("id") Integer id ) {
	
			
	questionnaireService.delete(id);
	return "redirect:/"+JSP_LIST;
	}

}
