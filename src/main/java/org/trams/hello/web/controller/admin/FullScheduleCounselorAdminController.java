/*
 * Created on 17 Mar 2017 ( Time 09:36:38 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.web.controller.admin;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.annotation.Resource;
import javax.servlet.http.HttpSession;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.trams.hello.bean.FullSchedule;
import org.trams.hello.bean.jpa.CounselorScheduleSettingEntity;
//--- Services 
import org.trams.hello.business.service.CounselorScheduleSettingService;
import org.trams.hello.business.service.CounselorService;
//--- Common classes
import org.trams.hello.web.common.AbstractController;
import org.trams.hello.web.common.utils.DataUtils;

/**
 * Spring MVC controller for 'CounselorScheduleSetting' management.
 */
@Controller
@RequestMapping("/admin/operation/fullSchedule")
public class FullScheduleCounselorAdminController extends AbstractController {

	// --- Variables names ( to be used in JSP with Expression Language )
	private static final String MAIN_ENTITY_NAME = "counselorScheduleSetting";
	private static final String MAIN_LIST_NAME = "list";

	private static final Integer PAGE_SIZE = 30;

	private static String nav = "counselorScheduleSetting";

	// --- JSP pages names ( View name in the MVC model )
	private static final String JSP_LIST = "admin/operation/fullSchedule/list";

	// --- Main entity service
	@Resource
	private CounselorScheduleSettingService counselorScheduleSettingService; // Injected
																				// by
																				// Spring
	// --- Other service(s)
	@Resource
	private CounselorService counselorService; // Injected by Spring

	// --------------------------------------------------------------------------------------
	/**
	 * Default constructor
	 */
	public FullScheduleCounselorAdminController() {
		super(FullScheduleCounselorAdminController.class, MAIN_ENTITY_NAME);
		log("CounselorScheduleSettingAdminController created.");
	}

	@RequestMapping("/list")
	public String list(@RequestParam(value = "startDate", defaultValue = "") String startDate, HttpSession session,
			Model model) {
		try {

			Calendar c = Calendar.getInstance();
			if (startDate != null) {
				Date date = DataUtils.convertToDate(startDate, "yyyy-MM-dd");
				c.setTime(date);
			}
			c.set(Calendar.DAY_OF_WEEK, c.getFirstDayOfWeek() + 1);
			c.set(Calendar.HOUR_OF_DAY, 0);
			c.set(Calendar.MINUTE, 0);
			c.set(Calendar.SECOND, 0);
			c.set(Calendar.MILLISECOND, 0);
			Calendar endWeek = Calendar.getInstance();
			endWeek.setTime(c.getTime());
			endWeek.add(Calendar.DATE, 6);
			Calendar cal = Calendar.getInstance();
			cal.setTime(c.getTime());
			cal.add(Calendar.DATE, -7);
			model.addAttribute("preWeek", DataUtils.parseStringFromDate(cal.getTime(), "yyyy-MM-dd"));
			cal.add(Calendar.DATE, +14);
			model.addAttribute("nextWeek", DataUtils.parseStringFromDate(cal.getTime(), "yyyy-MM-dd"));
			DateFormat df = new SimpleDateFormat("MM.dd");
			DateFormat dfStartWeek = new SimpleDateFormat("yyyy년 MM월 dd일");
			Integer month = 1;
			Integer year = 0;
			String dayNames[] = { "월", "화", "수", "목", "금", "토", "일" };
			List<CounselorScheduleSettingEntity> list = counselorScheduleSettingService.listByWeek(c.getTime(),
					endWeek.getTime());
			
			List<FullSchedule> list_schedule = new ArrayList<>();
			if (list.size() > 0) {
				Set<Float> hs = new HashSet<>();
				List<Float> reservationTime = new ArrayList<>();
				FullSchedule f = new FullSchedule();
				f.setDate(list.get(0).getReservationDate());
				Integer number = 0;
				for (int i = 0; i < list.size(); i++) {
					if (f.getDate().compareTo(list.get(i).getReservationDate()) == 0) {
						String[] split = list.get(i).getReservationTime().split(";");
						for (int j = 0; j < split.length; j++) {
							hs.add(Float.valueOf(split[j]));
						}
						number++;
						f.setCounselorNumber(number);
						if (i == (list.size() - 1)) {
							reservationTime = new ArrayList<>();
							reservationTime.addAll(hs);
							f.setReservationTime(reservationTime);
							list_schedule.add(f);
						}
					} else {
						reservationTime = new ArrayList<>();
						reservationTime.addAll(hs);
						f.setReservationTime(reservationTime);
						f.setCounselorNumber(number);
						number = 0;
						list_schedule.add(f);
						if (i == (list.size() - 1)) {
							f = new FullSchedule();
							hs = new HashSet<>();
							f.setCounselorNumber(1);
							f.setDate(list.get(i).getReservationDate());
							f.setReservationTime(reservationTime);
							String[] split = list.get(i).getReservationTime().split(";");
 							for (int j = 0; j < split.length; j++) {
								hs.add(Float.valueOf(split[j]));
							}
 							reservationTime = new ArrayList<>();
							reservationTime.addAll(hs);
							list_schedule.add(f);
						} else {

							f = new FullSchedule();
							hs = new HashSet<>();
							f.setDate(list.get(i).getReservationDate());
							
							String[] split = list.get(i).getReservationTime().split(";");
							for (int j = 0; j < split.length; j++) {
								hs.add(Float.valueOf(split[j]));
							}
							number++;
						}
					}
				}
			}
			model.addAttribute("list_schedule", list_schedule);

			List<List<String>> list_content = new ArrayList<>();
			Integer schedule_number = 0;
			String titleTop = "";
			String titleBottom = "";
			int maxRow = 144;
			int maxColumn = 7;
			Calendar now = Calendar.getInstance();
			for (int i = 0; i < maxColumn; i++) {
				if (i == 0) {
					month = c.get(Calendar.MONTH) + 1;
					year = c.get(Calendar.YEAR);
					model.addAttribute("startWeek", dfStartWeek.format(c.getTime()) + " (월)");
				} else if (i == 6) {
					if (year != (c.get(Calendar.YEAR))) {
						model.addAttribute("endWeek", dfStartWeek.format(c.getTime()) + " (일)");
					} else if (month != (c.get(Calendar.MONTH) + 1)) {
						DateFormat dfEndWeek = new SimpleDateFormat("MM월 dd일 (일)");
						model.addAttribute("endWeek", dfEndWeek.format(c.getTime()));
					} else {
						DateFormat dfEndWeek = new SimpleDateFormat("dd일 (일)");
						model.addAttribute("endWeek", dfEndWeek.format(c.getTime()));
					}
				}
				// Add title date at table
				if (c.get(Calendar.DAY_OF_MONTH) == now.get(Calendar.DAY_OF_MONTH)) {
					titleBottom += "<li><span style='color:blue'>" + df.format(c.getTime()) + "(" + dayNames[i]
							+ ")</span></li>";
				} else {
					titleBottom += "<li><span>" + df.format(c.getTime()) + "(" + dayNames[i] + ")</span></li>";
				}
				// Add content table
				if (schedule_number < list_schedule.size()
						&& c.getTime().compareTo(list_schedule.get(schedule_number).getDate()) == 0) {
					List<String> listByDayReservation = new ArrayList<>();
					List<Float> list_reservation = list_schedule.get(schedule_number).getReservationTime();
					Collections.sort(list_reservation);
					titleTop +="<li><span>"+list_schedule.get(schedule_number).getCounselorNumber()+"명</span></li>";
					int hour = 0;
					int minutes = 0;
					String totalHour = "";
					for (int j = 0; j < maxRow; j++) {
						totalHour = String.valueOf(hour+"."+minutes);
						if (list_reservation.contains(Float.valueOf(totalHour))) {
							listByDayReservation.add(" <td class='active'></td>");
						} else {
							listByDayReservation.add(" <td></td>");
						}
						
						if(minutes == 5){
							hour+=1;
							minutes = 0;
						}else{
							minutes++;
						}
						
					}
					
					list_content.add(listByDayReservation);
					schedule_number++;
				} else {
					titleTop +="<li><span>0 명</span></li>";
					List<String> listByDayReservation = new ArrayList<>();
					for (float j = 0; j < maxRow; j++) {
						listByDayReservation.add("<td> </td>");
					}
					list_content.add(listByDayReservation);
				}
				c.add(Calendar.DATE, 1);
			}
			model.addAttribute("list_content", list_content);
			model.addAttribute("titleTop", titleTop);
			model.addAttribute("titleBottom", titleBottom);

		} catch (Exception e) {
			e.printStackTrace();
		}
		return JSP_LIST;
	}
}
