/*
 * Created on 6 Jun 2017 ( Time 09:28:16 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
// This Bean has a basic Primary Key (not composite) 

package org.trams.hello.bean.jpa;

import java.io.Serializable;

//import javax.validation.constraints.* ;
//import org.hibernate.validator.constraints.* ;

import java.util.Date;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

import org.hibernate.annotations.DynamicInsert;
import org.hibernate.annotations.DynamicUpdate;

import com.fasterxml.jackson.annotation.JsonIgnore;

/**
 * Persistent class for entity stored in table "counselor"
 *
 * @author Telosys Tools Generator
 *
 */

@Entity
@Table(name = "counselor", catalog = "hello")
// Define named queries here
@NamedQueries({ @NamedQuery(name = "CounselorEntity.countAll", query = "SELECT COUNT(x) FROM CounselorEntity x") })
@DynamicInsert
@DynamicUpdate
public class CounselorEntity implements Serializable {

	private static final long serialVersionUID = 1L;

	// ----------------------------------------------------------------------
	// ENTITY PRIMARY KEY ( BASED ON A SINGLE FIELD )
	// ----------------------------------------------------------------------
	@Id
	@Column(name = "id", nullable = false)
	private Integer id;

	// ----------------------------------------------------------------------
	// ENTITY DATA FIELDS
	// ----------------------------------------------------------------------
	@Column(name = "counselor_number")
	private Integer counselorNumber;

	@Column(name = "account_bank_number", length = 100)
	private String accountBankNumber;

	@Column(name = "account_bank_holder", length = 100)
	private String accountBankHolder;

	@Column(name = "level", nullable = false)
	private Short level;

	@Column(name = "level_vip", nullable = false)
	private Short levelVip;

	@Column(name = "aimmed_recommend", nullable = false)
	private Short aimmedRecommend;

	@Column(name = "fee_counselor", nullable = false)
	private Integer feeCounselor;

	@Column(name = "counsel_number", nullable = false, length = 50)
	private String counselNumber;

	@Column(name = "fee_counselor_50_minutes", nullable = false)
	private Integer feeCounselor50Minutes;

	@Column(name = "counsel_online", nullable = false)
	private Short counselOnline;

	@Column(name = "points", nullable = false)
	private Float points;

	@Column(name = "likes", nullable = false)
	private Integer likes;

	@Column(name = "guidance_username", length = 200)
	private String guidanceUsername;

	@Column(name = "guidance_password", length = 200)
	private String guidancePassword;

	@Column(name = "mbti_certificate", length = 50)
	private String mbtiCertificate;

	@Column(name = "introduce", length = 500)
	private String introduce;

	@Column(name = "thumbnail_url", nullable = false, length = 500)
	private String thumbnailUrl;

	@Column(name = "thumbnail_name", nullable = false, length = 500)
	private String thumbnailName;

	@Column(name = "status", nullable = false)
	private Short status;

	@Column(name = "actived", nullable = false)
	private Short actived;

	@Column(name = "pause_reason", length = 500)
	private String pauseReason;

	@Column(name = "is_from_assesta", nullable = false)
	private Short isFromAssesta;

	@Column(name = "profit_percent")
	private Float profitPercent;

	@Column(name = "is_delete")
	private Integer isDelete;

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "accept_counselor_date")
	private Date acceptCounselorDate;

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "reserve_date")
	private Date reserveDate;

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "create_date")
	private Date createDate;

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "update_date")
	private Date updateDate;

	@Column(name = "status_payment_counseling_use_voucher")
	private Integer statusPaymentCounselingUseVoucher;

	@Column(name = "counseling_rest_time")
	private Integer counselingRestTime;

	@Column(name = "counseling_50_minutes", nullable = false)
	private Short counseling50Minutes;

	// "counselorCenterId" (column "counselor_center_id") is not defined by
	// itself because used as FK in a link
	// "bankId" (column "bank_id") is not defined by itself because used as FK
	// in a link

	// ----------------------------------------------------------------------
	// ENTITY LINKS ( RELATIONSHIP )
	// ----------------------------------------------------------------------
	@JsonIgnore
	@OneToMany(mappedBy = "counselor", targetEntity = RequestUserPsychologicalEntity.class)
	private List<RequestUserPsychologicalEntity> listOfRequestUserPsychological;

	@JsonIgnore
	@OneToMany(mappedBy = "counselor", targetEntity = CounselorFieldEntity.class)
	private List<CounselorFieldEntity> listOfCounselorField;

	@JsonIgnore
	@OneToMany(mappedBy = "counselor", targetEntity = CounselorScheduleSettingEntity.class)
	private List<CounselorScheduleSettingEntity> listOfCounselorScheduleSetting;

	@JsonIgnore
	@OneToMany(mappedBy = "counselor", targetEntity = CounselingMemoEntity.class)
	private List<CounselingMemoEntity> listOfCounselingMemo;

	@JsonIgnore
	@OneToMany(mappedBy = "counselor", targetEntity = UserQuestionaireEntity.class)
	private List<UserQuestionaireEntity> listOfUserQuestionaire;

	@ManyToOne
	@JoinColumn(name = "bank_id", referencedColumnName = "id")
	private BankEntity bank;

	@JsonIgnore
	@OneToMany(mappedBy = "counselor", targetEntity = CounselorTempEntity.class)
	private List<CounselorTempEntity> listOfCounselorTemp;

	@JsonIgnore
	@OneToMany(mappedBy = "counselor", targetEntity = CounselingSessionEntity.class)
	private List<CounselingSessionEntity> listOfCounselingSession;

	@ManyToOne
	@JoinColumn(name = "id", referencedColumnName = "id", insertable = false, updatable = false)
	private UserEntity user;

	@ManyToOne
	@JoinColumn(name = "counselor_center_id", referencedColumnName = "id")
	private CounselingCenterEntity counselingCenter;

	@Transient
	private Integer statusOnline;

	// isReservation : 1/ yes - 0 / no
	@Transient
	private Integer isReservation;

	@Transient
	private Integer isCounselingRestTime;

	public Integer getIsCounselingRestTime() {
		return isCounselingRestTime;
	}

	public void setIsCounselingRestTime(Integer isCounselingRestTime) {
		this.isCounselingRestTime = isCounselingRestTime;
	}

	public Integer getStatusOnline() {
		return statusOnline;
	}

	public void setStatusOnline(Integer statusOnline) {
		this.statusOnline = statusOnline;
	}

	public Integer getIsReservation() {
		return isReservation;
	}

	public void setIsReservation(Integer isReservation) {
		this.isReservation = isReservation;
	}

	// ----------------------------------------------------------------------
	// CONSTRUCTOR(S)
	// ----------------------------------------------------------------------
	public CounselorEntity() {
		super();
	}

	// ----------------------------------------------------------------------
	// GETTER & SETTER FOR THE KEY FIELD
	// ----------------------------------------------------------------------
	public void setId(Integer id) {
		this.id = id;
	}

	public Integer getId() {
		return this.id;
	}

	// ----------------------------------------------------------------------
	// GETTERS & SETTERS FOR FIELDS
	// ----------------------------------------------------------------------
	// --- DATABASE MAPPING : counselor_number ( INT )
	public void setCounselorNumber(Integer counselorNumber) {
		this.counselorNumber = counselorNumber;
	}

	public Integer getCounselorNumber() {
		return this.counselorNumber;
	}

	// --- DATABASE MAPPING : account_bank_number ( VARCHAR )
	public void setAccountBankNumber(String accountBankNumber) {
		this.accountBankNumber = accountBankNumber;
	}

	public String getAccountBankNumber() {
		return this.accountBankNumber;
	}

	// --- DATABASE MAPPING : account_bank_holder ( VARCHAR )
	public void setAccountBankHolder(String accountBankHolder) {
		this.accountBankHolder = accountBankHolder;
	}

	public String getAccountBankHolder() {
		return this.accountBankHolder;
	}

	// --- DATABASE MAPPING : level ( SMALLINT )
	public void setLevel(Short level) {
		this.level = level;
	}

	public Short getLevel() {
		return this.level;
	}

	// --- DATABASE MAPPING : level_vip ( SMALLINT )
	public void setLevelVip(Short levelVip) {
		this.levelVip = levelVip;
	}

	public Short getLevelVip() {
		return this.levelVip;
	}

	// --- DATABASE MAPPING : aimmed_recommend ( SMALLINT )
	public void setAimmedRecommend(Short aimmedRecommend) {
		this.aimmedRecommend = aimmedRecommend;
	}

	public Short getAimmedRecommend() {
		return this.aimmedRecommend;
	}

	// --- DATABASE MAPPING : fee_counselor ( INT )
	public void setFeeCounselor(Integer feeCounselor) {
		this.feeCounselor = feeCounselor;
	}

	public Integer getFeeCounselor() {
		return this.feeCounselor;
	}

	// --- DATABASE MAPPING : counsel_number ( VARCHAR )
	public void setCounselNumber(String counselNumber) {
		this.counselNumber = counselNumber;
	}

	public String getCounselNumber() {
		return this.counselNumber;
	}

	// --- DATABASE MAPPING : fee_counselor_50_minutes ( INT )
	public void setFeeCounselor50Minutes(Integer feeCounselor50Minutes) {
		this.feeCounselor50Minutes = feeCounselor50Minutes;
	}

	public Integer getFeeCounselor50Minutes() {
		return this.feeCounselor50Minutes;
	}

	// --- DATABASE MAPPING : counsel_online ( SMALLINT )
	public void setCounselOnline(Short counselOnline) {
		this.counselOnline = counselOnline;
	}

	public Short getCounselOnline() {
		return this.counselOnline;
	}

	// --- DATABASE MAPPING : points ( FLOAT )
	public void setPoints(Float points) {
		this.points = points;
	}

	public Float getPoints() {
		return this.points;
	}

	// --- DATABASE MAPPING : likes ( INT )
	public void setLikes(Integer likes) {
		this.likes = likes;
	}

	public Integer getLikes() {
		return this.likes;
	}

	// --- DATABASE MAPPING : guidance_username ( VARCHAR )
	public void setGuidanceUsername(String guidanceUsername) {
		this.guidanceUsername = guidanceUsername;
	}

	public String getGuidanceUsername() {
		return this.guidanceUsername;
	}

	// --- DATABASE MAPPING : guidance_password ( VARCHAR )
	public void setGuidancePassword(String guidancePassword) {
		this.guidancePassword = guidancePassword;
	}

	public String getGuidancePassword() {
		return this.guidancePassword;
	}

	// --- DATABASE MAPPING : mbti_certificate ( VARCHAR )
	public void setMbtiCertificate(String mbtiCertificate) {
		this.mbtiCertificate = mbtiCertificate;
	}

	public String getMbtiCertificate() {
		return this.mbtiCertificate;
	}

	// --- DATABASE MAPPING : introduce ( VARCHAR )
	public void setIntroduce(String introduce) {
		this.introduce = introduce;
	}

	public String getIntroduce() {
		return this.introduce;
	}

	// --- DATABASE MAPPING : thumbnail_url ( VARCHAR )
	public void setThumbnailUrl(String thumbnailUrl) {
		this.thumbnailUrl = thumbnailUrl;
	}

	public String getThumbnailUrl() {
		return this.thumbnailUrl;
	}

	// --- DATABASE MAPPING : thumbnail_name ( VARCHAR )
	public void setThumbnailName(String thumbnailName) {
		this.thumbnailName = thumbnailName;
	}

	public String getThumbnailName() {
		return this.thumbnailName;
	}

	// --- DATABASE MAPPING : status ( SMALLINT )
	public void setStatus(Short status) {
		this.status = status;
	}

	public Short getStatus() {
		return this.status;
	}

	// --- DATABASE MAPPING : actived ( SMALLINT )
	public void setActived(Short actived) {
		this.actived = actived;
	}

	public Short getActived() {
		return this.actived;
	}

	// --- DATABASE MAPPING : pause_reason ( VARCHAR )
	public void setPauseReason(String pauseReason) {
		this.pauseReason = pauseReason;
	}

	public String getPauseReason() {
		return this.pauseReason;
	}

	// --- DATABASE MAPPING : is_from_assesta ( SMALLINT )
	public void setIsFromAssesta(Short isFromAssesta) {
		this.isFromAssesta = isFromAssesta;
	}

	public Short getIsFromAssesta() {
		return this.isFromAssesta;
	}

	// --- DATABASE MAPPING : profit_percent ( FLOAT )
	public void setProfitPercent(Float profitPercent) {
		this.profitPercent = profitPercent;
	}

	public Float getProfitPercent() {
		return this.profitPercent;
	}

	// --- DATABASE MAPPING : is_delete ( INT )
	public void setIsDelete(Integer isDelete) {
		this.isDelete = isDelete;
	}

	public Integer getIsDelete() {
		return this.isDelete;
	}

	// --- DATABASE MAPPING : accept_counselor_date ( DATETIME )
	public void setAcceptCounselorDate(Date acceptCounselorDate) {
		this.acceptCounselorDate = acceptCounselorDate;
	}

	public Date getAcceptCounselorDate() {
		return this.acceptCounselorDate;
	}

	// --- DATABASE MAPPING : reserve_date ( DATETIME )
	public void setReserveDate(Date reserveDate) {
		this.reserveDate = reserveDate;
	}

	public Date getReserveDate() {
		return this.reserveDate;
	}

	// --- DATABASE MAPPING : create_date ( DATETIME )
	public void setCreateDate(Date createDate) {
		this.createDate = createDate;
	}

	public Date getCreateDate() {
		return this.createDate;
	}

	// --- DATABASE MAPPING : update_date ( DATETIME )
	public void setUpdateDate(Date updateDate) {
		this.updateDate = updateDate;
	}

	public Date getUpdateDate() {
		return this.updateDate;
	}

	// --- DATABASE MAPPING : status_payment_counseling_use_voucher ( INT )
	public void setStatusPaymentCounselingUseVoucher(Integer statusPaymentCounselingUseVoucher) {
		this.statusPaymentCounselingUseVoucher = statusPaymentCounselingUseVoucher;
	}

	public Integer getStatusPaymentCounselingUseVoucher() {
		return this.statusPaymentCounselingUseVoucher;
	}

	// --- DATABASE MAPPING : counseling_rest_time ( INT )
	public void setCounselingRestTime(Integer counselingRestTime) {
		this.counselingRestTime = counselingRestTime;
	}

	public Integer getCounselingRestTime() {
		return this.counselingRestTime;
	}

	// --- DATABASE MAPPING : counseling_50_minutes ( SMALLINT )
	public void setCounseling50Minutes(Short counseling50Minutes) {
		this.counseling50Minutes = counseling50Minutes;
	}

	public Short getCounseling50Minutes() {
		return this.counseling50Minutes;
	}

	// ----------------------------------------------------------------------
	// GETTERS & SETTERS FOR LINKS
	// ----------------------------------------------------------------------
	public void setListOfRequestUserPsychological(List<RequestUserPsychologicalEntity> listOfRequestUserPsychological) {
		this.listOfRequestUserPsychological = listOfRequestUserPsychological;
	}

	public List<RequestUserPsychologicalEntity> getListOfRequestUserPsychological() {
		return this.listOfRequestUserPsychological;
	}

	public void setListOfCounselorField(List<CounselorFieldEntity> listOfCounselorField) {
		this.listOfCounselorField = listOfCounselorField;
	}

	public List<CounselorFieldEntity> getListOfCounselorField() {
		return this.listOfCounselorField;
	}

	public void setListOfCounselorScheduleSetting(List<CounselorScheduleSettingEntity> listOfCounselorScheduleSetting) {
		this.listOfCounselorScheduleSetting = listOfCounselorScheduleSetting;
	}

	public List<CounselorScheduleSettingEntity> getListOfCounselorScheduleSetting() {
		return this.listOfCounselorScheduleSetting;
	}

	public void setListOfCounselingMemo(List<CounselingMemoEntity> listOfCounselingMemo) {
		this.listOfCounselingMemo = listOfCounselingMemo;
	}

	public List<CounselingMemoEntity> getListOfCounselingMemo() {
		return this.listOfCounselingMemo;
	}

	public void setListOfUserQuestionaire(List<UserQuestionaireEntity> listOfUserQuestionaire) {
		this.listOfUserQuestionaire = listOfUserQuestionaire;
	}

	public List<UserQuestionaireEntity> getListOfUserQuestionaire() {
		return this.listOfUserQuestionaire;
	}

	public void setBank(BankEntity bank) {
		this.bank = bank;
	}

	public BankEntity getBank() {
		return this.bank;
	}

	public void setListOfCounselorTemp(List<CounselorTempEntity> listOfCounselorTemp) {
		this.listOfCounselorTemp = listOfCounselorTemp;
	}

	public List<CounselorTempEntity> getListOfCounselorTemp() {
		return this.listOfCounselorTemp;
	}

	public void setListOfCounselingSession(List<CounselingSessionEntity> listOfCounselingSession) {
		this.listOfCounselingSession = listOfCounselingSession;
	}

	public List<CounselingSessionEntity> getListOfCounselingSession() {
		return this.listOfCounselingSession;
	}

	public void setUser(UserEntity user) {
		this.user = user;
	}

	public UserEntity getUser() {
		return this.user;
	}

	public void setCounselingCenter(CounselingCenterEntity counselingCenter) {
		this.counselingCenter = counselingCenter;
	}

	public CounselingCenterEntity getCounselingCenter() {
		return this.counselingCenter;
	}

	// ----------------------------------------------------------------------
	// toString METHOD
	// ----------------------------------------------------------------------
	public String toString() {
		StringBuffer sb = new StringBuffer();
		sb.append("[");
		sb.append(id);
		sb.append("]:");
		sb.append(counselorNumber);
		sb.append("|");
		sb.append(accountBankNumber);
		sb.append("|");
		sb.append(accountBankHolder);
		sb.append("|");
		sb.append(level);
		sb.append("|");
		sb.append(levelVip);
		sb.append("|");
		sb.append(aimmedRecommend);
		sb.append("|");
		sb.append(feeCounselor);
		sb.append("|");
		sb.append(counselNumber);
		sb.append("|");
		sb.append(feeCounselor50Minutes);
		sb.append("|");
		sb.append(counselOnline);
		sb.append("|");
		sb.append(points);
		sb.append("|");
		sb.append(likes);
		sb.append("|");
		sb.append(guidanceUsername);
		sb.append("|");
		sb.append(guidancePassword);
		sb.append("|");
		sb.append(mbtiCertificate);
		sb.append("|");
		sb.append(introduce);
		sb.append("|");
		sb.append(thumbnailUrl);
		sb.append("|");
		sb.append(thumbnailName);
		sb.append("|");
		sb.append(status);
		sb.append("|");
		sb.append(actived);
		sb.append("|");
		sb.append(pauseReason);
		sb.append("|");
		sb.append(isFromAssesta);
		sb.append("|");
		sb.append(profitPercent);
		sb.append("|");
		sb.append(isDelete);
		sb.append("|");
		sb.append(acceptCounselorDate);
		sb.append("|");
		sb.append(reserveDate);
		sb.append("|");
		sb.append(createDate);
		sb.append("|");
		sb.append(updateDate);
		sb.append("|");
		sb.append(statusPaymentCounselingUseVoucher);
		sb.append("|");
		sb.append(counselingRestTime);
		sb.append("|");
		sb.append(counseling50Minutes);
		return sb.toString();
	}

}
