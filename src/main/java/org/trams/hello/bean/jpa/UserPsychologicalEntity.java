/*
 * Created on 22 Apr 2017 ( Time 11:48:46 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
// This Bean has a basic Primary Key (not composite) 

package org.trams.hello.bean.jpa;

import java.io.Serializable;

//import javax.validation.constraints.* ;
//import org.hibernate.validator.constraints.* ;

import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.hibernate.annotations.DynamicInsert;
import org.hibernate.annotations.DynamicUpdate;

/**
 * Persistent class for entity stored in table "user_psychological"
 *
 * @author Telosys Tools Generator
 *
 */

@Entity
@Table(name="user_psychological", catalog="hello" )
// Define named queries here
@NamedQueries ( {
  @NamedQuery ( name="UserPsychologicalEntity.countAll", query="SELECT COUNT(x) FROM UserPsychologicalEntity x" )
} )
@DynamicInsert
@DynamicUpdate
public class UserPsychologicalEntity implements Serializable {

    private static final long serialVersionUID = 1L;

    //----------------------------------------------------------------------
    // ENTITY PRIMARY KEY ( BASED ON A SINGLE FIELD )
    //----------------------------------------------------------------------
    @Id
    @GeneratedValue(strategy=GenerationType.AUTO)
    @Column(name="id", nullable=false)
    private Integer    id           ;


    //----------------------------------------------------------------------
    // ENTITY DATA FIELDS 
    //----------------------------------------------------------------------    
    @Column(name="user_id")
    private Integer    userId       ;

    @Column(name="counselor_id")
    private Integer    counselorId  ;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="create_date")
    private Date       createDate   ;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="update_date")
    private Date       updateDate   ;

	// "psychologicalTestId" (column "psychological_test_id") is not defined by itself because used as FK in a link 
	// "requestPsychologicalId" (column "request_psychological_id") is not defined by itself because used as FK in a link 


    //----------------------------------------------------------------------
    // ENTITY LINKS ( RELATIONSHIP )
    //----------------------------------------------------------------------
    @OneToOne(mappedBy="userPsychological", targetEntity=UserPsychologicalFileEntity.class)
    private UserPsychologicalFileEntity listOfUserPsychologicalFile;

    @ManyToOne
    @JoinColumn(name="psychological_test_id", referencedColumnName="id")
    private PsychologicalTestSettingEntity psychologicalTestSetting;

    @ManyToOne
    @JoinColumn(name="request_psychological_id", referencedColumnName="id")
    private RequestUserPsychologicalEntity requestUserPsychological;



    //----------------------------------------------------------------------
    // CONSTRUCTOR(S)
    //----------------------------------------------------------------------
    public UserPsychologicalEntity() {
		super();
    }
    
    //----------------------------------------------------------------------
    // GETTER & SETTER FOR THE KEY FIELD
    //----------------------------------------------------------------------
    public void setId( Integer id ) {
        this.id = id ;
    }
    public Integer getId() {
        return this.id;
    }

    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR FIELDS
    //----------------------------------------------------------------------
    //--- DATABASE MAPPING : user_id ( INT ) 
    public void setUserId( Integer userId ) {
        this.userId = userId;
    }
    public Integer getUserId() {
        return this.userId;
    }

    //--- DATABASE MAPPING : counselor_id ( INT ) 
    public void setCounselorId( Integer counselorId ) {
        this.counselorId = counselorId;
    }
    public Integer getCounselorId() {
        return this.counselorId;
    }

    //--- DATABASE MAPPING : create_date ( DATETIME ) 
    public void setCreateDate( Date createDate ) {
        this.createDate = createDate;
    }
    public Date getCreateDate() {
        return this.createDate;
    }

    //--- DATABASE MAPPING : update_date ( DATETIME ) 
    public void setUpdateDate( Date updateDate ) {
        this.updateDate = updateDate;
    }
    public Date getUpdateDate() {
        return this.updateDate;
    }


    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR LINKS
    //----------------------------------------------------------------------
    public void setListOfUserPsychologicalFile( UserPsychologicalFileEntity listOfUserPsychologicalFile ) {
        this.listOfUserPsychologicalFile = listOfUserPsychologicalFile;
    }
    public UserPsychologicalFileEntity getListOfUserPsychologicalFile() {
        return this.listOfUserPsychologicalFile;
    }

    public void setPsychologicalTestSetting( PsychologicalTestSettingEntity psychologicalTestSetting ) {
        this.psychologicalTestSetting = psychologicalTestSetting;
    }
    public PsychologicalTestSettingEntity getPsychologicalTestSetting() {
        return this.psychologicalTestSetting;
    }

    public void setRequestUserPsychological( RequestUserPsychologicalEntity requestUserPsychological ) {
        this.requestUserPsychological = requestUserPsychological;
    }
    public RequestUserPsychologicalEntity getRequestUserPsychological() {
        return this.requestUserPsychological;
    }


    //----------------------------------------------------------------------
    // toString METHOD
    //----------------------------------------------------------------------
    public String toString() { 
        StringBuffer sb = new StringBuffer(); 
        sb.append("["); 
        sb.append(id);
        sb.append("]:"); 
        sb.append(userId);
        sb.append("|");
        sb.append(counselorId);
        sb.append("|");
        sb.append(createDate);
        sb.append("|");
        sb.append(updateDate);
        return sb.toString(); 
    } 

}
