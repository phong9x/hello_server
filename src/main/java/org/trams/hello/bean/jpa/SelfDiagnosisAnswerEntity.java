/*
 * Created on 23 Mar 2017 ( Time 10:21:04 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
// This Bean has a basic Primary Key (not composite) 

package org.trams.hello.bean.jpa;

import java.io.Serializable;

//import javax.validation.constraints.* ;
//import org.hibernate.validator.constraints.* ;

import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import org.hibernate.annotations.DynamicInsert;
import org.hibernate.annotations.DynamicUpdate;

import com.fasterxml.jackson.annotation.JsonIgnore;

/**
 * Persistent class for entity stored in table "self_diagnosis_answer"
 *
 * @author Telosys Tools Generator
 *
 */

@Entity
@Table(name="self_diagnosis_answer", catalog="hello" )
// Define named queries here
@NamedQueries ( {
  @NamedQuery ( name="SelfDiagnosisAnswerEntity.countAll", query="SELECT COUNT(x) FROM SelfDiagnosisAnswerEntity x" )
} )
@DynamicInsert
@DynamicUpdate
public class SelfDiagnosisAnswerEntity implements Serializable {

    private static final long serialVersionUID = 1L;

    //----------------------------------------------------------------------
    // ENTITY PRIMARY KEY ( BASED ON A SINGLE FIELD )
    //----------------------------------------------------------------------
    @Id
    @Column(name="id", nullable=false)
    private Integer    id           ;


    //----------------------------------------------------------------------
    // ENTITY DATA FIELDS 
    //----------------------------------------------------------------------    
    @Column(name="point")
    private Integer    point        ;

    @Column(name="content", nullable=false)
    private String     content      ;

    @Column(name="self_diagnosis_field", nullable=false)
    private Integer    selfDiagnosisField ;



    //----------------------------------------------------------------------
    // ENTITY LINKS ( RELATIONSHIP )
    //----------------------------------------------------------------------
	@JsonIgnore
    @OneToMany(mappedBy="selfDiagnosisAnswer", targetEntity=TestResultEntity.class)
    private List<TestResultEntity> listOfTestResult;


    //----------------------------------------------------------------------
    // CONSTRUCTOR(S)
    //----------------------------------------------------------------------
    public SelfDiagnosisAnswerEntity() {
		super();
    }
    
    //----------------------------------------------------------------------
    // GETTER & SETTER FOR THE KEY FIELD
    //----------------------------------------------------------------------
    public void setId( Integer id ) {
        this.id = id ;
    }
    public Integer getId() {
        return this.id;
    }

    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR FIELDS
    //----------------------------------------------------------------------
    //--- DATABASE MAPPING : point ( INT ) 
    public void setPoint( Integer point ) {
        this.point = point;
    }
    public Integer getPoint() {
        return this.point;
    }

    //--- DATABASE MAPPING : content ( TEXT ) 
    public void setContent( String content ) {
        this.content = content;
    }
    public String getContent() {
        return this.content;
    }

    //--- DATABASE MAPPING : self_diagnosis_field ( INT ) 
    public void setSelfDiagnosisField( Integer selfDiagnosisField ) {
        this.selfDiagnosisField = selfDiagnosisField;
    }
    public Integer getSelfDiagnosisField() {
        return this.selfDiagnosisField;
    }


    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR LINKS
    //----------------------------------------------------------------------
    public void setListOfTestResult( List<TestResultEntity> listOfTestResult ) {
        this.listOfTestResult = listOfTestResult;
    }
    public List<TestResultEntity> getListOfTestResult() {
        return this.listOfTestResult;
    }


    //----------------------------------------------------------------------
    // toString METHOD
    //----------------------------------------------------------------------
    public String toString() { 
        StringBuffer sb = new StringBuffer(); 
        sb.append("["); 
        sb.append(id);
        sb.append("]:"); 
        sb.append(point);
        // attribute 'content' not usable (type = String Long Text)
        sb.append("|");
        sb.append(selfDiagnosisField);
        return sb.toString(); 
    } 

}
