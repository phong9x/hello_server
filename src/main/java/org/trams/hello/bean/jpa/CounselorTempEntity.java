/*
 * Created on 29 Apr 2017 ( Time 11:01:36 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
// This Bean has a basic Primary Key (not composite) 

package org.trams.hello.bean.jpa;

import java.io.Serializable;

//import javax.validation.constraints.* ;
//import org.hibernate.validator.constraints.* ;

import java.util.Date;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.hibernate.annotations.DynamicInsert;
import org.hibernate.annotations.DynamicUpdate;

import com.fasterxml.jackson.annotation.JsonIgnore;

/**
 * Persistent class for entity stored in table "counselor_temp"
 *
 * @author Telosys Tools Generator
 *
 */

@Entity
@Table(name="counselor_temp", catalog="hello" )
// Define named queries here
@NamedQueries ( {
  @NamedQuery ( name="CounselorTempEntity.countAll", query="SELECT COUNT(x) FROM CounselorTempEntity x" )
} )
@DynamicInsert
@DynamicUpdate
public class CounselorTempEntity implements Serializable {

    private static final long serialVersionUID = 1L;

    //----------------------------------------------------------------------
    // ENTITY PRIMARY KEY ( BASED ON A SINGLE FIELD )
    //----------------------------------------------------------------------
    @Id
    @GeneratedValue(strategy=GenerationType.AUTO)
    @Column(name="id", nullable=false)
    private Integer    id           ;


    //----------------------------------------------------------------------
    // ENTITY DATA FIELDS 
    //----------------------------------------------------------------------    
    @Column(name="counselor_number")
    private Integer    counselorNumber ;

    @Column(name="counselor_center_id")
    private Integer    counselorCenterId ;

    @Column(name="account_bank_number", length=100)
    private String     accountBankNumber ;

    @Column(name="account_bank_holder", length=100)
    private String     accountBankHolder ;

    @Column(name="level", nullable=false)
    private Short      level        ;

    @Column(name="level_vip", nullable=false)
    private Short      levelVip     ;

    @Column(name="aimmed_recommend", nullable=false)
    private Short      aimmedRecommend ;

    @Column(name="fee_counselor", nullable=false)
    private Integer    feeCounselor ;

    @Column(name="counsel_number", nullable=false, length=50)
    private String     counselNumber ;

    @Column(name="counsel_online", nullable=false)
    private Short      counselOnline ;

    @Column(name="points", nullable=false)
    private Float      points       ;

    @Column(name="likes", nullable=false)
    private Integer    likes        ;

    @Column(name="guidance_username", length=200)
    private String     guidanceUsername ;

    @Column(name="guidance_password", length=200)
    private String     guidancePassword ;

    @Column(name="mbti_certificate", length=50)
    private String     mbtiCertificate ;

    @Column(name="introduce", length=500)
    private String     introduce    ;

    @Column(name="thumbnail_url", nullable=false, length=500)
    private String     thumbnailUrl ;

    @Column(name="thumbnail_name", nullable=false, length=500)
    private String     thumbnailName ;

    @Column(name="status", nullable=false)
    private Short      status       ;

    @Column(name="pause_reason", length=500)
    private String     pauseReason  ;

    @Column(name="is_from_assesta", nullable=false)
    private Short      isFromAssesta ;

    @Column(name="profit_percent")
    private Float      profitPercent ;

    @Column(name="is_delete")
    private Integer    isDelete     ;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="accept_counselor_date")
    private Date       acceptCounselorDate ;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="reserve_date")
    private Date       reserveDate  ;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="create_date")
    private Date       createDate   ;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="update_date", nullable=false)
    private Date       updateDate   ;

    @Column(name="status_payment_counseling_use_voucher", nullable=false)
    private Integer    statusPaymentCounselingUseVoucher ;

    @Column(name="counseling_rest_time")
    private Integer    counselingRestTime ;

    @Column(name="reserve_reason", length=300)
    private String     reserveReason ;

	// "counselorId" (column "counselor_id") is not defined by itself because used as FK in a link 
	// "adminId" (column "admin_id") is not defined by itself because used as FK in a link 
	// "bankId" (column "bank_id") is not defined by itself because used as FK in a link 


    //----------------------------------------------------------------------
    // ENTITY LINKS ( RELATIONSHIP )
    //----------------------------------------------------------------------
	@JsonIgnore
    @OneToMany(mappedBy="counselorTemp", targetEntity=CounselorFieldTempEntity.class)
    private List<CounselorFieldTempEntity> listOfCounselorFieldTemp;

    @ManyToOne
    @JoinColumn(name="bank_id", referencedColumnName="id")
    private BankEntity bank        ;

    @ManyToOne
    @JoinColumn(name="admin_id", referencedColumnName="id")
    private UserEntity user        ;

    @ManyToOne
    @JoinColumn(name="counselor_id", referencedColumnName="id")
    private CounselorEntity counselor   ;



    //----------------------------------------------------------------------
    // CONSTRUCTOR(S)
    //----------------------------------------------------------------------
    public CounselorTempEntity() {
		super();
    }
    
    //----------------------------------------------------------------------
    // GETTER & SETTER FOR THE KEY FIELD
    //----------------------------------------------------------------------
    public void setId( Integer id ) {
        this.id = id ;
    }
    public Integer getId() {
        return this.id;
    }

    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR FIELDS
    //----------------------------------------------------------------------
    //--- DATABASE MAPPING : counselor_number ( INT ) 
    public void setCounselorNumber( Integer counselorNumber ) {
        this.counselorNumber = counselorNumber;
    }
    public Integer getCounselorNumber() {
        return this.counselorNumber;
    }

    //--- DATABASE MAPPING : counselor_center_id ( INT ) 
    public void setCounselorCenterId( Integer counselorCenterId ) {
        this.counselorCenterId = counselorCenterId;
    }
    public Integer getCounselorCenterId() {
        return this.counselorCenterId;
    }

    //--- DATABASE MAPPING : account_bank_number ( VARCHAR ) 
    public void setAccountBankNumber( String accountBankNumber ) {
        this.accountBankNumber = accountBankNumber;
    }
    public String getAccountBankNumber() {
        return this.accountBankNumber;
    }

    //--- DATABASE MAPPING : account_bank_holder ( VARCHAR ) 
    public void setAccountBankHolder( String accountBankHolder ) {
        this.accountBankHolder = accountBankHolder;
    }
    public String getAccountBankHolder() {
        return this.accountBankHolder;
    }

    //--- DATABASE MAPPING : level ( SMALLINT ) 
    public void setLevel( Short level ) {
        this.level = level;
    }
    public Short getLevel() {
        return this.level;
    }

    //--- DATABASE MAPPING : level_vip ( SMALLINT ) 
    public void setLevelVip( Short levelVip ) {
        this.levelVip = levelVip;
    }
    public Short getLevelVip() {
        return this.levelVip;
    }

    //--- DATABASE MAPPING : aimmed_recommend ( SMALLINT UNSIGNED ) 
    public void setAimmedRecommend( Short aimmedRecommend ) {
        this.aimmedRecommend = aimmedRecommend;
    }
    public Short getAimmedRecommend() {
        return this.aimmedRecommend;
    }

    //--- DATABASE MAPPING : fee_counselor ( INT ) 
    public void setFeeCounselor( Integer feeCounselor ) {
        this.feeCounselor = feeCounselor;
    }
    public Integer getFeeCounselor() {
        return this.feeCounselor;
    }

    //--- DATABASE MAPPING : counsel_number ( VARCHAR ) 
    public void setCounselNumber( String counselNumber ) {
        this.counselNumber = counselNumber;
    }
    public String getCounselNumber() {
        return this.counselNumber;
    }

    //--- DATABASE MAPPING : counsel_online ( SMALLINT ) 
    public void setCounselOnline( Short counselOnline ) {
        this.counselOnline = counselOnline;
    }
    public Short getCounselOnline() {
        return this.counselOnline;
    }

    //--- DATABASE MAPPING : points ( FLOAT ) 
    public void setPoints( Float points ) {
        this.points = points;
    }
    public Float getPoints() {
        return this.points;
    }

    //--- DATABASE MAPPING : likes ( INT ) 
    public void setLikes( Integer likes ) {
        this.likes = likes;
    }
    public Integer getLikes() {
        return this.likes;
    }

    //--- DATABASE MAPPING : guidance_username ( VARCHAR ) 
    public void setGuidanceUsername( String guidanceUsername ) {
        this.guidanceUsername = guidanceUsername;
    }
    public String getGuidanceUsername() {
        return this.guidanceUsername;
    }

    //--- DATABASE MAPPING : guidance_password ( VARCHAR ) 
    public void setGuidancePassword( String guidancePassword ) {
        this.guidancePassword = guidancePassword;
    }
    public String getGuidancePassword() {
        return this.guidancePassword;
    }

    //--- DATABASE MAPPING : mbti_certificate ( VARCHAR ) 
    public void setMbtiCertificate( String mbtiCertificate ) {
        this.mbtiCertificate = mbtiCertificate;
    }
    public String getMbtiCertificate() {
        return this.mbtiCertificate;
    }

    //--- DATABASE MAPPING : introduce ( VARCHAR ) 
    public void setIntroduce( String introduce ) {
        this.introduce = introduce;
    }
    public String getIntroduce() {
        return this.introduce;
    }

    //--- DATABASE MAPPING : thumbnail_url ( VARCHAR ) 
    public void setThumbnailUrl( String thumbnailUrl ) {
        this.thumbnailUrl = thumbnailUrl;
    }
    public String getThumbnailUrl() {
        return this.thumbnailUrl;
    }

    //--- DATABASE MAPPING : thumbnail_name ( VARCHAR ) 
    public void setThumbnailName( String thumbnailName ) {
        this.thumbnailName = thumbnailName;
    }
    public String getThumbnailName() {
        return this.thumbnailName;
    }

    //--- DATABASE MAPPING : status ( SMALLINT ) 
    public void setStatus( Short status ) {
        this.status = status;
    }
    public Short getStatus() {
        return this.status;
    }

    //--- DATABASE MAPPING : pause_reason ( VARCHAR ) 
    public void setPauseReason( String pauseReason ) {
        this.pauseReason = pauseReason;
    }
    public String getPauseReason() {
        return this.pauseReason;
    }

    //--- DATABASE MAPPING : is_from_assesta ( SMALLINT ) 
    public void setIsFromAssesta( Short isFromAssesta ) {
        this.isFromAssesta = isFromAssesta;
    }
    public Short getIsFromAssesta() {
        return this.isFromAssesta;
    }

    //--- DATABASE MAPPING : profit_percent ( FLOAT ) 
    public void setProfitPercent( Float profitPercent ) {
        this.profitPercent = profitPercent;
    }
    public Float getProfitPercent() {
        return this.profitPercent;
    }

    //--- DATABASE MAPPING : is_delete ( INT ) 
    public void setIsDelete( Integer isDelete ) {
        this.isDelete = isDelete;
    }
    public Integer getIsDelete() {
        return this.isDelete;
    }

    //--- DATABASE MAPPING : accept_counselor_date ( DATETIME ) 
    public void setAcceptCounselorDate( Date acceptCounselorDate ) {
        this.acceptCounselorDate = acceptCounselorDate;
    }
    public Date getAcceptCounselorDate() {
        return this.acceptCounselorDate;
    }

    //--- DATABASE MAPPING : reserve_date ( DATETIME ) 
    public void setReserveDate( Date reserveDate ) {
        this.reserveDate = reserveDate;
    }
    public Date getReserveDate() {
        return this.reserveDate;
    }

    //--- DATABASE MAPPING : create_date ( DATETIME ) 
    public void setCreateDate( Date createDate ) {
        this.createDate = createDate;
    }
    public Date getCreateDate() {
        return this.createDate;
    }

    //--- DATABASE MAPPING : update_date ( DATETIME ) 
    public void setUpdateDate( Date updateDate ) {
        this.updateDate = updateDate;
    }
    public Date getUpdateDate() {
        return this.updateDate;
    }

    //--- DATABASE MAPPING : status_payment_counseling_use_voucher ( INT ) 
    public void setStatusPaymentCounselingUseVoucher( Integer statusPaymentCounselingUseVoucher ) {
        this.statusPaymentCounselingUseVoucher = statusPaymentCounselingUseVoucher;
    }
    public Integer getStatusPaymentCounselingUseVoucher() {
        return this.statusPaymentCounselingUseVoucher;
    }

    //--- DATABASE MAPPING : counseling_rest_time ( INT ) 
    public void setCounselingRestTime( Integer counselingRestTime ) {
        this.counselingRestTime = counselingRestTime;
    }
    public Integer getCounselingRestTime() {
        return this.counselingRestTime;
    }

    //--- DATABASE MAPPING : reserve_reason ( VARCHAR ) 
    public void setReserveReason( String reserveReason ) {
        this.reserveReason = reserveReason;
    }
    public String getReserveReason() {
        return this.reserveReason;
    }


    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR LINKS
    //----------------------------------------------------------------------
    public void setListOfCounselorFieldTemp( List<CounselorFieldTempEntity> listOfCounselorFieldTemp ) {
        this.listOfCounselorFieldTemp = listOfCounselorFieldTemp;
    }
    public List<CounselorFieldTempEntity> getListOfCounselorFieldTemp() {
        return this.listOfCounselorFieldTemp;
    }

    public void setBank( BankEntity bank ) {
        this.bank = bank;
    }
    public BankEntity getBank() {
        return this.bank;
    }

    public void setUser( UserEntity user ) {
        this.user = user;
    }
    public UserEntity getUser() {
        return this.user;
    }

    public void setCounselor( CounselorEntity counselor ) {
        this.counselor = counselor;
    }
    public CounselorEntity getCounselor() {
        return this.counselor;
    }


    //----------------------------------------------------------------------
    // toString METHOD
    //----------------------------------------------------------------------
    public String toString() { 
        StringBuffer sb = new StringBuffer(); 
        sb.append("["); 
        sb.append(id);
        sb.append("]:"); 
        sb.append(counselorNumber);
        sb.append("|");
        sb.append(counselorCenterId);
        sb.append("|");
        sb.append(accountBankNumber);
        sb.append("|");
        sb.append(accountBankHolder);
        sb.append("|");
        sb.append(level);
        sb.append("|");
        sb.append(levelVip);
        sb.append("|");
        sb.append(aimmedRecommend);
        sb.append("|");
        sb.append(feeCounselor);
        sb.append("|");
        sb.append(counselNumber);
        sb.append("|");
        sb.append(counselOnline);
        sb.append("|");
        sb.append(points);
        sb.append("|");
        sb.append(likes);
        sb.append("|");
        sb.append(guidanceUsername);
        sb.append("|");
        sb.append(guidancePassword);
        sb.append("|");
        sb.append(mbtiCertificate);
        sb.append("|");
        sb.append(introduce);
        sb.append("|");
        sb.append(thumbnailUrl);
        sb.append("|");
        sb.append(thumbnailName);
        sb.append("|");
        sb.append(status);
        sb.append("|");
        sb.append(pauseReason);
        sb.append("|");
        sb.append(isFromAssesta);
        sb.append("|");
        sb.append(profitPercent);
        sb.append("|");
        sb.append(isDelete);
        sb.append("|");
        sb.append(acceptCounselorDate);
        sb.append("|");
        sb.append(reserveDate);
        sb.append("|");
        sb.append(createDate);
        sb.append("|");
        sb.append(updateDate);
        sb.append("|");
        sb.append(statusPaymentCounselingUseVoucher);
        sb.append("|");
        sb.append(counselingRestTime);
        sb.append("|");
        sb.append(reserveReason);
        return sb.toString(); 
    } 

}
