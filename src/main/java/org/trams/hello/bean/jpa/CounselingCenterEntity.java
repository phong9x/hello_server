/*
 * Created on 10 Mar 2017 ( Time 10:47:39 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
// This Bean has a basic Primary Key (not composite) 

package org.trams.hello.bean.jpa;

import java.io.Serializable;

//import javax.validation.constraints.* ;
//import org.hibernate.validator.constraints.* ;

import java.util.Date;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.hibernate.annotations.DynamicInsert;
import org.hibernate.annotations.DynamicUpdate;

import com.fasterxml.jackson.annotation.JsonIdentityInfo;
import com.fasterxml.jackson.annotation.JsonIdentityReference;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;

/**
 * Persistent class for entity stored in table "counseling_center"
 *
 * @author Telosys Tools Generator
 *
 */

@Entity
@Table(name="counseling_center", catalog="hello" )
// Define named queries here
@NamedQueries ( {
  @NamedQuery ( name="CounselingCenterEntity.countAll", query="SELECT COUNT(x) FROM CounselingCenterEntity x" )
} )
@DynamicInsert
@DynamicUpdate
public class CounselingCenterEntity implements Serializable {

    private static final long serialVersionUID = 1L;

    //----------------------------------------------------------------------
    // ENTITY PRIMARY KEY ( BASED ON A SINGLE FIELD )
    //----------------------------------------------------------------------
    @Id
    @Column(name="id", nullable=false)
    private Integer    id           ;


    //----------------------------------------------------------------------
    // ENTITY DATA FIELDS 
    //----------------------------------------------------------------------    
    @Column(name="center_name", nullable=false, length=100)
    private String     centerName   ;

    @Column(name="center_no", nullable=false, length=100)
    private String     centerNo     ;

    @Column(name="center_address", length=200)
    private String     centerAddress ;

    @Column(name="business_number", length=200)
    private String     businessNumber ;

    @Column(name="represent_position", length=200)
    private String     representPosition ;

    @Column(name="counselor_number")
    private Integer    counselorNumber ;

    @Column(name="counseling_session_number")
    private Integer    counselingSessionNumber ;

    @Column(name="total_counseling_fee")
    private Integer    totalCounselingFee ;

    @Column(name="admin_level_id")
    private Short      adminLevelId ;

    @Temporal(TemporalType.DATE)
    @Column(name="center_register_date")
    private Date       centerRegisterDate ;

    @Column(name="status", nullable=false)
    private Integer    status       ;

    @Column(name="aimmed_recommend")
    private Short      aimmedRecommend ;

    @Column(name="account_bank_name", nullable=false, length=100)
    private String     accountBankName ;

    @Column(name="account_bank_number", nullable=false, length=100)
    private String     accountBankNumber ;

    @Column(name="account_bank_holder", nullable=false, length=100)
    private String     accountBankHolder ;

    @Column(name="photo_saving_url", length=500)
    private String     photoSavingUrl ;

    @Column(name="photo_saving_name", length=200)
    private String     photoSavingName ;

    @Column(name="profit_percent")
    private Float      profitPercent ;

    @Column(name="is_delete")
    private Integer    isDelete     ;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="create_date")
    private Date       createDate   ;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="update_date")
    private Date       updateDate   ;



    //----------------------------------------------------------------------
    // ENTITY LINKS ( RELATIONSHIP )
    //----------------------------------------------------------------------
	@JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class, property = "id")
    @JsonIdentityReference(alwaysAsId = true)
    @OneToMany(mappedBy="counselingCenter", targetEntity=CounselorEntity.class)
    private List<CounselorEntity> listOfCounselor;

    @ManyToOne
    @JoinColumn(name="id", referencedColumnName="id", insertable=false, updatable=false)
    private UserEntity user        ;


    //----------------------------------------------------------------------
    // CONSTRUCTOR(S)
    //----------------------------------------------------------------------
    public CounselingCenterEntity() {
		super();
    }
    
    //----------------------------------------------------------------------
    // GETTER & SETTER FOR THE KEY FIELD
    //----------------------------------------------------------------------
    public void setId( Integer id ) {
        this.id = id ;
    }
    public Integer getId() {
        return this.id;
    }

    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR FIELDS
    //----------------------------------------------------------------------
    //--- DATABASE MAPPING : center_name ( VARCHAR ) 
    public void setCenterName( String centerName ) {
        this.centerName = centerName;
    }
    public String getCenterName() {
        return this.centerName;
    }

    //--- DATABASE MAPPING : center_no ( VARCHAR ) 
    public void setCenterNo( String centerNo ) {
        this.centerNo = centerNo;
    }
    public String getCenterNo() {
        return this.centerNo;
    }

    //--- DATABASE MAPPING : center_address ( VARCHAR ) 
    public void setCenterAddress( String centerAddress ) {
        this.centerAddress = centerAddress;
    }
    public String getCenterAddress() {
        return this.centerAddress;
    }

    //--- DATABASE MAPPING : business_number ( VARCHAR ) 
    public void setBusinessNumber( String businessNumber ) {
        this.businessNumber = businessNumber;
    }
    public String getBusinessNumber() {
        return this.businessNumber;
    }

    //--- DATABASE MAPPING : represent_position ( VARCHAR ) 
    public void setRepresentPosition( String representPosition ) {
        this.representPosition = representPosition;
    }
    public String getRepresentPosition() {
        return this.representPosition;
    }

    //--- DATABASE MAPPING : counselor_number ( INT ) 
    public void setCounselorNumber( Integer counselorNumber ) {
        this.counselorNumber = counselorNumber;
    }
    public Integer getCounselorNumber() {
        return this.counselorNumber;
    }

    //--- DATABASE MAPPING : counseling_session_number ( INT ) 
    public void setCounselingSessionNumber( Integer counselingSessionNumber ) {
        this.counselingSessionNumber = counselingSessionNumber;
    }
    public Integer getCounselingSessionNumber() {
        return this.counselingSessionNumber;
    }

    //--- DATABASE MAPPING : total_counseling_fee ( INT ) 
    public void setTotalCounselingFee( Integer totalCounselingFee ) {
        this.totalCounselingFee = totalCounselingFee;
    }
    public Integer getTotalCounselingFee() {
        return this.totalCounselingFee;
    }

    //--- DATABASE MAPPING : admin_level_id ( SMALLINT ) 
    public void setAdminLevelId( Short adminLevelId ) {
        this.adminLevelId = adminLevelId;
    }
    public Short getAdminLevelId() {
        return this.adminLevelId;
    }

    //--- DATABASE MAPPING : center_register_date ( DATE ) 
    public void setCenterRegisterDate( Date centerRegisterDate ) {
        this.centerRegisterDate = centerRegisterDate;
    }
    public Date getCenterRegisterDate() {
        return this.centerRegisterDate;
    }

    //--- DATABASE MAPPING : status ( INT ) 
    public void setStatus( Integer status ) {
        this.status = status;
    }
    public Integer getStatus() {
        return this.status;
    }

    //--- DATABASE MAPPING : aimmed_recommend ( SMALLINT ) 
    public void setAimmedRecommend( Short aimmedRecommend ) {
        this.aimmedRecommend = aimmedRecommend;
    }
    public Short getAimmedRecommend() {
        return this.aimmedRecommend;
    }

    //--- DATABASE MAPPING : account_bank_name ( VARCHAR ) 
    public void setAccountBankName( String accountBankName ) {
        this.accountBankName = accountBankName;
    }
    public String getAccountBankName() {
        return this.accountBankName;
    }

    //--- DATABASE MAPPING : account_bank_number ( VARCHAR ) 
    public void setAccountBankNumber( String accountBankNumber ) {
        this.accountBankNumber = accountBankNumber;
    }
    public String getAccountBankNumber() {
        return this.accountBankNumber;
    }

    //--- DATABASE MAPPING : account_bank_holder ( VARCHAR ) 
    public void setAccountBankHolder( String accountBankHolder ) {
        this.accountBankHolder = accountBankHolder;
    }
    public String getAccountBankHolder() {
        return this.accountBankHolder;
    }

    //--- DATABASE MAPPING : photo_saving_url ( VARCHAR ) 
    public void setPhotoSavingUrl( String photoSavingUrl ) {
        this.photoSavingUrl = photoSavingUrl;
    }
    public String getPhotoSavingUrl() {
        return this.photoSavingUrl;
    }

    //--- DATABASE MAPPING : photo_saving_name ( VARCHAR ) 
    public void setPhotoSavingName( String photoSavingName ) {
        this.photoSavingName = photoSavingName;
    }
    public String getPhotoSavingName() {
        return this.photoSavingName;
    }

    //--- DATABASE MAPPING : profit_percent ( FLOAT ) 
    public void setProfitPercent( Float profitPercent ) {
        this.profitPercent = profitPercent;
    }
    public Float getProfitPercent() {
        return this.profitPercent;
    }

    //--- DATABASE MAPPING : is_delete ( INT ) 
    public void setIsDelete( Integer isDelete ) {
        this.isDelete = isDelete;
    }
    public Integer getIsDelete() {
        return this.isDelete;
    }

    //--- DATABASE MAPPING : create_date ( DATETIME ) 
    public void setCreateDate( Date createDate ) {
        this.createDate = createDate;
    }
    public Date getCreateDate() {
        return this.createDate;
    }

    //--- DATABASE MAPPING : update_date ( DATETIME ) 
    public void setUpdateDate( Date updateDate ) {
        this.updateDate = updateDate;
    }
    public Date getUpdateDate() {
        return this.updateDate;
    }


    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR LINKS
    //----------------------------------------------------------------------
    public void setListOfCounselor( List<CounselorEntity> listOfCounselor ) {
        this.listOfCounselor = listOfCounselor;
    }
    public List<CounselorEntity> getListOfCounselor() {
        return this.listOfCounselor;
    }

    public void setUser( UserEntity user ) {
        this.user = user;
    }
    public UserEntity getUser() {
        return this.user;
    }


    //----------------------------------------------------------------------
    // toString METHOD
    //----------------------------------------------------------------------
    public String toString() { 
        StringBuffer sb = new StringBuffer(); 
        sb.append("["); 
        sb.append(id);
        sb.append("]:"); 
        sb.append(centerName);
        sb.append("|");
        sb.append(centerNo);
        sb.append("|");
        sb.append(centerAddress);
        sb.append("|");
        sb.append(businessNumber);
        sb.append("|");
        sb.append(representPosition);
        sb.append("|");
        sb.append(counselorNumber);
        sb.append("|");
        sb.append(counselingSessionNumber);
        sb.append("|");
        sb.append(totalCounselingFee);
        sb.append("|");
        sb.append(adminLevelId);
        sb.append("|");
        sb.append(centerRegisterDate);
        sb.append("|");
        sb.append(status);
        sb.append("|");
        sb.append(aimmedRecommend);
        sb.append("|");
        sb.append(accountBankName);
        sb.append("|");
        sb.append(accountBankNumber);
        sb.append("|");
        sb.append(accountBankHolder);
        sb.append("|");
        sb.append(photoSavingUrl);
        sb.append("|");
        sb.append(photoSavingName);
        sb.append("|");
        sb.append(profitPercent);
        sb.append("|");
        sb.append(isDelete);
        sb.append("|");
        sb.append(createDate);
        sb.append("|");
        sb.append(updateDate);
        return sb.toString(); 
    } 

}
