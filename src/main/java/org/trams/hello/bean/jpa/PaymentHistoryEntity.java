/*
 * Created on 14 Apr 2017 ( Time 15:35:15 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
// This Bean has a basic Primary Key (not composite) 

package org.trams.hello.bean.jpa;

import java.io.Serializable;

//import javax.validation.constraints.* ;
//import org.hibernate.validator.constraints.* ;

import java.util.Date;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.hibernate.annotations.DynamicInsert;
import org.hibernate.annotations.DynamicUpdate;

import com.fasterxml.jackson.annotation.JsonIgnore;

/**
 * Persistent class for entity stored in table "payment_history"
 *
 * @author Telosys Tools Generator
 *
 */

@Entity
@Table(name="payment_history", catalog="hello" )
// Define named queries here
@NamedQueries ( {
  @NamedQuery ( name="PaymentHistoryEntity.countAll", query="SELECT COUNT(x) FROM PaymentHistoryEntity x" )
} )
@DynamicInsert
@DynamicUpdate
public class PaymentHistoryEntity implements Serializable {

    private static final long serialVersionUID = 1L;

    //----------------------------------------------------------------------
    // ENTITY PRIMARY KEY ( BASED ON A SINGLE FIELD )
    //----------------------------------------------------------------------
    @Id
    @GeneratedValue(strategy=GenerationType.AUTO)
    @Column(name="id", nullable=false)
    private Integer    id           ;


    //----------------------------------------------------------------------
    // ENTITY DATA FIELDS 
    //----------------------------------------------------------------------    
    @Column(name="admin_id")
    private Integer    adminId      ;

    @Column(name="deal_number", length=50)
    private String     dealNumber   ;

    @Column(name="money")
    private Integer    money        ;

    @Column(name="coin")
    private Integer    coin         ;

    @Column(name="current_coin")
    private Integer    currentCoin  ;

    @Column(name="status", nullable=false)
    private Short      status       ;

    @Column(name="type_coin", nullable=false)
    private Short      typeCoin     ;

    @Column(name="tid", length=500)
    private String     tid          ;

    @Column(name="type_payment")
    private Integer    typePayment  ;

    @Column(name="reason", length=50)
    private String     reason       ;

    @Column(name="os_name", length=10)
    private String     osName       ;

    @Column(name="account_info")
    private String     accountInfo  ;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="refund_date")
    private Date       refundDate   ;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="create_date", nullable=false)
    private Date       createDate   ;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="update_date")
    private Date       updateDate   ;

	// "userId" (column "user_id") is not defined by itself because used as FK in a link 
	// "typeUse" (column "type_use") is not defined by itself because used as FK in a link 
	// "paymentMethodId" (column "payment_method_id") is not defined by itself because used as FK in a link 
	// "voucherUserId" (column "voucher_user_id") is not defined by itself because used as FK in a link 


    //----------------------------------------------------------------------
    // ENTITY LINKS ( RELATIONSHIP )
    //----------------------------------------------------------------------
    @ManyToOne
    @JoinColumn(name="user_id", referencedColumnName="id")
    private UserEntity user        ;

    @ManyToOne
    @JoinColumn(name="type_use", referencedColumnName="id")
    private CategoryEntity category    ;

    @ManyToOne
    @JoinColumn(name="voucher_user_id", referencedColumnName="id")
    private VoucherUserEntity voucherUser ;

    @ManyToOne
    @JoinColumn(name="payment_method_id", referencedColumnName="id")
    private CategoryEntity category2   ;

	@JsonIgnore
    @OneToMany(mappedBy="paymentHistory", targetEntity=RequestUserPsychologicalEntity.class)
    private List<RequestUserPsychologicalEntity> listOfRequestUserPsychological;

	@JsonIgnore
    @OneToMany(mappedBy="paymentHistory", targetEntity=CounselingSessionEntity.class)
    private List<CounselingSessionEntity> listOfCounselingSession;


    //----------------------------------------------------------------------
    // CONSTRUCTOR(S)
    //----------------------------------------------------------------------
    public PaymentHistoryEntity() {
		super();
    }
    
    //----------------------------------------------------------------------
    // GETTER & SETTER FOR THE KEY FIELD
    //----------------------------------------------------------------------
    public void setId( Integer id ) {
        this.id = id ;
    }
    public Integer getId() {
        return this.id;
    }

    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR FIELDS
    //----------------------------------------------------------------------
    //--- DATABASE MAPPING : admin_id ( INT ) 
    public void setAdminId( Integer adminId ) {
        this.adminId = adminId;
    }
    public Integer getAdminId() {
        return this.adminId;
    }

    //--- DATABASE MAPPING : deal_number ( VARCHAR ) 
    public void setDealNumber( String dealNumber ) {
        this.dealNumber = dealNumber;
    }
    public String getDealNumber() {
        return this.dealNumber;
    }

    //--- DATABASE MAPPING : money ( INT ) 
    public void setMoney( Integer money ) {
        this.money = money;
    }
    public Integer getMoney() {
        return this.money;
    }

    //--- DATABASE MAPPING : coin ( INT ) 
    public void setCoin( Integer coin ) {
        this.coin = coin;
    }
    public Integer getCoin() {
        return this.coin;
    }

    //--- DATABASE MAPPING : current_coin ( INT ) 
    public void setCurrentCoin( Integer currentCoin ) {
        this.currentCoin = currentCoin;
    }
    public Integer getCurrentCoin() {
        return this.currentCoin;
    }

    //--- DATABASE MAPPING : status ( SMALLINT ) 
    public void setStatus( Short status ) {
        this.status = status;
    }
    public Short getStatus() {
        return this.status;
    }

    //--- DATABASE MAPPING : type_coin ( SMALLINT ) 
    public void setTypeCoin( Short typeCoin ) {
        this.typeCoin = typeCoin;
    }
    public Short getTypeCoin() {
        return this.typeCoin;
    }

    //--- DATABASE MAPPING : tid ( VARCHAR ) 
    public void setTid( String tid ) {
        this.tid = tid;
    }
    public String getTid() {
        return this.tid;
    }

    //--- DATABASE MAPPING : type_payment ( INT ) 
    public void setTypePayment( Integer typePayment ) {
        this.typePayment = typePayment;
    }
    public Integer getTypePayment() {
        return this.typePayment;
    }

    //--- DATABASE MAPPING : reason ( VARCHAR ) 
    public void setReason( String reason ) {
        this.reason = reason;
    }
    public String getReason() {
        return this.reason;
    }

    //--- DATABASE MAPPING : os_name ( VARCHAR ) 
    public void setOsName( String osName ) {
        this.osName = osName;
    }
    public String getOsName() {
        return this.osName;
    }

    //--- DATABASE MAPPING : account_info ( TEXT ) 
    public void setAccountInfo( String accountInfo ) {
        this.accountInfo = accountInfo;
    }
    public String getAccountInfo() {
        return this.accountInfo;
    }

    //--- DATABASE MAPPING : refund_date ( DATETIME ) 
    public void setRefundDate( Date refundDate ) {
        this.refundDate = refundDate;
    }
    public Date getRefundDate() {
        return this.refundDate;
    }

    //--- DATABASE MAPPING : create_date ( DATETIME ) 
    public void setCreateDate( Date createDate ) {
        this.createDate = createDate;
    }
    public Date getCreateDate() {
        return this.createDate;
    }

    //--- DATABASE MAPPING : update_date ( DATETIME ) 
    public void setUpdateDate( Date updateDate ) {
        this.updateDate = updateDate;
    }
    public Date getUpdateDate() {
        return this.updateDate;
    }


    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR LINKS
    //----------------------------------------------------------------------
    public void setUser( UserEntity user ) {
        this.user = user;
    }
    public UserEntity getUser() {
        return this.user;
    }

    public void setCategory( CategoryEntity category ) {
        this.category = category;
    }
    public CategoryEntity getCategory() {
        return this.category;
    }

    public void setVoucherUser( VoucherUserEntity voucherUser ) {
        this.voucherUser = voucherUser;
    }
    public VoucherUserEntity getVoucherUser() {
        return this.voucherUser;
    }

    public void setCategory2( CategoryEntity category2 ) {
        this.category2 = category2;
    }
    public CategoryEntity getCategory2() {
        return this.category2;
    }

    public void setListOfRequestUserPsychological( List<RequestUserPsychologicalEntity> listOfRequestUserPsychological ) {
        this.listOfRequestUserPsychological = listOfRequestUserPsychological;
    }
    public List<RequestUserPsychologicalEntity> getListOfRequestUserPsychological() {
        return this.listOfRequestUserPsychological;
    }

    public void setListOfCounselingSession( List<CounselingSessionEntity> listOfCounselingSession ) {
        this.listOfCounselingSession = listOfCounselingSession;
    }
    public List<CounselingSessionEntity> getListOfCounselingSession() {
        return this.listOfCounselingSession;
    }


    //----------------------------------------------------------------------
    // toString METHOD
    //----------------------------------------------------------------------
    public String toString() { 
        StringBuffer sb = new StringBuffer(); 
        sb.append("["); 
        sb.append(id);
        sb.append("]:"); 
        sb.append(adminId);
        sb.append("|");
        sb.append(dealNumber);
        sb.append("|");
        sb.append(money);
        sb.append("|");
        sb.append(coin);
        sb.append("|");
        sb.append(currentCoin);
        sb.append("|");
        sb.append(status);
        sb.append("|");
        sb.append(typeCoin);
        sb.append("|");
        sb.append(tid);
        sb.append("|");
        sb.append(typePayment);
        sb.append("|");
        sb.append(reason);
        sb.append("|");
        sb.append(osName);
        // attribute 'accountInfo' not usable (type = String Long Text)
        sb.append("|");
        sb.append(refundDate);
        sb.append("|");
        sb.append(createDate);
        sb.append("|");
        sb.append(updateDate);
        return sb.toString(); 
    } 

}
